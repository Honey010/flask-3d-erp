# This file modified for abstract classes
from abc import ABC, abstractmethod
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CadExCore
else:
    import _CadExCore

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _CadExCore.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _CadExCore.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExCore.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExCore.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _CadExCore.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _CadExCore.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _CadExCore.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _CadExCore.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _CadExCore.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _CadExCore.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _CadExCore.SwigPyIterator_advance(self, n)

    def IsEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExCore.SwigPyIterator_IsEqual(self, x)

    def IsNotEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExCore.SwigPyIterator_IsNotEqual(self, x)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CadExCore:
_CadExCore.SwigPyIterator_swigregister(SwigPyIterator)


import atexit

class Base_UuidData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CadExCore.Base_UuidData_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CadExCore.Base_UuidData___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CadExCore.Base_UuidData___bool__(self)

    def __len__(self) -> "std::array< unsigned char,16 >::size_type":
        return _CadExCore.Base_UuidData___len__(self)

    def __getslice__(self, i: "std::array< unsigned char,16 >::difference_type", j: "std::array< unsigned char,16 >::difference_type") -> "std::array< unsigned char,16 > *":
        return _CadExCore.Base_UuidData___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CadExCore.Base_UuidData___setslice__(self, *args)

    def __delslice__(self, i: "std::array< unsigned char,16 >::difference_type", j: "std::array< unsigned char,16 >::difference_type") -> "void":
        return _CadExCore.Base_UuidData___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CadExCore.Base_UuidData___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::array< unsigned char,16 >::value_type const &":
        return _CadExCore.Base_UuidData___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CadExCore.Base_UuidData___setitem__(self, *args)

    def __init__(self, *args):
        _CadExCore.Base_UuidData_swiginit(self, _CadExCore.new_Base_UuidData(*args))

    def empty(self) -> "bool":
        return _CadExCore.Base_UuidData_empty(self)

    def size(self) -> "std::array< unsigned char,16 >::size_type":
        return _CadExCore.Base_UuidData_size(self)

    def swap(self, v: "Base_UuidData") -> "void":
        return _CadExCore.Base_UuidData_swap(self, v)

    def begin(self) -> "std::array< unsigned char,16 >::iterator":
        return _CadExCore.Base_UuidData_begin(self)

    def end(self) -> "std::array< unsigned char,16 >::iterator":
        return _CadExCore.Base_UuidData_end(self)

    def rbegin(self) -> "std::array< unsigned char,16 >::reverse_iterator":
        return _CadExCore.Base_UuidData_rbegin(self)

    def rend(self) -> "std::array< unsigned char,16 >::reverse_iterator":
        return _CadExCore.Base_UuidData_rend(self)

    def front(self) -> "std::array< unsigned char,16 >::value_type const &":
        return _CadExCore.Base_UuidData_front(self)

    def back(self) -> "std::array< unsigned char,16 >::value_type const &":
        return _CadExCore.Base_UuidData_back(self)

    def fill(self, u: "std::array< unsigned char,16 >::value_type const &") -> "void":
        return _CadExCore.Base_UuidData_fill(self, u)
    __swig_destroy__ = _CadExCore.delete_Base_UuidData

# Register Base_UuidData in _CadExCore:
_CadExCore.Base_UuidData_swigregister(Base_UuidData)

__CADEX_OCC_HANDLE_VERSION = _CadExCore.__CADEX_OCC_HANDLE_VERSION
__CADEX_PREVIEW_FILE_MODEL_TOOLS = _CadExCore.__CADEX_PREVIEW_FILE_MODEL_TOOLS
__CADEX_PREVIEW_MIN_BOUNDING_BOX = _CadExCore.__CADEX_PREVIEW_MIN_BOUNDING_BOX
__CADEX_PREVIEW_VISUALIZATION = _CadExCore.__CADEX_PREVIEW_VISUALIZATION
__CADEX_PREVIEW_PMI = _CadExCore.__CADEX_PREVIEW_PMI
__CADEX_PREVIEW_DFM = _CadExCore.__CADEX_PREVIEW_DFM
__CADEX_PREVIEW_MACHINING = _CadExCore.__CADEX_PREVIEW_MACHINING
__CADEX_PREVIEW_SHEETMETAL = _CadExCore.__CADEX_PREVIEW_SHEETMETAL
__CADEX_PREVIEW_WALLTHICKNESS = _CadExCore.__CADEX_PREVIEW_WALLTHICKNESS
__CADEX_PREVIEW_TEXTURES = _CadExCore.__CADEX_PREVIEW_TEXTURES
__CADEX_PREVIEW_READER_STATISTICS = _CadExCore.__CADEX_PREVIEW_READER_STATISTICS
__CADEX_PREVIEW_SAVE_EXTERNAL_REFERENCE_PATHS = _CadExCore.__CADEX_PREVIEW_SAVE_EXTERNAL_REFERENCE_PATHS
__CADEX_PREVIEW_ADVANCED_GEOMETRY = _CadExCore.__CADEX_PREVIEW_ADVANCED_GEOMETRY
__CADEX_PREVIEW_WRITER_STATISTICS = _CadExCore.__CADEX_PREVIEW_WRITER_STATISTICS
__CADEX_PREVIEW_DRAWINGS = _CadExCore.__CADEX_PREVIEW_DRAWINGS
__CADEX_PREVIEW_SHAPE_ID = _CadExCore.__CADEX_PREVIEW_SHAPE_ID
__CADEX_PREVIEW_B_REP_TO_POLY_ASSOCIATIONS = _CadExCore.__CADEX_PREVIEW_B_REP_TO_POLY_ASSOCIATIONS
__CADEX_PREVIEW_CONFIGURATIONS = _CadExCore.__CADEX_PREVIEW_CONFIGURATIONS

def cadex_malloc(theSize: "size_t") -> "void *":
    return _CadExCore.cadex_malloc(theSize)

def cadex_free(thePointer: "void *") -> "void":
    return _CadExCore.cadex_free(thePointer)

def cadex_realloc(thePointer: "void *", theSize: "size_t") -> "void *":
    return _CadExCore.cadex_realloc(thePointer, theSize)
class Base_Exception(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theWhat: "Base_UTF16String"):
        _CadExCore.Base_Exception_swiginit(self, _CadExCore.new_Base_Exception(theWhat))
    __swig_destroy__ = _CadExCore.delete_Base_Exception

    def What(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.Base_Exception_What(self)

    def __str__(self) -> "str":
        return self.What().__str__();


# Register Base_Exception in _CadExCore:
_CadExCore.Base_Exception_swigregister(Base_Exception)

class Base_NoAssignment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.Base_NoAssignment_swiginit(self, _CadExCore.new_Base_NoAssignment())
    __swig_destroy__ = _CadExCore.delete_Base_NoAssignment

# Register Base_NoAssignment in _CadExCore:
_CadExCore.Base_NoAssignment_swigregister(Base_NoAssignment)

class Base_NoCopy(Base_NoAssignment):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.Base_NoCopy_swiginit(self, _CadExCore.new_Base_NoCopy())
    __swig_destroy__ = _CadExCore.delete_Base_NoCopy

# Register Base_NoCopy in _CadExCore:
_CadExCore.Base_NoCopy_swigregister(Base_NoCopy)

class LicenseManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ActivateCSharp(theKey: "char const *") -> "bool":
        return _CadExCore.LicenseManager_ActivateCSharp(theKey)

    @staticmethod
    def ActivateJava(theKey: "char const *") -> "bool":
        return _CadExCore.LicenseManager_ActivateJava(theKey)

    @staticmethod
    def ActivatePython(theKey: "char const *") -> "bool":
        return _CadExCore.LicenseManager_ActivatePython(theKey)

    @staticmethod
    def CADExLicense_ActivateRuntimeKeyFromAbsolutePath(theKey: "char const *") -> "bool":
        return _CadExCore.LicenseManager_CADExLicense_ActivateRuntimeKeyFromAbsolutePath(theKey)

    @staticmethod
    def Acquire(theModule: "char const *") -> "void":
        return _CadExCore.LicenseManager_Acquire(theModule)

    @staticmethod
    def Activate(theKey: "char const *") -> "bool":
        return _CadExCore.LicenseManager_Activate(theKey)

    def __init__(self):
        _CadExCore.LicenseManager_swiginit(self, _CadExCore.new_LicenseManager())
    __swig_destroy__ = _CadExCore.delete_LicenseManager

# Register LicenseManager in _CadExCore:
_CadExCore.LicenseManager_swigregister(LicenseManager)

def LicenseManager_ActivateCSharp(theKey: "char const *") -> "bool":
    return _CadExCore.LicenseManager_ActivateCSharp(theKey)

def LicenseManager_ActivateJava(theKey: "char const *") -> "bool":
    return _CadExCore.LicenseManager_ActivateJava(theKey)

def LicenseManager_ActivatePython(theKey: "char const *") -> "bool":
    return _CadExCore.LicenseManager_ActivatePython(theKey)

def LicenseManager_CADExLicense_ActivateRuntimeKeyFromAbsolutePath(theKey: "char const *") -> "bool":
    return _CadExCore.LicenseManager_CADExLicense_ActivateRuntimeKeyFromAbsolutePath(theKey)

def LicenseManager_Acquire(theModule: "char const *") -> "void":
    return _CadExCore.LicenseManager_Acquire(theModule)

def LicenseManager_Activate(theKey: "char const *") -> "bool":
    return _CadExCore.LicenseManager_Activate(theKey)

class LicenseManager_LicenseError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.LicenseManager_LicenseError_swiginit(self, _CadExCore.new_LicenseManager_LicenseError(*args))

    def what(self) -> "char const *":
        return _CadExCore.LicenseManager_LicenseError_what(self)

    def __str__(self) -> "char const *":
        return _CadExCore.LicenseManager_LicenseError___str__(self)
    __swig_destroy__ = _CadExCore.delete_LicenseManager_LicenseError

# Register LicenseManager_LicenseError in _CadExCore:
_CadExCore.LicenseManager_LicenseError_swigregister(LicenseManager_LicenseError)

class ModelData_Color(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Color_swiginit(self, _CadExCore.new_ModelData_Color(*args))

    def R(self) -> "float":
        return _CadExCore.ModelData_Color_R(self)

    def G(self) -> "float":
        return _CadExCore.ModelData_Color_G(self)

    def B(self) -> "float":
        return _CadExCore.ModelData_Color_B(self)

    def A(self) -> "float":
        return _CadExCore.ModelData_Color_A(self)

    def Value(self, theIndex: "size_t") -> "cadex::ModelData_Color::value_type const &":
        return _CadExCore.ModelData_Color_Value(self, theIndex)

    def Access(self, *args) -> "cadex::ModelData_Color::value_type &":
        return _CadExCore.ModelData_Color_Access(self, *args)

    def SetValue(self, *args) -> "void":
        return _CadExCore.ModelData_Color_SetValue(self, *args)

    def Set(self, *args) -> "void":
        return _CadExCore.ModelData_Color_Set(self, *args)

    def IsValid(self) -> "bool":
        return _CadExCore.ModelData_Color_IsValid(self)

    @staticmethod
    def Precision() -> "float":
        return _CadExCore.ModelData_Color_Precision()

    def IsEqual(self, theObj: "ModelData_Color") -> "bool":
        return _CadExCore.ModelData_Color_IsEqual(self, theObj)

    def __hash__(self):
        aHasher = ModelData_ColorHash()
        return int(aHasher(self))


    def __eq__(self, other):
        if id(other) == id(self):
            return True;
        if isinstance(other, ModelData_Color):
            return self.IsEqual(other);
        return False;


    def SetR(self, theR: "float") -> "void":
        return _CadExCore.ModelData_Color_SetR(self, theR)

    def SetG(self, theG: "float") -> "void":
        return _CadExCore.ModelData_Color_SetG(self, theG)

    def SetB(self, theB: "float") -> "void":
        return _CadExCore.ModelData_Color_SetB(self, theB)

    def SetA(self, theA: "float") -> "void":
        return _CadExCore.ModelData_Color_SetA(self, theA)
    __swig_destroy__ = _CadExCore.delete_ModelData_Color

# Register ModelData_Color in _CadExCore:
_CadExCore.ModelData_Color_swigregister(ModelData_Color)

def ModelData_Color_Precision() -> "float":
    return _CadExCore.ModelData_Color_Precision()


def IsLess(theV1: "ModelData_Color", theV2: "ModelData_Color") -> "bool":
    return _CadExCore.IsLess(theV1, theV2)
class ModelData_ColorHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theValue: "ModelData_Color") -> "size_t":
        return _CadExCore.ModelData_ColorHash___call__(self, theValue)

    def __init__(self):
        _CadExCore.ModelData_ColorHash_swiginit(self, _CadExCore.new_ModelData_ColorHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_ColorHash

# Register ModelData_ColorHash in _CadExCore:
_CadExCore.ModelData_ColorHash_swigregister(ModelData_ColorHash)

class ModelData_XYd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_XYd_swiginit(self, _CadExCore.new_ModelData_XYd(*args))

    def IsEqual(self, theOther: "ModelData_XYd", theTolerance: "cadex::internal::ModelData_BaseXY< double >::ValueType") -> "bool":
        return _CadExCore.ModelData_XYd_IsEqual(self, theOther, theTolerance)

    def SetCoord(self, theX: "cadex::internal::ModelData_BaseXY< double >::ValueType", theY: "cadex::internal::ModelData_BaseXY< double >::ValueType") -> "void":
        return _CadExCore.ModelData_XYd_SetCoord(self, theX, theY)

    def Coord(self, theX: "cadex::internal::ModelData_BaseXY< double >::ValueType &", theY: "cadex::internal::ModelData_BaseXY< double >::ValueType &") -> "void":
        return _CadExCore.ModelData_XYd_Coord(self, theX, theY)

    def Access(self, *args) -> "cadex::internal::ModelData_BaseXY< double >::ValueType &":
        return _CadExCore.ModelData_XYd_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BaseXY< double >::ValueType &":
        return _CadExCore.ModelData_XYd_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BaseXY< double >::ValueType &":
        return _CadExCore.ModelData_XYd_Y(self, *args)

    def SquareModulus(self) -> "cadex::internal::ModelData_BaseXY< double >::ValueType":
        return _CadExCore.ModelData_XYd_SquareModulus(self)

    def Modulus(self) -> "cadex::internal::ModelData_BaseXY< double >::ValueType":
        return _CadExCore.ModelData_XYd_Modulus(self)

    def Normalize(self) -> "void":
        return _CadExCore.ModelData_XYd_Normalize(self)

    def Normalized(self) -> "cadex::internal::ModelData_BaseXY< double >":
        return _CadExCore.ModelData_XYd_Normalized(self)

    def Reverse(self) -> "void":
        return _CadExCore.ModelData_XYd_Reverse(self)

    def Reversed(self) -> "cadex::internal::ModelData_BaseXY< double >":
        return _CadExCore.ModelData_XYd_Reversed(self)

    def SetX(self, theX: "double") -> "void":
        return _CadExCore.ModelData_XYd_SetX(self, theX)

    def SetY(self, theY: "double") -> "void":
        return _CadExCore.ModelData_XYd_SetY(self, theY)
    __swig_destroy__ = _CadExCore.delete_ModelData_XYd

# Register ModelData_XYd in _CadExCore:
_CadExCore.ModelData_XYd_swigregister(ModelData_XYd)

class ModelData_XYf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_XYf_swiginit(self, _CadExCore.new_ModelData_XYf(*args))

    def IsEqual(self, theOther: "ModelData_XYf", theTolerance: "cadex::internal::ModelData_BaseXY< float >::ValueType") -> "bool":
        return _CadExCore.ModelData_XYf_IsEqual(self, theOther, theTolerance)

    def SetCoord(self, theX: "cadex::internal::ModelData_BaseXY< float >::ValueType", theY: "cadex::internal::ModelData_BaseXY< float >::ValueType") -> "void":
        return _CadExCore.ModelData_XYf_SetCoord(self, theX, theY)

    def Coord(self, theX: "cadex::internal::ModelData_BaseXY< float >::ValueType &", theY: "cadex::internal::ModelData_BaseXY< float >::ValueType &") -> "void":
        return _CadExCore.ModelData_XYf_Coord(self, theX, theY)

    def Access(self, *args) -> "cadex::internal::ModelData_BaseXY< float >::ValueType &":
        return _CadExCore.ModelData_XYf_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BaseXY< float >::ValueType &":
        return _CadExCore.ModelData_XYf_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BaseXY< float >::ValueType &":
        return _CadExCore.ModelData_XYf_Y(self, *args)

    def SquareModulus(self) -> "cadex::internal::ModelData_BaseXY< float >::ValueType":
        return _CadExCore.ModelData_XYf_SquareModulus(self)

    def Modulus(self) -> "cadex::internal::ModelData_BaseXY< float >::ValueType":
        return _CadExCore.ModelData_XYf_Modulus(self)

    def Normalize(self) -> "void":
        return _CadExCore.ModelData_XYf_Normalize(self)

    def Normalized(self) -> "cadex::internal::ModelData_BaseXY< float >":
        return _CadExCore.ModelData_XYf_Normalized(self)

    def Reverse(self) -> "void":
        return _CadExCore.ModelData_XYf_Reverse(self)

    def Reversed(self) -> "cadex::internal::ModelData_BaseXY< float >":
        return _CadExCore.ModelData_XYf_Reversed(self)

    def SetX(self, theX: "float") -> "void":
        return _CadExCore.ModelData_XYf_SetX(self, theX)

    def SetY(self, theY: "float") -> "void":
        return _CadExCore.ModelData_XYf_SetY(self, theY)
    __swig_destroy__ = _CadExCore.delete_ModelData_XYf

# Register ModelData_XYf in _CadExCore:
_CadExCore.ModelData_XYf_swigregister(ModelData_XYf)

class ModelData_XY(ModelData_XYd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_XY_swiginit(self, _CadExCore.new_ModelData_XY(*args))
    __swig_destroy__ = _CadExCore.delete_ModelData_XY

# Register ModelData_XY in _CadExCore:
_CadExCore.ModelData_XY_swigregister(ModelData_XY)

class ModelData_XYZd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_XYZd_swiginit(self, _CadExCore.new_ModelData_XYZd(*args))

    def IsEqual(self, theOther: "ModelData_XYZd", theTolerance: "cadex::internal::ModelData_BaseXYZ< double >::ValueType") -> "bool":
        return _CadExCore.ModelData_XYZd_IsEqual(self, theOther, theTolerance)

    def SetCoord(self, theX: "cadex::internal::ModelData_BaseXYZ< double >::ValueType", theY: "cadex::internal::ModelData_BaseXYZ< double >::ValueType", theZ: "cadex::internal::ModelData_BaseXYZ< double >::ValueType") -> "void":
        return _CadExCore.ModelData_XYZd_SetCoord(self, theX, theY, theZ)

    def Coord(self, theX: "cadex::internal::ModelData_BaseXYZ< double >::ValueType &", theY: "cadex::internal::ModelData_BaseXYZ< double >::ValueType &", theZ: "cadex::internal::ModelData_BaseXYZ< double >::ValueType &") -> "void":
        return _CadExCore.ModelData_XYZd_Coord(self, theX, theY, theZ)

    def Access(self, *args) -> "cadex::internal::ModelData_BaseXYZ< double >::ValueType &":
        return _CadExCore.ModelData_XYZd_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BaseXYZ< double >::ValueType &":
        return _CadExCore.ModelData_XYZd_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BaseXYZ< double >::ValueType &":
        return _CadExCore.ModelData_XYZd_Y(self, *args)

    def Z(self, *args) -> "cadex::internal::ModelData_BaseXYZ< double >::ValueType &":
        return _CadExCore.ModelData_XYZd_Z(self, *args)

    def SquareModulus(self) -> "cadex::internal::ModelData_BaseXYZ< double >::ValueType":
        return _CadExCore.ModelData_XYZd_SquareModulus(self)

    def Modulus(self) -> "cadex::internal::ModelData_BaseXYZ< double >::ValueType":
        return _CadExCore.ModelData_XYZd_Modulus(self)

    def Normalize(self) -> "void":
        return _CadExCore.ModelData_XYZd_Normalize(self)

    def Normalized(self) -> "cadex::internal::ModelData_BaseXYZ< double >":
        return _CadExCore.ModelData_XYZd_Normalized(self)

    def Reverse(self) -> "void":
        return _CadExCore.ModelData_XYZd_Reverse(self)

    def Reversed(self) -> "cadex::internal::ModelData_BaseXYZ< double >":
        return _CadExCore.ModelData_XYZd_Reversed(self)

    def Add(self, theOther: "ModelData_XYZd") -> "void":
        return _CadExCore.ModelData_XYZd_Add(self, theOther)

    def Added(self, theOther: "ModelData_XYZd") -> "cadex::internal::ModelData_BaseXYZ< double >":
        return _CadExCore.ModelData_XYZd_Added(self, theOther)

    def Subtract(self, theOther: "ModelData_XYZd") -> "void":
        return _CadExCore.ModelData_XYZd_Subtract(self, theOther)

    def Subtracted(self, theOther: "ModelData_XYZd") -> "cadex::internal::ModelData_BaseXYZ< double >":
        return _CadExCore.ModelData_XYZd_Subtracted(self, theOther)

    def Multiply(self, theValue: "cadex::internal::ModelData_BaseXYZ< double >::ValueType") -> "void":
        return _CadExCore.ModelData_XYZd_Multiply(self, theValue)

    def Multiplied(self, theValue: "cadex::internal::ModelData_BaseXYZ< double >::ValueType") -> "cadex::internal::ModelData_BaseXYZ< double >":
        return _CadExCore.ModelData_XYZd_Multiplied(self, theValue)

    def Divide(self, theValue: "cadex::internal::ModelData_BaseXYZ< double >::ValueType") -> "void":
        return _CadExCore.ModelData_XYZd_Divide(self, theValue)

    def Divided(self, theValue: "cadex::internal::ModelData_BaseXYZ< double >::ValueType") -> "cadex::internal::ModelData_BaseXYZ< double >":
        return _CadExCore.ModelData_XYZd_Divided(self, theValue)

    def __neg__(self) -> "cadex::internal::ModelData_BaseXYZ< double >":
        return _CadExCore.ModelData_XYZd___neg__(self)

    def Dot(self, theOther: "ModelData_XYZd") -> "cadex::internal::ModelData_BaseXYZ< double >::ValueType":
        return _CadExCore.ModelData_XYZd_Dot(self, theOther)

    def Cross(self, theOther: "ModelData_XYZd") -> "void":
        return _CadExCore.ModelData_XYZd_Cross(self, theOther)

    def Crossed(self, theOther: "ModelData_XYZd") -> "cadex::internal::ModelData_BaseXYZ< double >":
        return _CadExCore.ModelData_XYZd_Crossed(self, theOther)

    def SetX(self, theX: "double") -> "void":
        return _CadExCore.ModelData_XYZd_SetX(self, theX)

    def SetY(self, theY: "double") -> "void":
        return _CadExCore.ModelData_XYZd_SetY(self, theY)

    def SetZ(self, theZ: "double") -> "void":
        return _CadExCore.ModelData_XYZd_SetZ(self, theZ)
    __swig_destroy__ = _CadExCore.delete_ModelData_XYZd

# Register ModelData_XYZd in _CadExCore:
_CadExCore.ModelData_XYZd_swigregister(ModelData_XYZd)

class ModelData_XYZf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_XYZf_swiginit(self, _CadExCore.new_ModelData_XYZf(*args))

    def IsEqual(self, theOther: "ModelData_XYZf", theTolerance: "cadex::internal::ModelData_BaseXYZ< float >::ValueType") -> "bool":
        return _CadExCore.ModelData_XYZf_IsEqual(self, theOther, theTolerance)

    def SetCoord(self, theX: "cadex::internal::ModelData_BaseXYZ< float >::ValueType", theY: "cadex::internal::ModelData_BaseXYZ< float >::ValueType", theZ: "cadex::internal::ModelData_BaseXYZ< float >::ValueType") -> "void":
        return _CadExCore.ModelData_XYZf_SetCoord(self, theX, theY, theZ)

    def Coord(self, theX: "cadex::internal::ModelData_BaseXYZ< float >::ValueType &", theY: "cadex::internal::ModelData_BaseXYZ< float >::ValueType &", theZ: "cadex::internal::ModelData_BaseXYZ< float >::ValueType &") -> "void":
        return _CadExCore.ModelData_XYZf_Coord(self, theX, theY, theZ)

    def Access(self, *args) -> "cadex::internal::ModelData_BaseXYZ< float >::ValueType &":
        return _CadExCore.ModelData_XYZf_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BaseXYZ< float >::ValueType &":
        return _CadExCore.ModelData_XYZf_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BaseXYZ< float >::ValueType &":
        return _CadExCore.ModelData_XYZf_Y(self, *args)

    def Z(self, *args) -> "cadex::internal::ModelData_BaseXYZ< float >::ValueType &":
        return _CadExCore.ModelData_XYZf_Z(self, *args)

    def SquareModulus(self) -> "cadex::internal::ModelData_BaseXYZ< float >::ValueType":
        return _CadExCore.ModelData_XYZf_SquareModulus(self)

    def Modulus(self) -> "cadex::internal::ModelData_BaseXYZ< float >::ValueType":
        return _CadExCore.ModelData_XYZf_Modulus(self)

    def Normalize(self) -> "void":
        return _CadExCore.ModelData_XYZf_Normalize(self)

    def Normalized(self) -> "cadex::internal::ModelData_BaseXYZ< float >":
        return _CadExCore.ModelData_XYZf_Normalized(self)

    def Reverse(self) -> "void":
        return _CadExCore.ModelData_XYZf_Reverse(self)

    def Reversed(self) -> "cadex::internal::ModelData_BaseXYZ< float >":
        return _CadExCore.ModelData_XYZf_Reversed(self)

    def Add(self, theOther: "ModelData_XYZf") -> "void":
        return _CadExCore.ModelData_XYZf_Add(self, theOther)

    def Added(self, theOther: "ModelData_XYZf") -> "cadex::internal::ModelData_BaseXYZ< float >":
        return _CadExCore.ModelData_XYZf_Added(self, theOther)

    def Subtract(self, theOther: "ModelData_XYZf") -> "void":
        return _CadExCore.ModelData_XYZf_Subtract(self, theOther)

    def Subtracted(self, theOther: "ModelData_XYZf") -> "cadex::internal::ModelData_BaseXYZ< float >":
        return _CadExCore.ModelData_XYZf_Subtracted(self, theOther)

    def Multiply(self, theValue: "cadex::internal::ModelData_BaseXYZ< float >::ValueType") -> "void":
        return _CadExCore.ModelData_XYZf_Multiply(self, theValue)

    def Multiplied(self, theValue: "cadex::internal::ModelData_BaseXYZ< float >::ValueType") -> "cadex::internal::ModelData_BaseXYZ< float >":
        return _CadExCore.ModelData_XYZf_Multiplied(self, theValue)

    def Divide(self, theValue: "cadex::internal::ModelData_BaseXYZ< float >::ValueType") -> "void":
        return _CadExCore.ModelData_XYZf_Divide(self, theValue)

    def Divided(self, theValue: "cadex::internal::ModelData_BaseXYZ< float >::ValueType") -> "cadex::internal::ModelData_BaseXYZ< float >":
        return _CadExCore.ModelData_XYZf_Divided(self, theValue)

    def __neg__(self) -> "cadex::internal::ModelData_BaseXYZ< float >":
        return _CadExCore.ModelData_XYZf___neg__(self)

    def Dot(self, theOther: "ModelData_XYZf") -> "cadex::internal::ModelData_BaseXYZ< float >::ValueType":
        return _CadExCore.ModelData_XYZf_Dot(self, theOther)

    def Cross(self, theOther: "ModelData_XYZf") -> "void":
        return _CadExCore.ModelData_XYZf_Cross(self, theOther)

    def Crossed(self, theOther: "ModelData_XYZf") -> "cadex::internal::ModelData_BaseXYZ< float >":
        return _CadExCore.ModelData_XYZf_Crossed(self, theOther)

    def SetX(self, theX: "float") -> "void":
        return _CadExCore.ModelData_XYZf_SetX(self, theX)

    def SetY(self, theY: "float") -> "void":
        return _CadExCore.ModelData_XYZf_SetY(self, theY)

    def SetZ(self, theZ: "float") -> "void":
        return _CadExCore.ModelData_XYZf_SetZ(self, theZ)
    __swig_destroy__ = _CadExCore.delete_ModelData_XYZf

# Register ModelData_XYZf in _CadExCore:
_CadExCore.ModelData_XYZf_swigregister(ModelData_XYZf)

class ModelData_XYZ(ModelData_XYZd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_XYZ_swiginit(self, _CadExCore.new_ModelData_XYZ(*args))
    __swig_destroy__ = _CadExCore.delete_ModelData_XYZ

# Register ModelData_XYZ in _CadExCore:
_CadExCore.ModelData_XYZ_swigregister(ModelData_XYZ)

class ModelData_Pointd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Pointd_swiginit(self, _CadExCore.new_ModelData_Pointd(*args))

    def Access(self, *args) -> "cadex::internal::ModelData_BasePoint< double >::ValueType &":
        return _CadExCore.ModelData_Pointd_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BasePoint< double >::ValueType &":
        return _CadExCore.ModelData_Pointd_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BasePoint< double >::ValueType &":
        return _CadExCore.ModelData_Pointd_Y(self, *args)

    def Z(self, *args) -> "cadex::internal::ModelData_BasePoint< double >::ValueType &":
        return _CadExCore.ModelData_Pointd_Z(self, *args)

    def SetCoord(self, theX: "cadex::internal::ModelData_BasePoint< double >::ValueType", theY: "cadex::internal::ModelData_BasePoint< double >::ValueType", theZ: "cadex::internal::ModelData_BasePoint< double >::ValueType") -> "void":
        return _CadExCore.ModelData_Pointd_SetCoord(self, theX, theY, theZ)

    def IsEqual(self, theOther: "ModelData_Pointd", theTolerance: "cadex::internal::ModelData_BasePoint< double >::ValueType") -> "bool":
        return _CadExCore.ModelData_Pointd_IsEqual(self, theOther, theTolerance)

    def Distance(self, theOther: "ModelData_Pointd") -> "cadex::internal::ModelData_BasePoint< double >::ValueType":
        return _CadExCore.ModelData_Pointd_Distance(self, theOther)

    def SquareDistance(self, theOther: "ModelData_Pointd") -> "cadex::internal::ModelData_BasePoint< double >::ValueType":
        return _CadExCore.ModelData_Pointd_SquareDistance(self, theOther)

    def Transform(self, theTransformation: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Pointd_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation") -> "cadex::internal::ModelData_BasePoint< double >":
        return _CadExCore.ModelData_Pointd_Transformed(self, theTransformation)

    def Mirror(self, *args) -> "void":
        return _CadExCore.ModelData_Pointd_Mirror(self, *args)

    def Rotate(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "void":
        return _CadExCore.ModelData_Pointd_Rotate(self, theAxis, theAngle)

    def Rotated(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "cadex::internal::ModelData_BasePoint< double >":
        return _CadExCore.ModelData_Pointd_Rotated(self, theAxis, theAngle)

    def Translate(self, theVector: "ModelData_Vectord") -> "void":
        return _CadExCore.ModelData_Pointd_Translate(self, theVector)

    def Translated(self, theVector: "ModelData_Vectord") -> "cadex::internal::ModelData_BasePoint< double >":
        return _CadExCore.ModelData_Pointd_Translated(self, theVector)

    def Scale(self, thePoint: "ModelData_Pointd", theScale: "double") -> "void":
        return _CadExCore.ModelData_Pointd_Scale(self, thePoint, theScale)

    def Scaled(self, thePoint: "ModelData_Pointd", theScale: "double") -> "cadex::internal::ModelData_BasePoint< double >":
        return _CadExCore.ModelData_Pointd_Scaled(self, thePoint, theScale)

    def SetX(self, theX: "double") -> "void":
        return _CadExCore.ModelData_Pointd_SetX(self, theX)

    def SetY(self, theY: "double") -> "void":
        return _CadExCore.ModelData_Pointd_SetY(self, theY)

    def SetZ(self, theZ: "double") -> "void":
        return _CadExCore.ModelData_Pointd_SetZ(self, theZ)
    __swig_destroy__ = _CadExCore.delete_ModelData_Pointd

# Register ModelData_Pointd in _CadExCore:
_CadExCore.ModelData_Pointd_swigregister(ModelData_Pointd)

class ModelData_Pointf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Pointf_swiginit(self, _CadExCore.new_ModelData_Pointf(*args))

    def Access(self, *args) -> "cadex::internal::ModelData_BasePoint< float >::ValueType &":
        return _CadExCore.ModelData_Pointf_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BasePoint< float >::ValueType &":
        return _CadExCore.ModelData_Pointf_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BasePoint< float >::ValueType &":
        return _CadExCore.ModelData_Pointf_Y(self, *args)

    def Z(self, *args) -> "cadex::internal::ModelData_BasePoint< float >::ValueType &":
        return _CadExCore.ModelData_Pointf_Z(self, *args)

    def SetCoord(self, theX: "cadex::internal::ModelData_BasePoint< float >::ValueType", theY: "cadex::internal::ModelData_BasePoint< float >::ValueType", theZ: "cadex::internal::ModelData_BasePoint< float >::ValueType") -> "void":
        return _CadExCore.ModelData_Pointf_SetCoord(self, theX, theY, theZ)

    def IsEqual(self, theOther: "ModelData_Pointf", theTolerance: "cadex::internal::ModelData_BasePoint< float >::ValueType") -> "bool":
        return _CadExCore.ModelData_Pointf_IsEqual(self, theOther, theTolerance)

    def Distance(self, theOther: "ModelData_Pointf") -> "cadex::internal::ModelData_BasePoint< float >::ValueType":
        return _CadExCore.ModelData_Pointf_Distance(self, theOther)

    def SquareDistance(self, theOther: "ModelData_Pointf") -> "cadex::internal::ModelData_BasePoint< float >::ValueType":
        return _CadExCore.ModelData_Pointf_SquareDistance(self, theOther)

    def Transform(self, theTransformation: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Pointf_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation") -> "cadex::internal::ModelData_BasePoint< float >":
        return _CadExCore.ModelData_Pointf_Transformed(self, theTransformation)

    def Mirror(self, *args) -> "void":
        return _CadExCore.ModelData_Pointf_Mirror(self, *args)

    def Rotate(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "void":
        return _CadExCore.ModelData_Pointf_Rotate(self, theAxis, theAngle)

    def Rotated(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "cadex::internal::ModelData_BasePoint< float >":
        return _CadExCore.ModelData_Pointf_Rotated(self, theAxis, theAngle)

    def Translate(self, theVector: "ModelData_Vectorf") -> "void":
        return _CadExCore.ModelData_Pointf_Translate(self, theVector)

    def Translated(self, theVector: "ModelData_Vectorf") -> "cadex::internal::ModelData_BasePoint< float >":
        return _CadExCore.ModelData_Pointf_Translated(self, theVector)

    def Scale(self, thePoint: "ModelData_Pointf", theScale: "double") -> "void":
        return _CadExCore.ModelData_Pointf_Scale(self, thePoint, theScale)

    def Scaled(self, thePoint: "ModelData_Pointf", theScale: "double") -> "cadex::internal::ModelData_BasePoint< float >":
        return _CadExCore.ModelData_Pointf_Scaled(self, thePoint, theScale)

    def SetX(self, theX: "float") -> "void":
        return _CadExCore.ModelData_Pointf_SetX(self, theX)

    def SetY(self, theY: "float") -> "void":
        return _CadExCore.ModelData_Pointf_SetY(self, theY)

    def SetZ(self, theZ: "float") -> "void":
        return _CadExCore.ModelData_Pointf_SetZ(self, theZ)
    __swig_destroy__ = _CadExCore.delete_ModelData_Pointf

# Register ModelData_Pointf in _CadExCore:
_CadExCore.ModelData_Pointf_swigregister(ModelData_Pointf)

class ModelData_Point(ModelData_Pointd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Point_swiginit(self, _CadExCore.new_ModelData_Point(*args))

    @staticmethod
    def Origin() -> "cadex::ModelData_Point const &":
        return _CadExCore.ModelData_Point_Origin()

    def Transform(self, theTransformation: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Point_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation") -> "cadex::ModelData_Point":
        return _CadExCore.ModelData_Point_Transformed(self, theTransformation)
    __swig_destroy__ = _CadExCore.delete_ModelData_Point

# Register ModelData_Point in _CadExCore:
_CadExCore.ModelData_Point_swigregister(ModelData_Point)

def ModelData_Point_Origin() -> "cadex::ModelData_Point const &":
    return _CadExCore.ModelData_Point_Origin()

class ModelData_Point2dd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Point2dd_swiginit(self, _CadExCore.new_ModelData_Point2dd(*args))

    def Access(self, *args) -> "cadex::internal::ModelData_BasePoint2d< double >::ValueType &":
        return _CadExCore.ModelData_Point2dd_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BasePoint2d< double >::ValueType &":
        return _CadExCore.ModelData_Point2dd_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BasePoint2d< double >::ValueType &":
        return _CadExCore.ModelData_Point2dd_Y(self, *args)

    def SetCoord(self, theX: "cadex::internal::ModelData_BasePoint2d< double >::ValueType", theY: "cadex::internal::ModelData_BasePoint2d< double >::ValueType") -> "void":
        return _CadExCore.ModelData_Point2dd_SetCoord(self, theX, theY)

    def IsEqual(self, theOther: "ModelData_Point2dd", theTolerance: "cadex::internal::ModelData_BasePoint2d< double >::ValueType") -> "bool":
        return _CadExCore.ModelData_Point2dd_IsEqual(self, theOther, theTolerance)

    def SetX(self, theX: "double") -> "void":
        return _CadExCore.ModelData_Point2dd_SetX(self, theX)

    def SetY(self, theY: "double") -> "void":
        return _CadExCore.ModelData_Point2dd_SetY(self, theY)
    __swig_destroy__ = _CadExCore.delete_ModelData_Point2dd

# Register ModelData_Point2dd in _CadExCore:
_CadExCore.ModelData_Point2dd_swigregister(ModelData_Point2dd)

class ModelData_Point2df(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Point2df_swiginit(self, _CadExCore.new_ModelData_Point2df(*args))

    def Access(self, *args) -> "cadex::internal::ModelData_BasePoint2d< float >::ValueType &":
        return _CadExCore.ModelData_Point2df_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BasePoint2d< float >::ValueType &":
        return _CadExCore.ModelData_Point2df_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BasePoint2d< float >::ValueType &":
        return _CadExCore.ModelData_Point2df_Y(self, *args)

    def SetCoord(self, theX: "cadex::internal::ModelData_BasePoint2d< float >::ValueType", theY: "cadex::internal::ModelData_BasePoint2d< float >::ValueType") -> "void":
        return _CadExCore.ModelData_Point2df_SetCoord(self, theX, theY)

    def IsEqual(self, theOther: "ModelData_Point2df", theTolerance: "cadex::internal::ModelData_BasePoint2d< float >::ValueType") -> "bool":
        return _CadExCore.ModelData_Point2df_IsEqual(self, theOther, theTolerance)

    def SetX(self, theX: "float") -> "void":
        return _CadExCore.ModelData_Point2df_SetX(self, theX)

    def SetY(self, theY: "float") -> "void":
        return _CadExCore.ModelData_Point2df_SetY(self, theY)
    __swig_destroy__ = _CadExCore.delete_ModelData_Point2df

# Register ModelData_Point2df in _CadExCore:
_CadExCore.ModelData_Point2df_swigregister(ModelData_Point2df)

class ModelData_Point2d(ModelData_Point2dd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Point2d_swiginit(self, _CadExCore.new_ModelData_Point2d(*args))

    @staticmethod
    def Origin() -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_Point2d_Origin()

    def Transform(self, theTransformation: "ModelData_Transformation2d") -> "void":
        return _CadExCore.ModelData_Point2d_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation2d") -> "cadex::ModelData_Point2d":
        return _CadExCore.ModelData_Point2d_Transformed(self, theTransformation)
    __swig_destroy__ = _CadExCore.delete_ModelData_Point2d

# Register ModelData_Point2d in _CadExCore:
_CadExCore.ModelData_Point2d_swigregister(ModelData_Point2d)

def ModelData_Point2d_Origin() -> "cadex::ModelData_Point2d const &":
    return _CadExCore.ModelData_Point2d_Origin()

class ModelData_Vectord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Vectord_swiginit(self, _CadExCore.new_ModelData_Vectord(*args))

    def Access(self, *args) -> "cadex::internal::ModelData_BaseVector< double >::ValueType &":
        return _CadExCore.ModelData_Vectord_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BaseVector< double >::ValueType &":
        return _CadExCore.ModelData_Vectord_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BaseVector< double >::ValueType &":
        return _CadExCore.ModelData_Vectord_Y(self, *args)

    def Z(self, *args) -> "cadex::internal::ModelData_BaseVector< double >::ValueType &":
        return _CadExCore.ModelData_Vectord_Z(self, *args)

    def SetCoord(self, theX: "cadex::internal::ModelData_BaseVector< double >::ValueType", theY: "cadex::internal::ModelData_BaseVector< double >::ValueType", theZ: "cadex::internal::ModelData_BaseVector< double >::ValueType") -> "void":
        return _CadExCore.ModelData_Vectord_SetCoord(self, theX, theY, theZ)

    def SquareModulus(self) -> "cadex::internal::ModelData_BaseVector< double >::ValueType":
        return _CadExCore.ModelData_Vectord_SquareModulus(self)

    def Modulus(self) -> "cadex::internal::ModelData_BaseVector< double >::ValueType":
        return _CadExCore.ModelData_Vectord_Modulus(self)

    def Normalize(self) -> "void":
        return _CadExCore.ModelData_Vectord_Normalize(self)

    def Normalized(self) -> "cadex::internal::ModelData_BaseVector< double >":
        return _CadExCore.ModelData_Vectord_Normalized(self)

    def IsParallel(self, theOther: "ModelData_Vectord", theTolerance: "cadex::internal::ModelData_BaseVector< double >::ValueType") -> "bool":
        return _CadExCore.ModelData_Vectord_IsParallel(self, theOther, theTolerance)

    def IsEqual(self, theOther: "ModelData_Vectord", theTolerance: "cadex::internal::ModelData_BaseVector< double >::ValueType") -> "bool":
        return _CadExCore.ModelData_Vectord_IsEqual(self, theOther, theTolerance)

    def Reverse(self) -> "void":
        return _CadExCore.ModelData_Vectord_Reverse(self)

    def Reversed(self) -> "cadex::internal::ModelData_BaseVector< double >":
        return _CadExCore.ModelData_Vectord_Reversed(self)

    def Add(self, theOther: "ModelData_Vectord") -> "void":
        return _CadExCore.ModelData_Vectord_Add(self, theOther)

    def Added(self, theOther: "ModelData_Vectord") -> "cadex::internal::ModelData_BaseVector< double >":
        return _CadExCore.ModelData_Vectord_Added(self, theOther)

    def Subtract(self, theOther: "ModelData_Vectord") -> "void":
        return _CadExCore.ModelData_Vectord_Subtract(self, theOther)

    def Subtracted(self, theOther: "ModelData_Vectord") -> "cadex::internal::ModelData_BaseVector< double >":
        return _CadExCore.ModelData_Vectord_Subtracted(self, theOther)

    def Multiply(self, theValue: "cadex::internal::ModelData_BaseVector< double >::ValueType") -> "void":
        return _CadExCore.ModelData_Vectord_Multiply(self, theValue)

    def Multiplied(self, theValue: "cadex::internal::ModelData_BaseVector< double >::ValueType") -> "cadex::internal::ModelData_BaseVector< double >":
        return _CadExCore.ModelData_Vectord_Multiplied(self, theValue)

    def Divide(self, theValue: "cadex::internal::ModelData_BaseVector< double >::ValueType") -> "void":
        return _CadExCore.ModelData_Vectord_Divide(self, theValue)

    def Divided(self, theValue: "cadex::internal::ModelData_BaseVector< double >::ValueType") -> "cadex::internal::ModelData_BaseVector< double >":
        return _CadExCore.ModelData_Vectord_Divided(self, theValue)

    def __neg__(self) -> "cadex::internal::ModelData_BaseVector< double >":
        return _CadExCore.ModelData_Vectord___neg__(self)

    def Dot(self, theOther: "ModelData_Vectord") -> "cadex::internal::ModelData_BaseVector< double >::ValueType":
        return _CadExCore.ModelData_Vectord_Dot(self, theOther)

    def Cross(self, theOther: "ModelData_Vectord") -> "void":
        return _CadExCore.ModelData_Vectord_Cross(self, theOther)

    def Crossed(self, theOther: "ModelData_Vectord") -> "cadex::internal::ModelData_BaseVector< double >":
        return _CadExCore.ModelData_Vectord_Crossed(self, theOther)

    def Transform(self, theTransformation: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Vectord_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation") -> "cadex::internal::ModelData_BaseVector< double >":
        return _CadExCore.ModelData_Vectord_Transformed(self, theTransformation)

    def Mirror(self, *args) -> "void":
        return _CadExCore.ModelData_Vectord_Mirror(self, *args)

    def Rotate(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "void":
        return _CadExCore.ModelData_Vectord_Rotate(self, theAxis, theAngle)

    def Rotated(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "cadex::internal::ModelData_BaseVector< double >":
        return _CadExCore.ModelData_Vectord_Rotated(self, theAxis, theAngle)

    def SetX(self, theX: "double") -> "void":
        return _CadExCore.ModelData_Vectord_SetX(self, theX)

    def SetY(self, theY: "double") -> "void":
        return _CadExCore.ModelData_Vectord_SetY(self, theY)

    def SetZ(self, theZ: "double") -> "void":
        return _CadExCore.ModelData_Vectord_SetZ(self, theZ)
    __swig_destroy__ = _CadExCore.delete_ModelData_Vectord

# Register ModelData_Vectord in _CadExCore:
_CadExCore.ModelData_Vectord_swigregister(ModelData_Vectord)

class ModelData_Vectorf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Vectorf_swiginit(self, _CadExCore.new_ModelData_Vectorf(*args))

    def Access(self, *args) -> "cadex::internal::ModelData_BaseVector< float >::ValueType &":
        return _CadExCore.ModelData_Vectorf_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BaseVector< float >::ValueType &":
        return _CadExCore.ModelData_Vectorf_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BaseVector< float >::ValueType &":
        return _CadExCore.ModelData_Vectorf_Y(self, *args)

    def Z(self, *args) -> "cadex::internal::ModelData_BaseVector< float >::ValueType &":
        return _CadExCore.ModelData_Vectorf_Z(self, *args)

    def SetCoord(self, theX: "cadex::internal::ModelData_BaseVector< float >::ValueType", theY: "cadex::internal::ModelData_BaseVector< float >::ValueType", theZ: "cadex::internal::ModelData_BaseVector< float >::ValueType") -> "void":
        return _CadExCore.ModelData_Vectorf_SetCoord(self, theX, theY, theZ)

    def SquareModulus(self) -> "cadex::internal::ModelData_BaseVector< float >::ValueType":
        return _CadExCore.ModelData_Vectorf_SquareModulus(self)

    def Modulus(self) -> "cadex::internal::ModelData_BaseVector< float >::ValueType":
        return _CadExCore.ModelData_Vectorf_Modulus(self)

    def Normalize(self) -> "void":
        return _CadExCore.ModelData_Vectorf_Normalize(self)

    def Normalized(self) -> "cadex::internal::ModelData_BaseVector< float >":
        return _CadExCore.ModelData_Vectorf_Normalized(self)

    def IsParallel(self, theOther: "ModelData_Vectorf", theTolerance: "cadex::internal::ModelData_BaseVector< float >::ValueType") -> "bool":
        return _CadExCore.ModelData_Vectorf_IsParallel(self, theOther, theTolerance)

    def IsEqual(self, theOther: "ModelData_Vectorf", theTolerance: "cadex::internal::ModelData_BaseVector< float >::ValueType") -> "bool":
        return _CadExCore.ModelData_Vectorf_IsEqual(self, theOther, theTolerance)

    def Reverse(self) -> "void":
        return _CadExCore.ModelData_Vectorf_Reverse(self)

    def Reversed(self) -> "cadex::internal::ModelData_BaseVector< float >":
        return _CadExCore.ModelData_Vectorf_Reversed(self)

    def Add(self, theOther: "ModelData_Vectorf") -> "void":
        return _CadExCore.ModelData_Vectorf_Add(self, theOther)

    def Added(self, theOther: "ModelData_Vectorf") -> "cadex::internal::ModelData_BaseVector< float >":
        return _CadExCore.ModelData_Vectorf_Added(self, theOther)

    def Subtract(self, theOther: "ModelData_Vectorf") -> "void":
        return _CadExCore.ModelData_Vectorf_Subtract(self, theOther)

    def Subtracted(self, theOther: "ModelData_Vectorf") -> "cadex::internal::ModelData_BaseVector< float >":
        return _CadExCore.ModelData_Vectorf_Subtracted(self, theOther)

    def Multiply(self, theValue: "cadex::internal::ModelData_BaseVector< float >::ValueType") -> "void":
        return _CadExCore.ModelData_Vectorf_Multiply(self, theValue)

    def Multiplied(self, theValue: "cadex::internal::ModelData_BaseVector< float >::ValueType") -> "cadex::internal::ModelData_BaseVector< float >":
        return _CadExCore.ModelData_Vectorf_Multiplied(self, theValue)

    def Divide(self, theValue: "cadex::internal::ModelData_BaseVector< float >::ValueType") -> "void":
        return _CadExCore.ModelData_Vectorf_Divide(self, theValue)

    def Divided(self, theValue: "cadex::internal::ModelData_BaseVector< float >::ValueType") -> "cadex::internal::ModelData_BaseVector< float >":
        return _CadExCore.ModelData_Vectorf_Divided(self, theValue)

    def __neg__(self) -> "cadex::internal::ModelData_BaseVector< float >":
        return _CadExCore.ModelData_Vectorf___neg__(self)

    def Dot(self, theOther: "ModelData_Vectorf") -> "cadex::internal::ModelData_BaseVector< float >::ValueType":
        return _CadExCore.ModelData_Vectorf_Dot(self, theOther)

    def Cross(self, theOther: "ModelData_Vectorf") -> "void":
        return _CadExCore.ModelData_Vectorf_Cross(self, theOther)

    def Crossed(self, theOther: "ModelData_Vectorf") -> "cadex::internal::ModelData_BaseVector< float >":
        return _CadExCore.ModelData_Vectorf_Crossed(self, theOther)

    def Transform(self, theTransformation: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Vectorf_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation") -> "cadex::internal::ModelData_BaseVector< float >":
        return _CadExCore.ModelData_Vectorf_Transformed(self, theTransformation)

    def Mirror(self, *args) -> "void":
        return _CadExCore.ModelData_Vectorf_Mirror(self, *args)

    def Rotate(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "void":
        return _CadExCore.ModelData_Vectorf_Rotate(self, theAxis, theAngle)

    def Rotated(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "cadex::internal::ModelData_BaseVector< float >":
        return _CadExCore.ModelData_Vectorf_Rotated(self, theAxis, theAngle)

    def SetX(self, theX: "float") -> "void":
        return _CadExCore.ModelData_Vectorf_SetX(self, theX)

    def SetY(self, theY: "float") -> "void":
        return _CadExCore.ModelData_Vectorf_SetY(self, theY)

    def SetZ(self, theZ: "float") -> "void":
        return _CadExCore.ModelData_Vectorf_SetZ(self, theZ)
    __swig_destroy__ = _CadExCore.delete_ModelData_Vectorf

# Register ModelData_Vectorf in _CadExCore:
_CadExCore.ModelData_Vectorf_swigregister(ModelData_Vectorf)

class ModelData_Vector(ModelData_Vectord):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Vector_swiginit(self, _CadExCore.new_ModelData_Vector(*args))

    def Transform(self, theTransformation: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Vector_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation") -> "cadex::ModelData_Vector":
        return _CadExCore.ModelData_Vector_Transformed(self, theTransformation)
    __swig_destroy__ = _CadExCore.delete_ModelData_Vector

# Register ModelData_Vector in _CadExCore:
_CadExCore.ModelData_Vector_swigregister(ModelData_Vector)

class ModelData_Vectord2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Vectord2d_swiginit(self, _CadExCore.new_ModelData_Vectord2d(*args))

    def Access(self, *args) -> "cadex::internal::ModelData_BaseVector2d< double >::ValueType &":
        return _CadExCore.ModelData_Vectord2d_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BaseVector2d< double >::ValueType &":
        return _CadExCore.ModelData_Vectord2d_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BaseVector2d< double >::ValueType &":
        return _CadExCore.ModelData_Vectord2d_Y(self, *args)

    def SquareModulus(self) -> "cadex::internal::ModelData_BaseVector2d< double >::ValueType":
        return _CadExCore.ModelData_Vectord2d_SquareModulus(self)

    def Modulus(self) -> "cadex::internal::ModelData_BaseVector2d< double >::ValueType":
        return _CadExCore.ModelData_Vectord2d_Modulus(self)

    def IsParallel(self, theOther: "ModelData_Vectord2d", theTolerance: "cadex::internal::ModelData_BaseVector2d< double >::ValueType") -> "bool":
        return _CadExCore.ModelData_Vectord2d_IsParallel(self, theOther, theTolerance)

    def IsEqual(self, theOther: "ModelData_Vectord2d", theTolerance: "cadex::internal::ModelData_BaseVector2d< double >::ValueType") -> "bool":
        return _CadExCore.ModelData_Vectord2d_IsEqual(self, theOther, theTolerance)

    def SetX(self, theX: "double") -> "void":
        return _CadExCore.ModelData_Vectord2d_SetX(self, theX)

    def SetY(self, theY: "double") -> "void":
        return _CadExCore.ModelData_Vectord2d_SetY(self, theY)
    __swig_destroy__ = _CadExCore.delete_ModelData_Vectord2d

# Register ModelData_Vectord2d in _CadExCore:
_CadExCore.ModelData_Vectord2d_swigregister(ModelData_Vectord2d)

class ModelData_Vectorf2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Vectorf2d_swiginit(self, _CadExCore.new_ModelData_Vectorf2d(*args))

    def Access(self, *args) -> "cadex::internal::ModelData_BaseVector2d< float >::ValueType &":
        return _CadExCore.ModelData_Vectorf2d_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BaseVector2d< float >::ValueType &":
        return _CadExCore.ModelData_Vectorf2d_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BaseVector2d< float >::ValueType &":
        return _CadExCore.ModelData_Vectorf2d_Y(self, *args)

    def SquareModulus(self) -> "cadex::internal::ModelData_BaseVector2d< float >::ValueType":
        return _CadExCore.ModelData_Vectorf2d_SquareModulus(self)

    def Modulus(self) -> "cadex::internal::ModelData_BaseVector2d< float >::ValueType":
        return _CadExCore.ModelData_Vectorf2d_Modulus(self)

    def IsParallel(self, theOther: "ModelData_Vectorf2d", theTolerance: "cadex::internal::ModelData_BaseVector2d< float >::ValueType") -> "bool":
        return _CadExCore.ModelData_Vectorf2d_IsParallel(self, theOther, theTolerance)

    def IsEqual(self, theOther: "ModelData_Vectorf2d", theTolerance: "cadex::internal::ModelData_BaseVector2d< float >::ValueType") -> "bool":
        return _CadExCore.ModelData_Vectorf2d_IsEqual(self, theOther, theTolerance)

    def SetX(self, theX: "float") -> "void":
        return _CadExCore.ModelData_Vectorf2d_SetX(self, theX)

    def SetY(self, theY: "float") -> "void":
        return _CadExCore.ModelData_Vectorf2d_SetY(self, theY)
    __swig_destroy__ = _CadExCore.delete_ModelData_Vectorf2d

# Register ModelData_Vectorf2d in _CadExCore:
_CadExCore.ModelData_Vectorf2d_swigregister(ModelData_Vectorf2d)

class ModelData_Vector2d(ModelData_Vectord2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Vector2d_swiginit(self, _CadExCore.new_ModelData_Vector2d(*args))

    def Transform(self, theTransformation: "ModelData_Transformation2d") -> "void":
        return _CadExCore.ModelData_Vector2d_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation2d") -> "cadex::ModelData_Vector2d":
        return _CadExCore.ModelData_Vector2d_Transformed(self, theTransformation)
    __swig_destroy__ = _CadExCore.delete_ModelData_Vector2d

# Register ModelData_Vector2d in _CadExCore:
_CadExCore.ModelData_Vector2d_swigregister(ModelData_Vector2d)

ModelData_ST_BodyList = _CadExCore.ModelData_ST_BodyList
ModelData_ST_Body = _CadExCore.ModelData_ST_Body
ModelData_ST_Solid = _CadExCore.ModelData_ST_Solid
ModelData_ST_Shell = _CadExCore.ModelData_ST_Shell
ModelData_ST_Face = _CadExCore.ModelData_ST_Face
ModelData_ST_Wire = _CadExCore.ModelData_ST_Wire
ModelData_ST_Edge = _CadExCore.ModelData_ST_Edge
ModelData_ST_Vertex = _CadExCore.ModelData_ST_Vertex
ModelData_ST_Undefined = _CadExCore.ModelData_ST_Undefined
ModelData_SO_Forward = _CadExCore.ModelData_SO_Forward
ModelData_SO_Reversed = _CadExCore.ModelData_SO_Reversed
ModelData_SO_Undefined = _CadExCore.ModelData_SO_Undefined
class ModelData_Shape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Shape_swiginit(self, _CadExCore.new_ModelData_Shape(*args))
    __swig_destroy__ = _CadExCore.delete_ModelData_Shape

    def Type(self) -> "cadex::ModelData_ShapeType":
        return _CadExCore.ModelData_Shape_Type(self)

    def Orientation(self) -> "cadex::ModelData_ShapeOrientation":
        return _CadExCore.ModelData_Shape_Orientation(self)

    def Reversed(self) -> "cadex::ModelData_Shape":
        return _CadExCore.ModelData_Shape_Reversed(self)

    def Oriented(self, theOrientation: "cadex::ModelData_ShapeOrientation") -> "cadex::ModelData_Shape":
        return _CadExCore.ModelData_Shape_Oriented(self, theOrientation)

    def Nullify(self) -> "void":
        return _CadExCore.ModelData_Shape_Nullify(self)

    def IsNull(self) -> "bool":
        return _CadExCore.ModelData_Shape_IsNull(self)

    def IsEqual(self, theOther: "ModelData_Shape") -> "bool":
        return _CadExCore.ModelData_Shape_IsEqual(self, theOther)

    def IsSame(self, theOther: "ModelData_Shape") -> "bool":
        return _CadExCore.ModelData_Shape_IsSame(self, theOther)

    def GetIterator(self):
        return ModelData_Shape_Iterator(self)


    def __eq__(self, other):
        if id(other) == id(self):
            return True;
        if isinstance(other, ModelData_Shape):
            return self.IsEqual(other);
        return False;


    def __hash__(self):
        anObjHash = ModelData_OrientedShapeHash();
        return int(anObjHash(self))


# Register ModelData_Shape in _CadExCore:
_CadExCore.ModelData_Shape_swigregister(ModelData_Shape)

class ModelData_Shape_Iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Shape_Iterator_swiginit(self, _CadExCore.new_ModelData_Shape_Iterator(*args))
    __swig_destroy__ = _CadExCore.delete_ModelData_Shape_Iterator

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_Shape_Iterator_HasNext(self)

    def Next(self) -> "cadex::ModelData_Shape":
        return _CadExCore.ModelData_Shape_Iterator_Next(self)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 


# Register ModelData_Shape_Iterator in _CadExCore:
_CadExCore.ModelData_Shape_Iterator_swigregister(ModelData_Shape_Iterator)

class ModelData_UnorientedShapeHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theShape: "ModelData_Shape") -> "size_t":
        return _CadExCore.ModelData_UnorientedShapeHash___call__(self, theShape)

    def __init__(self):
        _CadExCore.ModelData_UnorientedShapeHash_swiginit(self, _CadExCore.new_ModelData_UnorientedShapeHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_UnorientedShapeHash

# Register ModelData_UnorientedShapeHash in _CadExCore:
_CadExCore.ModelData_UnorientedShapeHash_swigregister(ModelData_UnorientedShapeHash)

class ModelData_OrientedShapeHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theShape: "ModelData_Shape") -> "size_t":
        return _CadExCore.ModelData_OrientedShapeHash___call__(self, theShape)

    def __init__(self):
        _CadExCore.ModelData_OrientedShapeHash_swiginit(self, _CadExCore.new_ModelData_OrientedShapeHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_OrientedShapeHash

# Register ModelData_OrientedShapeHash in _CadExCore:
_CadExCore.ModelData_OrientedShapeHash_swigregister(ModelData_OrientedShapeHash)

class ModelData_UnorientedShapeEqual(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theShape1: "ModelData_Shape", theShape2: "ModelData_Shape") -> "bool":
        return _CadExCore.ModelData_UnorientedShapeEqual___call__(self, theShape1, theShape2)

    def __init__(self):
        _CadExCore.ModelData_UnorientedShapeEqual_swiginit(self, _CadExCore.new_ModelData_UnorientedShapeEqual())
    __swig_destroy__ = _CadExCore.delete_ModelData_UnorientedShapeEqual

# Register ModelData_UnorientedShapeEqual in _CadExCore:
_CadExCore.ModelData_UnorientedShapeEqual_swigregister(ModelData_UnorientedShapeEqual)

class ModelData_OrientedShapeEqual(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theShape1: "ModelData_Shape", theShape2: "ModelData_Shape") -> "bool":
        return _CadExCore.ModelData_OrientedShapeEqual___call__(self, theShape1, theShape2)

    def __init__(self):
        _CadExCore.ModelData_OrientedShapeEqual_swiginit(self, _CadExCore.new_ModelData_OrientedShapeEqual())
    __swig_destroy__ = _CadExCore.delete_ModelData_OrientedShapeEqual

# Register ModelData_OrientedShapeEqual in _CadExCore:
_CadExCore.ModelData_OrientedShapeEqual_swigregister(ModelData_OrientedShapeEqual)

class ModelData_IntList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CadExCore.ModelData_IntList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CadExCore.ModelData_IntList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CadExCore.ModelData_IntList___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _CadExCore.ModelData_IntList___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _CadExCore.ModelData_IntList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CadExCore.ModelData_IntList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _CadExCore.ModelData_IntList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CadExCore.ModelData_IntList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _CadExCore.ModelData_IntList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CadExCore.ModelData_IntList___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _CadExCore.ModelData_IntList_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _CadExCore.ModelData_IntList_append(self, x)

    def empty(self) -> "bool":
        return _CadExCore.ModelData_IntList_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _CadExCore.ModelData_IntList_size(self)

    def swap(self, v: "ModelData_IntList") -> "void":
        return _CadExCore.ModelData_IntList_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _CadExCore.ModelData_IntList_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _CadExCore.ModelData_IntList_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _CadExCore.ModelData_IntList_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _CadExCore.ModelData_IntList_rend(self)

    def clear(self) -> "void":
        return _CadExCore.ModelData_IntList_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _CadExCore.ModelData_IntList_get_allocator(self)

    def pop_back(self) -> "void":
        return _CadExCore.ModelData_IntList_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _CadExCore.ModelData_IntList_erase(self, *args)

    def __init__(self, *args):
        _CadExCore.ModelData_IntList_swiginit(self, _CadExCore.new_ModelData_IntList(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _CadExCore.ModelData_IntList_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _CadExCore.ModelData_IntList_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _CadExCore.ModelData_IntList_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _CadExCore.ModelData_IntList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CadExCore.ModelData_IntList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CadExCore.ModelData_IntList_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _CadExCore.ModelData_IntList_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _CadExCore.ModelData_IntList_capacity(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_IntList

# Register ModelData_IntList in _CadExCore:
_CadExCore.ModelData_IntList_swigregister(ModelData_IntList)

class ModelData_DoubleList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CadExCore.ModelData_DoubleList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CadExCore.ModelData_DoubleList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CadExCore.ModelData_DoubleList___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _CadExCore.ModelData_DoubleList___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _CadExCore.ModelData_DoubleList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CadExCore.ModelData_DoubleList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _CadExCore.ModelData_DoubleList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CadExCore.ModelData_DoubleList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _CadExCore.ModelData_DoubleList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CadExCore.ModelData_DoubleList___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _CadExCore.ModelData_DoubleList_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _CadExCore.ModelData_DoubleList_append(self, x)

    def empty(self) -> "bool":
        return _CadExCore.ModelData_DoubleList_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _CadExCore.ModelData_DoubleList_size(self)

    def swap(self, v: "ModelData_DoubleList") -> "void":
        return _CadExCore.ModelData_DoubleList_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _CadExCore.ModelData_DoubleList_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _CadExCore.ModelData_DoubleList_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _CadExCore.ModelData_DoubleList_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _CadExCore.ModelData_DoubleList_rend(self)

    def clear(self) -> "void":
        return _CadExCore.ModelData_DoubleList_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _CadExCore.ModelData_DoubleList_get_allocator(self)

    def pop_back(self) -> "void":
        return _CadExCore.ModelData_DoubleList_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _CadExCore.ModelData_DoubleList_erase(self, *args)

    def __init__(self, *args):
        _CadExCore.ModelData_DoubleList_swiginit(self, _CadExCore.new_ModelData_DoubleList(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _CadExCore.ModelData_DoubleList_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _CadExCore.ModelData_DoubleList_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _CadExCore.ModelData_DoubleList_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _CadExCore.ModelData_DoubleList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CadExCore.ModelData_DoubleList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CadExCore.ModelData_DoubleList_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _CadExCore.ModelData_DoubleList_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _CadExCore.ModelData_DoubleList_capacity(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_DoubleList

# Register ModelData_DoubleList in _CadExCore:
_CadExCore.ModelData_DoubleList_swigregister(ModelData_DoubleList)

class ModelData_ColorList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CadExCore.ModelData_ColorList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CadExCore.ModelData_ColorList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CadExCore.ModelData_ColorList___bool__(self)

    def __len__(self) -> "std::vector< cadex::ModelData_Color >::size_type":
        return _CadExCore.ModelData_ColorList___len__(self)

    def __getslice__(self, i: "std::vector< cadex::ModelData_Color >::difference_type", j: "std::vector< cadex::ModelData_Color >::difference_type") -> "std::vector< cadex::ModelData_Color,std::allocator< cadex::ModelData_Color > > *":
        return _CadExCore.ModelData_ColorList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CadExCore.ModelData_ColorList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< cadex::ModelData_Color >::difference_type", j: "std::vector< cadex::ModelData_Color >::difference_type") -> "void":
        return _CadExCore.ModelData_ColorList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CadExCore.ModelData_ColorList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< cadex::ModelData_Color >::value_type const &":
        return _CadExCore.ModelData_ColorList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CadExCore.ModelData_ColorList___setitem__(self, *args)

    def pop(self) -> "std::vector< cadex::ModelData_Color >::value_type":
        return _CadExCore.ModelData_ColorList_pop(self)

    def append(self, x: "ModelData_Color") -> "void":
        return _CadExCore.ModelData_ColorList_append(self, x)

    def empty(self) -> "bool":
        return _CadExCore.ModelData_ColorList_empty(self)

    def size(self) -> "std::vector< cadex::ModelData_Color >::size_type":
        return _CadExCore.ModelData_ColorList_size(self)

    def swap(self, v: "ModelData_ColorList") -> "void":
        return _CadExCore.ModelData_ColorList_swap(self, v)

    def begin(self) -> "std::vector< cadex::ModelData_Color >::iterator":
        return _CadExCore.ModelData_ColorList_begin(self)

    def end(self) -> "std::vector< cadex::ModelData_Color >::iterator":
        return _CadExCore.ModelData_ColorList_end(self)

    def rbegin(self) -> "std::vector< cadex::ModelData_Color >::reverse_iterator":
        return _CadExCore.ModelData_ColorList_rbegin(self)

    def rend(self) -> "std::vector< cadex::ModelData_Color >::reverse_iterator":
        return _CadExCore.ModelData_ColorList_rend(self)

    def clear(self) -> "void":
        return _CadExCore.ModelData_ColorList_clear(self)

    def get_allocator(self) -> "std::vector< cadex::ModelData_Color >::allocator_type":
        return _CadExCore.ModelData_ColorList_get_allocator(self)

    def pop_back(self) -> "void":
        return _CadExCore.ModelData_ColorList_pop_back(self)

    def erase(self, *args) -> "std::vector< cadex::ModelData_Color >::iterator":
        return _CadExCore.ModelData_ColorList_erase(self, *args)

    def __init__(self, *args):
        _CadExCore.ModelData_ColorList_swiginit(self, _CadExCore.new_ModelData_ColorList(*args))

    def push_back(self, x: "ModelData_Color") -> "void":
        return _CadExCore.ModelData_ColorList_push_back(self, x)

    def front(self) -> "std::vector< cadex::ModelData_Color >::value_type const &":
        return _CadExCore.ModelData_ColorList_front(self)

    def back(self) -> "std::vector< cadex::ModelData_Color >::value_type const &":
        return _CadExCore.ModelData_ColorList_back(self)

    def assign(self, n: "std::vector< cadex::ModelData_Color >::size_type", x: "ModelData_Color") -> "void":
        return _CadExCore.ModelData_ColorList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CadExCore.ModelData_ColorList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CadExCore.ModelData_ColorList_insert(self, *args)

    def reserve(self, n: "std::vector< cadex::ModelData_Color >::size_type") -> "void":
        return _CadExCore.ModelData_ColorList_reserve(self, n)

    def capacity(self) -> "std::vector< cadex::ModelData_Color >::size_type":
        return _CadExCore.ModelData_ColorList_capacity(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_ColorList

# Register ModelData_ColorList in _CadExCore:
_CadExCore.ModelData_ColorList_swigregister(ModelData_ColorList)

class ModelData_PointList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CadExCore.ModelData_PointList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CadExCore.ModelData_PointList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CadExCore.ModelData_PointList___bool__(self)

    def __len__(self) -> "std::vector< cadex::ModelData_Point >::size_type":
        return _CadExCore.ModelData_PointList___len__(self)

    def __getslice__(self, i: "std::vector< cadex::ModelData_Point >::difference_type", j: "std::vector< cadex::ModelData_Point >::difference_type") -> "std::vector< cadex::ModelData_Point,std::allocator< cadex::ModelData_Point > > *":
        return _CadExCore.ModelData_PointList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CadExCore.ModelData_PointList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< cadex::ModelData_Point >::difference_type", j: "std::vector< cadex::ModelData_Point >::difference_type") -> "void":
        return _CadExCore.ModelData_PointList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CadExCore.ModelData_PointList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< cadex::ModelData_Point >::value_type const &":
        return _CadExCore.ModelData_PointList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CadExCore.ModelData_PointList___setitem__(self, *args)

    def pop(self) -> "std::vector< cadex::ModelData_Point >::value_type":
        return _CadExCore.ModelData_PointList_pop(self)

    def append(self, x: "ModelData_Point") -> "void":
        return _CadExCore.ModelData_PointList_append(self, x)

    def empty(self) -> "bool":
        return _CadExCore.ModelData_PointList_empty(self)

    def size(self) -> "std::vector< cadex::ModelData_Point >::size_type":
        return _CadExCore.ModelData_PointList_size(self)

    def swap(self, v: "ModelData_PointList") -> "void":
        return _CadExCore.ModelData_PointList_swap(self, v)

    def begin(self) -> "std::vector< cadex::ModelData_Point >::iterator":
        return _CadExCore.ModelData_PointList_begin(self)

    def end(self) -> "std::vector< cadex::ModelData_Point >::iterator":
        return _CadExCore.ModelData_PointList_end(self)

    def rbegin(self) -> "std::vector< cadex::ModelData_Point >::reverse_iterator":
        return _CadExCore.ModelData_PointList_rbegin(self)

    def rend(self) -> "std::vector< cadex::ModelData_Point >::reverse_iterator":
        return _CadExCore.ModelData_PointList_rend(self)

    def clear(self) -> "void":
        return _CadExCore.ModelData_PointList_clear(self)

    def get_allocator(self) -> "std::vector< cadex::ModelData_Point >::allocator_type":
        return _CadExCore.ModelData_PointList_get_allocator(self)

    def pop_back(self) -> "void":
        return _CadExCore.ModelData_PointList_pop_back(self)

    def erase(self, *args) -> "std::vector< cadex::ModelData_Point >::iterator":
        return _CadExCore.ModelData_PointList_erase(self, *args)

    def __init__(self, *args):
        _CadExCore.ModelData_PointList_swiginit(self, _CadExCore.new_ModelData_PointList(*args))

    def push_back(self, x: "ModelData_Point") -> "void":
        return _CadExCore.ModelData_PointList_push_back(self, x)

    def front(self) -> "std::vector< cadex::ModelData_Point >::value_type const &":
        return _CadExCore.ModelData_PointList_front(self)

    def back(self) -> "std::vector< cadex::ModelData_Point >::value_type const &":
        return _CadExCore.ModelData_PointList_back(self)

    def assign(self, n: "std::vector< cadex::ModelData_Point >::size_type", x: "ModelData_Point") -> "void":
        return _CadExCore.ModelData_PointList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CadExCore.ModelData_PointList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CadExCore.ModelData_PointList_insert(self, *args)

    def reserve(self, n: "std::vector< cadex::ModelData_Point >::size_type") -> "void":
        return _CadExCore.ModelData_PointList_reserve(self, n)

    def capacity(self) -> "std::vector< cadex::ModelData_Point >::size_type":
        return _CadExCore.ModelData_PointList_capacity(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PointList

# Register ModelData_PointList in _CadExCore:
_CadExCore.ModelData_PointList_swigregister(ModelData_PointList)

class ModelData_Point2dList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CadExCore.ModelData_Point2dList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CadExCore.ModelData_Point2dList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CadExCore.ModelData_Point2dList___bool__(self)

    def __len__(self) -> "std::vector< cadex::ModelData_Point2d >::size_type":
        return _CadExCore.ModelData_Point2dList___len__(self)

    def __getslice__(self, i: "std::vector< cadex::ModelData_Point2d >::difference_type", j: "std::vector< cadex::ModelData_Point2d >::difference_type") -> "std::vector< cadex::ModelData_Point2d,std::allocator< cadex::ModelData_Point2d > > *":
        return _CadExCore.ModelData_Point2dList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CadExCore.ModelData_Point2dList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< cadex::ModelData_Point2d >::difference_type", j: "std::vector< cadex::ModelData_Point2d >::difference_type") -> "void":
        return _CadExCore.ModelData_Point2dList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CadExCore.ModelData_Point2dList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< cadex::ModelData_Point2d >::value_type const &":
        return _CadExCore.ModelData_Point2dList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CadExCore.ModelData_Point2dList___setitem__(self, *args)

    def pop(self) -> "std::vector< cadex::ModelData_Point2d >::value_type":
        return _CadExCore.ModelData_Point2dList_pop(self)

    def append(self, x: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_Point2dList_append(self, x)

    def empty(self) -> "bool":
        return _CadExCore.ModelData_Point2dList_empty(self)

    def size(self) -> "std::vector< cadex::ModelData_Point2d >::size_type":
        return _CadExCore.ModelData_Point2dList_size(self)

    def swap(self, v: "ModelData_Point2dList") -> "void":
        return _CadExCore.ModelData_Point2dList_swap(self, v)

    def begin(self) -> "std::vector< cadex::ModelData_Point2d >::iterator":
        return _CadExCore.ModelData_Point2dList_begin(self)

    def end(self) -> "std::vector< cadex::ModelData_Point2d >::iterator":
        return _CadExCore.ModelData_Point2dList_end(self)

    def rbegin(self) -> "std::vector< cadex::ModelData_Point2d >::reverse_iterator":
        return _CadExCore.ModelData_Point2dList_rbegin(self)

    def rend(self) -> "std::vector< cadex::ModelData_Point2d >::reverse_iterator":
        return _CadExCore.ModelData_Point2dList_rend(self)

    def clear(self) -> "void":
        return _CadExCore.ModelData_Point2dList_clear(self)

    def get_allocator(self) -> "std::vector< cadex::ModelData_Point2d >::allocator_type":
        return _CadExCore.ModelData_Point2dList_get_allocator(self)

    def pop_back(self) -> "void":
        return _CadExCore.ModelData_Point2dList_pop_back(self)

    def erase(self, *args) -> "std::vector< cadex::ModelData_Point2d >::iterator":
        return _CadExCore.ModelData_Point2dList_erase(self, *args)

    def __init__(self, *args):
        _CadExCore.ModelData_Point2dList_swiginit(self, _CadExCore.new_ModelData_Point2dList(*args))

    def push_back(self, x: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_Point2dList_push_back(self, x)

    def front(self) -> "std::vector< cadex::ModelData_Point2d >::value_type const &":
        return _CadExCore.ModelData_Point2dList_front(self)

    def back(self) -> "std::vector< cadex::ModelData_Point2d >::value_type const &":
        return _CadExCore.ModelData_Point2dList_back(self)

    def assign(self, n: "std::vector< cadex::ModelData_Point2d >::size_type", x: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_Point2dList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CadExCore.ModelData_Point2dList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CadExCore.ModelData_Point2dList_insert(self, *args)

    def reserve(self, n: "std::vector< cadex::ModelData_Point2d >::size_type") -> "void":
        return _CadExCore.ModelData_Point2dList_reserve(self, n)

    def capacity(self) -> "std::vector< cadex::ModelData_Point2d >::size_type":
        return _CadExCore.ModelData_Point2dList_capacity(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_Point2dList

# Register ModelData_Point2dList in _CadExCore:
_CadExCore.ModelData_Point2dList_swigregister(ModelData_Point2dList)

class ModelData_VectorList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CadExCore.ModelData_VectorList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CadExCore.ModelData_VectorList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CadExCore.ModelData_VectorList___bool__(self)

    def __len__(self) -> "std::vector< cadex::ModelData_Vector >::size_type":
        return _CadExCore.ModelData_VectorList___len__(self)

    def __getslice__(self, i: "std::vector< cadex::ModelData_Vector >::difference_type", j: "std::vector< cadex::ModelData_Vector >::difference_type") -> "std::vector< cadex::ModelData_Vector,std::allocator< cadex::ModelData_Vector > > *":
        return _CadExCore.ModelData_VectorList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CadExCore.ModelData_VectorList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< cadex::ModelData_Vector >::difference_type", j: "std::vector< cadex::ModelData_Vector >::difference_type") -> "void":
        return _CadExCore.ModelData_VectorList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CadExCore.ModelData_VectorList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< cadex::ModelData_Vector >::value_type const &":
        return _CadExCore.ModelData_VectorList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CadExCore.ModelData_VectorList___setitem__(self, *args)

    def pop(self) -> "std::vector< cadex::ModelData_Vector >::value_type":
        return _CadExCore.ModelData_VectorList_pop(self)

    def append(self, x: "ModelData_Vector") -> "void":
        return _CadExCore.ModelData_VectorList_append(self, x)

    def empty(self) -> "bool":
        return _CadExCore.ModelData_VectorList_empty(self)

    def size(self) -> "std::vector< cadex::ModelData_Vector >::size_type":
        return _CadExCore.ModelData_VectorList_size(self)

    def swap(self, v: "ModelData_VectorList") -> "void":
        return _CadExCore.ModelData_VectorList_swap(self, v)

    def begin(self) -> "std::vector< cadex::ModelData_Vector >::iterator":
        return _CadExCore.ModelData_VectorList_begin(self)

    def end(self) -> "std::vector< cadex::ModelData_Vector >::iterator":
        return _CadExCore.ModelData_VectorList_end(self)

    def rbegin(self) -> "std::vector< cadex::ModelData_Vector >::reverse_iterator":
        return _CadExCore.ModelData_VectorList_rbegin(self)

    def rend(self) -> "std::vector< cadex::ModelData_Vector >::reverse_iterator":
        return _CadExCore.ModelData_VectorList_rend(self)

    def clear(self) -> "void":
        return _CadExCore.ModelData_VectorList_clear(self)

    def get_allocator(self) -> "std::vector< cadex::ModelData_Vector >::allocator_type":
        return _CadExCore.ModelData_VectorList_get_allocator(self)

    def pop_back(self) -> "void":
        return _CadExCore.ModelData_VectorList_pop_back(self)

    def erase(self, *args) -> "std::vector< cadex::ModelData_Vector >::iterator":
        return _CadExCore.ModelData_VectorList_erase(self, *args)

    def __init__(self, *args):
        _CadExCore.ModelData_VectorList_swiginit(self, _CadExCore.new_ModelData_VectorList(*args))

    def push_back(self, x: "ModelData_Vector") -> "void":
        return _CadExCore.ModelData_VectorList_push_back(self, x)

    def front(self) -> "std::vector< cadex::ModelData_Vector >::value_type const &":
        return _CadExCore.ModelData_VectorList_front(self)

    def back(self) -> "std::vector< cadex::ModelData_Vector >::value_type const &":
        return _CadExCore.ModelData_VectorList_back(self)

    def assign(self, n: "std::vector< cadex::ModelData_Vector >::size_type", x: "ModelData_Vector") -> "void":
        return _CadExCore.ModelData_VectorList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CadExCore.ModelData_VectorList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CadExCore.ModelData_VectorList_insert(self, *args)

    def reserve(self, n: "std::vector< cadex::ModelData_Vector >::size_type") -> "void":
        return _CadExCore.ModelData_VectorList_reserve(self, n)

    def capacity(self) -> "std::vector< cadex::ModelData_Vector >::size_type":
        return _CadExCore.ModelData_VectorList_capacity(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_VectorList

# Register ModelData_VectorList in _CadExCore:
_CadExCore.ModelData_VectorList_swigregister(ModelData_VectorList)

class ModelData_VectorfList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CadExCore.ModelData_VectorfList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CadExCore.ModelData_VectorfList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CadExCore.ModelData_VectorfList___bool__(self)

    def __len__(self) -> "std::vector< cadex::internal::ModelData_BaseVector< float > >::size_type":
        return _CadExCore.ModelData_VectorfList___len__(self)

    def __getslice__(self, i: "std::vector< cadex::internal::ModelData_BaseVector< float > >::difference_type", j: "std::vector< cadex::internal::ModelData_BaseVector< float > >::difference_type") -> "std::vector< cadex::internal::ModelData_BaseVector< float >,std::allocator< cadex::internal::ModelData_BaseVector< float > > > *":
        return _CadExCore.ModelData_VectorfList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CadExCore.ModelData_VectorfList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< cadex::internal::ModelData_BaseVector< float > >::difference_type", j: "std::vector< cadex::internal::ModelData_BaseVector< float > >::difference_type") -> "void":
        return _CadExCore.ModelData_VectorfList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CadExCore.ModelData_VectorfList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< cadex::internal::ModelData_BaseVector< float > >::value_type const &":
        return _CadExCore.ModelData_VectorfList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CadExCore.ModelData_VectorfList___setitem__(self, *args)

    def pop(self) -> "std::vector< cadex::internal::ModelData_BaseVector< float > >::value_type":
        return _CadExCore.ModelData_VectorfList_pop(self)

    def append(self, x: "ModelData_Vectorf") -> "void":
        return _CadExCore.ModelData_VectorfList_append(self, x)

    def empty(self) -> "bool":
        return _CadExCore.ModelData_VectorfList_empty(self)

    def size(self) -> "std::vector< cadex::internal::ModelData_BaseVector< float > >::size_type":
        return _CadExCore.ModelData_VectorfList_size(self)

    def swap(self, v: "ModelData_VectorfList") -> "void":
        return _CadExCore.ModelData_VectorfList_swap(self, v)

    def begin(self) -> "std::vector< cadex::internal::ModelData_BaseVector< float > >::iterator":
        return _CadExCore.ModelData_VectorfList_begin(self)

    def end(self) -> "std::vector< cadex::internal::ModelData_BaseVector< float > >::iterator":
        return _CadExCore.ModelData_VectorfList_end(self)

    def rbegin(self) -> "std::vector< cadex::internal::ModelData_BaseVector< float > >::reverse_iterator":
        return _CadExCore.ModelData_VectorfList_rbegin(self)

    def rend(self) -> "std::vector< cadex::internal::ModelData_BaseVector< float > >::reverse_iterator":
        return _CadExCore.ModelData_VectorfList_rend(self)

    def clear(self) -> "void":
        return _CadExCore.ModelData_VectorfList_clear(self)

    def get_allocator(self) -> "std::vector< cadex::internal::ModelData_BaseVector< float > >::allocator_type":
        return _CadExCore.ModelData_VectorfList_get_allocator(self)

    def pop_back(self) -> "void":
        return _CadExCore.ModelData_VectorfList_pop_back(self)

    def erase(self, *args) -> "std::vector< cadex::internal::ModelData_BaseVector< float > >::iterator":
        return _CadExCore.ModelData_VectorfList_erase(self, *args)

    def __init__(self, *args):
        _CadExCore.ModelData_VectorfList_swiginit(self, _CadExCore.new_ModelData_VectorfList(*args))

    def push_back(self, x: "ModelData_Vectorf") -> "void":
        return _CadExCore.ModelData_VectorfList_push_back(self, x)

    def front(self) -> "std::vector< cadex::internal::ModelData_BaseVector< float > >::value_type const &":
        return _CadExCore.ModelData_VectorfList_front(self)

    def back(self) -> "std::vector< cadex::internal::ModelData_BaseVector< float > >::value_type const &":
        return _CadExCore.ModelData_VectorfList_back(self)

    def assign(self, n: "std::vector< cadex::internal::ModelData_BaseVector< float > >::size_type", x: "ModelData_Vectorf") -> "void":
        return _CadExCore.ModelData_VectorfList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CadExCore.ModelData_VectorfList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CadExCore.ModelData_VectorfList_insert(self, *args)

    def reserve(self, n: "std::vector< cadex::internal::ModelData_BaseVector< float > >::size_type") -> "void":
        return _CadExCore.ModelData_VectorfList_reserve(self, n)

    def capacity(self) -> "std::vector< cadex::internal::ModelData_BaseVector< float > >::size_type":
        return _CadExCore.ModelData_VectorfList_capacity(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_VectorfList

# Register ModelData_VectorfList in _CadExCore:
_CadExCore.ModelData_VectorfList_swigregister(ModelData_VectorfList)

class ModelData_Vector2dList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CadExCore.ModelData_Vector2dList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CadExCore.ModelData_Vector2dList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CadExCore.ModelData_Vector2dList___bool__(self)

    def __len__(self) -> "std::vector< cadex::ModelData_Vector2d >::size_type":
        return _CadExCore.ModelData_Vector2dList___len__(self)

    def __getslice__(self, i: "std::vector< cadex::ModelData_Vector2d >::difference_type", j: "std::vector< cadex::ModelData_Vector2d >::difference_type") -> "std::vector< cadex::ModelData_Vector2d,std::allocator< cadex::ModelData_Vector2d > > *":
        return _CadExCore.ModelData_Vector2dList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CadExCore.ModelData_Vector2dList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< cadex::ModelData_Vector2d >::difference_type", j: "std::vector< cadex::ModelData_Vector2d >::difference_type") -> "void":
        return _CadExCore.ModelData_Vector2dList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CadExCore.ModelData_Vector2dList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< cadex::ModelData_Vector2d >::value_type const &":
        return _CadExCore.ModelData_Vector2dList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CadExCore.ModelData_Vector2dList___setitem__(self, *args)

    def pop(self) -> "std::vector< cadex::ModelData_Vector2d >::value_type":
        return _CadExCore.ModelData_Vector2dList_pop(self)

    def append(self, x: "ModelData_Vector2d") -> "void":
        return _CadExCore.ModelData_Vector2dList_append(self, x)

    def empty(self) -> "bool":
        return _CadExCore.ModelData_Vector2dList_empty(self)

    def size(self) -> "std::vector< cadex::ModelData_Vector2d >::size_type":
        return _CadExCore.ModelData_Vector2dList_size(self)

    def swap(self, v: "ModelData_Vector2dList") -> "void":
        return _CadExCore.ModelData_Vector2dList_swap(self, v)

    def begin(self) -> "std::vector< cadex::ModelData_Vector2d >::iterator":
        return _CadExCore.ModelData_Vector2dList_begin(self)

    def end(self) -> "std::vector< cadex::ModelData_Vector2d >::iterator":
        return _CadExCore.ModelData_Vector2dList_end(self)

    def rbegin(self) -> "std::vector< cadex::ModelData_Vector2d >::reverse_iterator":
        return _CadExCore.ModelData_Vector2dList_rbegin(self)

    def rend(self) -> "std::vector< cadex::ModelData_Vector2d >::reverse_iterator":
        return _CadExCore.ModelData_Vector2dList_rend(self)

    def clear(self) -> "void":
        return _CadExCore.ModelData_Vector2dList_clear(self)

    def get_allocator(self) -> "std::vector< cadex::ModelData_Vector2d >::allocator_type":
        return _CadExCore.ModelData_Vector2dList_get_allocator(self)

    def pop_back(self) -> "void":
        return _CadExCore.ModelData_Vector2dList_pop_back(self)

    def erase(self, *args) -> "std::vector< cadex::ModelData_Vector2d >::iterator":
        return _CadExCore.ModelData_Vector2dList_erase(self, *args)

    def __init__(self, *args):
        _CadExCore.ModelData_Vector2dList_swiginit(self, _CadExCore.new_ModelData_Vector2dList(*args))

    def push_back(self, x: "ModelData_Vector2d") -> "void":
        return _CadExCore.ModelData_Vector2dList_push_back(self, x)

    def front(self) -> "std::vector< cadex::ModelData_Vector2d >::value_type const &":
        return _CadExCore.ModelData_Vector2dList_front(self)

    def back(self) -> "std::vector< cadex::ModelData_Vector2d >::value_type const &":
        return _CadExCore.ModelData_Vector2dList_back(self)

    def assign(self, n: "std::vector< cadex::ModelData_Vector2d >::size_type", x: "ModelData_Vector2d") -> "void":
        return _CadExCore.ModelData_Vector2dList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CadExCore.ModelData_Vector2dList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CadExCore.ModelData_Vector2dList_insert(self, *args)

    def reserve(self, n: "std::vector< cadex::ModelData_Vector2d >::size_type") -> "void":
        return _CadExCore.ModelData_Vector2dList_reserve(self, n)

    def capacity(self) -> "std::vector< cadex::ModelData_Vector2d >::size_type":
        return _CadExCore.ModelData_Vector2dList_capacity(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_Vector2dList

# Register ModelData_Vector2dList in _CadExCore:
_CadExCore.ModelData_Vector2dList_swigregister(ModelData_Vector2dList)

class ModelData_ShapeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CadExCore.ModelData_ShapeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CadExCore.ModelData_ShapeList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CadExCore.ModelData_ShapeList___bool__(self)

    def __len__(self) -> "std::vector< cadex::ModelData_Shape >::size_type":
        return _CadExCore.ModelData_ShapeList___len__(self)

    def __getslice__(self, i: "std::vector< cadex::ModelData_Shape >::difference_type", j: "std::vector< cadex::ModelData_Shape >::difference_type") -> "std::vector< cadex::ModelData_Shape,std::allocator< cadex::ModelData_Shape > > *":
        return _CadExCore.ModelData_ShapeList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CadExCore.ModelData_ShapeList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< cadex::ModelData_Shape >::difference_type", j: "std::vector< cadex::ModelData_Shape >::difference_type") -> "void":
        return _CadExCore.ModelData_ShapeList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CadExCore.ModelData_ShapeList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< cadex::ModelData_Shape >::value_type const &":
        return _CadExCore.ModelData_ShapeList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CadExCore.ModelData_ShapeList___setitem__(self, *args)

    def pop(self) -> "std::vector< cadex::ModelData_Shape >::value_type":
        return _CadExCore.ModelData_ShapeList_pop(self)

    def append(self, x: "ModelData_Shape") -> "void":
        return _CadExCore.ModelData_ShapeList_append(self, x)

    def empty(self) -> "bool":
        return _CadExCore.ModelData_ShapeList_empty(self)

    def size(self) -> "std::vector< cadex::ModelData_Shape >::size_type":
        return _CadExCore.ModelData_ShapeList_size(self)

    def swap(self, v: "ModelData_ShapeList") -> "void":
        return _CadExCore.ModelData_ShapeList_swap(self, v)

    def begin(self) -> "std::vector< cadex::ModelData_Shape >::iterator":
        return _CadExCore.ModelData_ShapeList_begin(self)

    def end(self) -> "std::vector< cadex::ModelData_Shape >::iterator":
        return _CadExCore.ModelData_ShapeList_end(self)

    def rbegin(self) -> "std::vector< cadex::ModelData_Shape >::reverse_iterator":
        return _CadExCore.ModelData_ShapeList_rbegin(self)

    def rend(self) -> "std::vector< cadex::ModelData_Shape >::reverse_iterator":
        return _CadExCore.ModelData_ShapeList_rend(self)

    def clear(self) -> "void":
        return _CadExCore.ModelData_ShapeList_clear(self)

    def get_allocator(self) -> "std::vector< cadex::ModelData_Shape >::allocator_type":
        return _CadExCore.ModelData_ShapeList_get_allocator(self)

    def pop_back(self) -> "void":
        return _CadExCore.ModelData_ShapeList_pop_back(self)

    def erase(self, *args) -> "std::vector< cadex::ModelData_Shape >::iterator":
        return _CadExCore.ModelData_ShapeList_erase(self, *args)

    def __init__(self, *args):
        _CadExCore.ModelData_ShapeList_swiginit(self, _CadExCore.new_ModelData_ShapeList(*args))

    def push_back(self, x: "ModelData_Shape") -> "void":
        return _CadExCore.ModelData_ShapeList_push_back(self, x)

    def front(self) -> "std::vector< cadex::ModelData_Shape >::value_type const &":
        return _CadExCore.ModelData_ShapeList_front(self)

    def back(self) -> "std::vector< cadex::ModelData_Shape >::value_type const &":
        return _CadExCore.ModelData_ShapeList_back(self)

    def assign(self, n: "std::vector< cadex::ModelData_Shape >::size_type", x: "ModelData_Shape") -> "void":
        return _CadExCore.ModelData_ShapeList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CadExCore.ModelData_ShapeList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CadExCore.ModelData_ShapeList_insert(self, *args)

    def reserve(self, n: "std::vector< cadex::ModelData_Shape >::size_type") -> "void":
        return _CadExCore.ModelData_ShapeList_reserve(self, n)

    def capacity(self) -> "std::vector< cadex::ModelData_Shape >::size_type":
        return _CadExCore.ModelData_ShapeList_capacity(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_ShapeList

# Register ModelData_ShapeList in _CadExCore:
_CadExCore.ModelData_ShapeList_swigregister(ModelData_ShapeList)

Base_AU_Radian = _CadExCore.Base_AU_Radian
Base_AU_Degree = _CadExCore.Base_AU_Degree
Base_LU_Millimeters = _CadExCore.Base_LU_Millimeters
Base_LU_Centimeters = _CadExCore.Base_LU_Centimeters
Base_LU_Meters = _CadExCore.Base_LU_Meters
Base_LU_Inches = _CadExCore.Base_LU_Inches
Base_LU_Feets = _CadExCore.Base_LU_Feets
Base_LU_Yards = _CadExCore.Base_LU_Yards
Base_LU_Micrometers = _CadExCore.Base_LU_Micrometers
Base_LU_Decimeters = _CadExCore.Base_LU_Decimeters
Base_LU_Kilometers = _CadExCore.Base_LU_Kilometers
Base_LU_Mils = _CadExCore.Base_LU_Mils
Base_LU_Miles = _CadExCore.Base_LU_Miles
class Base_ExportError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Message(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.Base_ExportError_Message(self)

    def Context(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.Base_ExportError_Context(self)

    def Shape(self) -> "cadex::ModelData_Shape const &":
        return _CadExCore.Base_ExportError_Shape(self)
    __swig_destroy__ = _CadExCore.delete_Base_ExportError

# Register Base_ExportError in _CadExCore:
_CadExCore.Base_ExportError_swigregister(Base_ExportError)

class Base_Logger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Trace = _CadExCore.Base_Logger_Trace
    Debug = _CadExCore.Base_Logger_Debug
    Info = _CadExCore.Base_Logger_Info
    Warning = _CadExCore.Base_Logger_Warning
    Error = _CadExCore.Base_Logger_Error
    Fatal = _CadExCore.Base_Logger_Fatal

    @staticmethod
    def __GlobalInstance() -> "cadex::Base_Logger &":
        return _CadExCore.Base_Logger___GlobalInstance()
    __swig_destroy__ = _CadExCore.delete_Base_Logger

    def SetLevel(self, theLevel: "cadex::Base_Logger::Level const") -> "void":
        return _CadExCore.Base_Logger_SetLevel(self, theLevel)

    def GetLevel(self) -> "cadex::Base_Logger::Level":
        return _CadExCore.Base_Logger_GetLevel(self)

    def CanAccept(self, theLevel: "cadex::Base_Logger::Level const") -> "bool":
        return _CadExCore.Base_Logger_CanAccept(self, theLevel)

    def __Register(self, *args) -> "void":
        return _CadExCore.Base_Logger___Register(self, *args)

    def __Unregister(self, theAppender: "Base_LoggerAppender") -> "void":
        return _CadExCore.Base_Logger___Unregister(self, theAppender)

    __theGlobalLogger = None

    @classmethod
    def GlobalInstance(cls):
        if not cls.__theGlobalLogger:
            cls.__theGlobalLogger = cls.__GlobalInstance()
            atexit.register(cls.__clear, cls)
        return cls.__theGlobalLogger

    def Register(self, theAppender, theMinLevel=None, theMaxLevel=None):
        if theMaxLevel:
            self.__Register(theAppender, theMinLevel, theMaxLevel)
        elif theMinLevel:
            self.__Register(theAppender, theMinLevel)
        else:
            self.__Register(theAppender)
        self.AddAppender(theAppender)

    def Unregister(self,theAppender):
        self.__Unregister(theAppender)
        self.RemoveAppender(theAppender)

    def __clear(self):
        if self.__myAppenders:
    # Create local copy to avoid error on removing elements during interation over collection.
            anAppenders = self.__myAppenders.copy()
            for anAppender in anAppenders:
                self.__theGlobalLogger.Unregister(anAppender)



    __myAppenders = []

    def AddAppender(self, theAppender: "Base_LoggerAppender"):
        self.__myAppenders.append(theAppender)

    def RemoveAppender(self, theAppender: "Base_LoggerAppender"):
        self.__myAppenders.remove(theAppender)


# Register Base_Logger in _CadExCore:
_CadExCore.Base_Logger_swigregister(Base_Logger)

def Base_Logger___GlobalInstance() -> "cadex::Base_Logger &":
    return _CadExCore.Base_Logger___GlobalInstance()

class Base_LoggerAppender(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_Base_LoggerAppender

    @abstractmethod
    def Append(self, theMessage: "cadex::Base_LoggerAppender::CharPointerType") -> "void":
        return _CadExCore.Base_LoggerAppender_Append(self, theMessage)

    def __init__(self, *args):
        if self.__class__ == Base_LoggerAppender:
            _self = None
        else:
            _self = self
        _CadExCore.Base_LoggerAppender_swiginit(self, _CadExCore.new_Base_LoggerAppender(_self, *args))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_Base_LoggerAppender(self)
        return weakref.proxy(self)

# Register Base_LoggerAppender in _CadExCore:
_CadExCore.Base_LoggerAppender_swigregister(Base_LoggerAppender)

class Sentry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theLogger: "Base_Logger", theAppender: "Base_LoggerAppender"):
        _CadExCore.Sentry_swiginit(self, _CadExCore.new_Sentry(theLogger, theAppender))
    __swig_destroy__ = _CadExCore.delete_Sentry

# Register Sentry in _CadExCore:
_CadExCore.Sentry_swigregister(Sentry)

class Base_LoggerFileAppender(Base_LoggerAppender):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theFileName: "char const *"):
        if self.__class__ == Base_LoggerFileAppender:
            _self = None
        else:
            _self = self
        _CadExCore.Base_LoggerFileAppender_swiginit(self, _CadExCore.new_Base_LoggerFileAppender(_self, theFileName))

    def IsValid(self) -> "bool":
        return _CadExCore.Base_LoggerFileAppender_IsValid(self)

    def Append(self, theMessage: "cadex::Base_LoggerAppender::CharPointerType") -> "void":
        return _CadExCore.Base_LoggerFileAppender_Append(self, theMessage)
    __swig_destroy__ = _CadExCore.delete_Base_LoggerFileAppender
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_Base_LoggerFileAppender(self)
        return weakref.proxy(self)

# Register Base_LoggerFileAppender in _CadExCore:
_CadExCore.Base_LoggerFileAppender_swigregister(Base_LoggerFileAppender)

class Base_MissingExternalReference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.Base_MissingExternalReference_swiginit(self, _CadExCore.new_Base_MissingExternalReference())

    def ParentElement(self) -> "cadex::ModelData_SceneGraphElement const &":
        return _CadExCore.Base_MissingExternalReference_ParentElement(self)

    def FilePath(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.Base_MissingExternalReference_FilePath(self)
    __swig_destroy__ = _CadExCore.delete_Base_MissingExternalReference

# Register Base_MissingExternalReference in _CadExCore:
_CadExCore.Base_MissingExternalReference_swigregister(Base_MissingExternalReference)

class Base_ProgressStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.Base_ProgressStatus_swiginit(self, _CadExCore.new_Base_ProgressStatus(*args))
    __swig_destroy__ = _CadExCore.delete_Base_ProgressStatus

    def Value(self) -> "cadex::Base_ProgressStatus::value_type":
        return _CadExCore.Base_ProgressStatus_Value(self)

    @staticmethod
    def MinValue() -> "cadex::Base_ProgressStatus::value_type":
        return _CadExCore.Base_ProgressStatus_MinValue()

    @staticmethod
    def MaxValue() -> "cadex::Base_ProgressStatus::value_type":
        return _CadExCore.Base_ProgressStatus_MaxValue()

    def _Register(self, theObserver: "Base_ProgressStatus_Observer", theValueThreshold: "cadex::Base_ProgressStatus::value_type"=0.1, theTimeThreshold: "unsigned int"=20) -> "void":
        return _CadExCore.Base_ProgressStatus__Register(self, theObserver, theValueThreshold, theTimeThreshold)

    def _Unregister(self, theObserver: "Base_ProgressStatus_Observer") -> "void":
        return _CadExCore.Base_ProgressStatus__Unregister(self, theObserver)

    def SetObserversNotifyingThread(self) -> "void":
        return _CadExCore.Base_ProgressStatus_SetObserversNotifyingThread(self)

    def _SetCancellationChecker(self, theChecker: "Base_ProgressStatus_CancellationChecker") -> "void":
        return _CadExCore.Base_ProgressStatus__SetCancellationChecker(self, theChecker)

    def _RemoveCancellationChecker(self) -> "void":
        return _CadExCore.Base_ProgressStatus__RemoveCancellationChecker(self)

    def Cancel(self) -> "void":
        return _CadExCore.Base_ProgressStatus_Cancel(self)

    def WasCanceled(self) -> "bool":
        return _CadExCore.Base_ProgressStatus_WasCanceled(self)

    def __init__(self, *args):
        _CadExCore.Base_ProgressStatus_swiginit(self, _CadExCore.new_Base_ProgressStatus(*args))
        self._myObservers = []
        self._myCancellationChecker = None

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if len(self._myObservers) > 0:
            anObservers = self._myObservers.copy()
            for anObserver in anObservers:
                anObserver.Completed(self)
                self.Unregister(anObserver)
        if(exc_value):
            print('exit exception text: ', exc_value)
        Base_ProgressStatus._close(self)
        return True

    @staticmethod
    def _close(obj):
        _CadExCore.delete_Base_ProgressStatus(obj)

    def Register(self, theObserver, theValueThreshold=None, theTimeThreshold=None):
        if theTimeThreshold:
            self._Register(theObserver, theValueThreshold, theTimeThreshold)
        elif theValueThreshold:
            self._Register(theObserver, theValueThreshold)
        else:
            self._Register(theObserver)
        self._AddObserver(theObserver)

    def Unregister(self, theObserver):
        self._Unregister(theObserver)
        self._RemoveObserver(theObserver)

    def SetCancellationChecker(self, theChecker):
        self._SetCancellationChecker(theChecker)
        self._myCancellationChecker = theChecker

    def RemoveCancellationChecker(self, theChecker):
        self._RemoveCancellationChecker();
        self._myCancellationChecker = None

    def _AddObserver(self, theObserver):
          self._myObservers.append(theObserver)

    def _RemoveObserver(self, theObserver):
      self._myObservers.remove(theObserver)


# Register Base_ProgressStatus in _CadExCore:
_CadExCore.Base_ProgressStatus_swigregister(Base_ProgressStatus)

def Base_ProgressStatus_MinValue() -> "cadex::Base_ProgressStatus::value_type":
    return _CadExCore.Base_ProgressStatus_MinValue()

def Base_ProgressStatus_MaxValue() -> "cadex::Base_ProgressStatus::value_type":
    return _CadExCore.Base_ProgressStatus_MaxValue()

class Base_ProgressStatus_Observer(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == Base_ProgressStatus_Observer:
            _self = None
        else:
            _self = self
        _CadExCore.Base_ProgressStatus_Observer_swiginit(self, _CadExCore.new_Base_ProgressStatus_Observer(_self, *args))
    __swig_destroy__ = _CadExCore.delete_Base_ProgressStatus_Observer

    @abstractmethod
    def ChangedValue(self, theStatus: "Base_ProgressStatus") -> "void":
        return _CadExCore.Base_ProgressStatus_Observer_ChangedValue(self, theStatus)

    @abstractmethod
    def Completed(self, theStatus: "Base_ProgressStatus") -> "void":
        return _CadExCore.Base_ProgressStatus_Observer_Completed(self, theStatus)

    def Canceled(self, theStatus: "Base_ProgressStatus") -> "void":
        return _CadExCore.Base_ProgressStatus_Observer_Canceled(self, theStatus)

    def SetNotifyingThread(self, *args) -> "void":
        return _CadExCore.Base_ProgressStatus_Observer_SetNotifyingThread(self, *args)

    def SetAllNotifyingThreads(self) -> "void":
        return _CadExCore.Base_ProgressStatus_Observer_SetAllNotifyingThreads(self)

    def CanBeNotifiedFromThisThread(self) -> "bool":
        return _CadExCore.Base_ProgressStatus_Observer_CanBeNotifiedFromThisThread(self)
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_Base_ProgressStatus_Observer(self)
        return weakref.proxy(self)

# Register Base_ProgressStatus_Observer in _CadExCore:
_CadExCore.Base_ProgressStatus_Observer_swigregister(Base_ProgressStatus_Observer)

class Base_ProgressStatus_CancellationChecker(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_Base_ProgressStatus_CancellationChecker

    @abstractmethod
    def Visit(self) -> "bool":
        return _CadExCore.Base_ProgressStatus_CancellationChecker_Visit(self)

    def __init__(self):
        if self.__class__ == Base_ProgressStatus_CancellationChecker:
            _self = None
        else:
            _self = self
        _CadExCore.Base_ProgressStatus_CancellationChecker_swiginit(self, _CadExCore.new_Base_ProgressStatus_CancellationChecker(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_Base_ProgressStatus_CancellationChecker(self)
        return weakref.proxy(self)

# Register Base_ProgressStatus_CancellationChecker in _CadExCore:
_CadExCore.Base_ProgressStatus_CancellationChecker_swigregister(Base_ProgressStatus_CancellationChecker)

class Base_ProgressScope(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.Base_ProgressScope_swiginit(self, _CadExCore.new_Base_ProgressScope(*args))
    __swig_destroy__ = _CadExCore.delete_Base_ProgressScope

    def Value(self) -> "cadex::Base_ProgressScope::value_type":
        return _CadExCore.Base_ProgressScope_Value(self)

    def SetRange(self, theMin: "cadex::Base_ProgressScope::value_type", theMax: "cadex::Base_ProgressScope::value_type") -> "void":
        return _CadExCore.Base_ProgressScope_SetRange(self, theMin, theMax)

    def MinValue(self) -> "cadex::Base_ProgressScope::value_type":
        return _CadExCore.Base_ProgressScope_MinValue(self)

    def MaxValue(self) -> "cadex::Base_ProgressScope::value_type":
        return _CadExCore.Base_ProgressScope_MaxValue(self)

    def Owner(self) -> "cadex::Base_ProgressStatus":
        return _CadExCore.Base_ProgressScope_Owner(self)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if(exc_value):
            print('exit exception text: ', exc_value)
        Base_ProgressScope._close(self)
        return True

    @staticmethod
    def _close(obj):
        _CadExCore.delete_Base_ProgressScope(obj)


# Register Base_ProgressScope in _CadExCore:
_CadExCore.Base_ProgressScope_swigregister(Base_ProgressScope)

class Base_PublicObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_Base_PublicObject

    def Nullify(self) -> "void":
        return _CadExCore.Base_PublicObject_Nullify(self)

    def IsNull(self) -> "bool":
        return _CadExCore.Base_PublicObject_IsNull(self)

    def IsEqual(self, theObject: "Base_PublicObject") -> "bool":
        return _CadExCore.Base_PublicObject_IsEqual(self, theObject)

    def IsNotEqual(self, theObject: "Base_PublicObject") -> "bool":
        return _CadExCore.Base_PublicObject_IsNotEqual(self, theObject)

    def __hash__(self):
        aHasher = Base_PublicObjectHash()
        return int(aHasher(self))


    def __eq__(self, other):
        if id(other) == id(self):
            return True;
        if isinstance(other, Base_PublicObject):
            return self.IsEqual(other);
        return False;


# Register Base_PublicObject in _CadExCore:
_CadExCore.Base_PublicObject_swigregister(Base_PublicObject)

class initialized(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.initialized_swiginit(self, _CadExCore.new_initialized())
    __swig_destroy__ = _CadExCore.delete_initialized

# Register initialized in _CadExCore:
_CadExCore.initialized_swigregister(initialized)

class Base_PublicObjectHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theObject: "Base_PublicObject") -> "size_t":
        return _CadExCore.Base_PublicObjectHash___call__(self, theObject)

    def __init__(self):
        _CadExCore.Base_PublicObjectHash_swiginit(self, _CadExCore.new_Base_PublicObjectHash())
    __swig_destroy__ = _CadExCore.delete_Base_PublicObjectHash

# Register Base_PublicObjectHash in _CadExCore:
_CadExCore.Base_PublicObjectHash_swigregister(Base_PublicObjectHash)

class Base_Settings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ConcurrentMode = _CadExCore.Base_Settings_ConcurrentMode
    Common_ConcurrentMode = _CadExCore.Base_Settings_Common_ConcurrentMode
    UseExceptions = _CadExCore.Base_Settings_UseExceptions
    SubprocessMode = _CadExCore.Base_Settings_SubprocessMode
    UserDefined = _CadExCore.Base_Settings_UserDefined

    @staticmethod
    def Default() -> "std::shared_ptr< cadex::Base_Settings > const &":
        return _CadExCore.Base_Settings_Default()

    def IntValue(self, theId: "cadex::Base_Settings::Id const", theDefaultVal: "int") -> "int":
        return _CadExCore.Base_Settings_IntValue(self, theId, theDefaultVal)

    def DoubleValue(self, theId: "cadex::Base_Settings::Id const", theDefaultVal: "double") -> "double":
        return _CadExCore.Base_Settings_DoubleValue(self, theId, theDefaultVal)

    def BoolValue(self, theId: "cadex::Base_Settings::Id const", theDefaultVal: "bool") -> "bool":
        return _CadExCore.Base_Settings_BoolValue(self, theId, theDefaultVal)

    def SharedImpl(self) -> "std::shared_ptr< cadex::internal::Base_SettingsImpl > const &":
        return _CadExCore.Base_Settings_SharedImpl(self)

    def SetValue(self, *args) -> "void":
        return _CadExCore.Base_Settings_SetValue(self, *args)

    def StringValue(self, theId: "cadex::Base_Settings::Id const", theDefaultValue: "Base_UTF16String") -> "cadex::Base_UTF16String":
        return _CadExCore.Base_Settings_StringValue(self, theId, theDefaultValue)
    __swig_destroy__ = _CadExCore.delete_Base_Settings

# Register Base_Settings in _CadExCore:
_CadExCore.Base_Settings_swigregister(Base_Settings)

def Base_Settings_Default() -> "std::shared_ptr< cadex::Base_Settings > const &":
    return _CadExCore.Base_Settings_Default()

class Base_UTF16String(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.Base_UTF16String_swiginit(self, _CadExCore.new_Base_UTF16String(*args))
    __swig_destroy__ = _CadExCore.delete_Base_UTF16String

    def Data(self) -> "cadex::UTF16 const *":
        return _CadExCore.Base_UTF16String_Data(self)

    def Clear(self) -> "void":
        return _CadExCore.Base_UTF16String_Clear(self)

    def IsEqual(self, theOther: "Base_UTF16String") -> "bool":
        return _CadExCore.Base_UTF16String_IsEqual(self, theOther)

    def IsNotEqual(self, theOther: "Base_UTF16String") -> "bool":
        return _CadExCore.Base_UTF16String_IsNotEqual(self, theOther)

    def Length(self) -> "size_t":
        return _CadExCore.Base_UTF16String_Length(self)

    def IsEmpty(self) -> "bool":
        return _CadExCore.Base_UTF16String_IsEmpty(self)

    def __hash__(self):
        aHasher = Base_UTF16StringHash()
        return int(aHasher(self))


    def __str__(self) -> "PyObject *":
        return _CadExCore.Base_UTF16String___str__(self)

    def __bool__(self) -> "bool const":
        return _CadExCore.Base_UTF16String___bool__(self)

    def __eq__(self, other):
        if id(other) == id(self):
            return True
        if isinstance(other, Base_UTF16String):
            return self.IsEqual(other)
        if isinstance(other, str):
            return str(self) == other
        return False


# Register Base_UTF16String in _CadExCore:
_CadExCore.Base_UTF16String_swigregister(Base_UTF16String)

class Base_UTF16StringHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theValue: "Base_UTF16String") -> "size_t":
        return _CadExCore.Base_UTF16StringHash___call__(self, theValue)

    def __init__(self):
        _CadExCore.Base_UTF16StringHash_swiginit(self, _CadExCore.new_Base_UTF16StringHash())
    __swig_destroy__ = _CadExCore.delete_Base_UTF16StringHash

# Register Base_UTF16StringHash in _CadExCore:
_CadExCore.Base_UTF16StringHash_swigregister(Base_UTF16StringHash)

class Base_Uuid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsNull(self) -> "bool":
        return _CadExCore.Base_Uuid_IsNull(self)

    def Value(self, theIndex: "size_t") -> "cadex::Base_Uuid::ValueType":
        return _CadExCore.Base_Uuid_Value(self, theIndex)
    __swig_destroy__ = _CadExCore.delete_Base_Uuid

# Register Base_Uuid in _CadExCore:
_CadExCore.Base_Uuid_swigregister(Base_Uuid)

def _Base_Uuid(*args):
    val = _CadExCore.new__Base_Uuid(*args)
    return val

class Base_MeshAlgoFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsNull(self) -> "bool":
        return _CadExCore.Base_MeshAlgoFactory_IsNull(self)
    __swig_destroy__ = _CadExCore.delete_Base_MeshAlgoFactory

# Register Base_MeshAlgoFactory in _CadExCore:
_CadExCore.Base_MeshAlgoFactory_swigregister(Base_MeshAlgoFactory)

class BaseError_MissingFile(Base_Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.BaseError_MissingFile_swiginit(self, _CadExCore.new_BaseError_MissingFile())
    __swig_destroy__ = _CadExCore.delete_BaseError_MissingFile

# Register BaseError_MissingFile in _CadExCore:
_CadExCore.BaseError_MissingFile_swigregister(BaseError_MissingFile)

class BaseError_MissingModel(Base_Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.BaseError_MissingModel_swiginit(self, _CadExCore.new_BaseError_MissingModel())
    __swig_destroy__ = _CadExCore.delete_BaseError_MissingModel

# Register BaseError_MissingModel in _CadExCore:
_CadExCore.BaseError_MissingModel_swigregister(BaseError_MissingModel)

class BaseError_MissingModule(Base_Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theMessage: "Base_UTF16String"):
        _CadExCore.BaseError_MissingModule_swiginit(self, _CadExCore.new_BaseError_MissingModule(theMessage))
    __swig_destroy__ = _CadExCore.delete_BaseError_MissingModule

# Register BaseError_MissingModule in _CadExCore:
_CadExCore.BaseError_MissingModule_swigregister(BaseError_MissingModule)

class BaseError_UnexpectedFormat(Base_Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theFormatName: "Base_UTF16String"):
        _CadExCore.BaseError_UnexpectedFormat_swiginit(self, _CadExCore.new_BaseError_UnexpectedFormat(theFormatName))

    def FormatName(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.BaseError_UnexpectedFormat_FormatName(self)
    __swig_destroy__ = _CadExCore.delete_BaseError_UnexpectedFormat

# Register BaseError_UnexpectedFormat in _CadExCore:
_CadExCore.BaseError_UnexpectedFormat_swigregister(BaseError_UnexpectedFormat)

class BaseError_UnexpectedProcessExit(Base_Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theExitCode: "int"):
        _CadExCore.BaseError_UnexpectedProcessExit_swiginit(self, _CadExCore.new_BaseError_UnexpectedProcessExit(theExitCode))

    def ExitCode(self) -> "int":
        return _CadExCore.BaseError_UnexpectedProcessExit_ExitCode(self)
    __swig_destroy__ = _CadExCore.delete_BaseError_UnexpectedProcessExit

# Register BaseError_UnexpectedProcessExit in _CadExCore:
_CadExCore.BaseError_UnexpectedProcessExit_swigregister(BaseError_UnexpectedProcessExit)

class BaseError_UnsupportedVersion(Base_Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.BaseError_UnsupportedVersion_swiginit(self, _CadExCore.new_BaseError_UnsupportedVersion(*args))

    def FileVersion(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.BaseError_UnsupportedVersion_FileVersion(self)

    def MinSupportedVersion(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.BaseError_UnsupportedVersion_MinSupportedVersion(self)

    def MaxSupportedVersion(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.BaseError_UnsupportedVersion_MaxSupportedVersion(self)
    __swig_destroy__ = _CadExCore.delete_BaseError_UnsupportedVersion

# Register BaseError_UnsupportedVersion in _CadExCore:
_CadExCore.BaseError_UnsupportedVersion_swigregister(BaseError_UnsupportedVersion)

class BaseError_UnsupportedFileVariant(Base_Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theSupportedVariants: "Base_UTF16String", theFileVariant: "Base_UTF16String"):
        _CadExCore.BaseError_UnsupportedFileVariant_swiginit(self, _CadExCore.new_BaseError_UnsupportedFileVariant(theSupportedVariants, theFileVariant))

    def SupportedVariants(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.BaseError_UnsupportedFileVariant_SupportedVariants(self)

    def FileVariant(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.BaseError_UnsupportedFileVariant_FileVariant(self)
    __swig_destroy__ = _CadExCore.delete_BaseError_UnsupportedFileVariant

# Register BaseError_UnsupportedFileVariant in _CadExCore:
_CadExCore.BaseError_UnsupportedFileVariant_swigregister(BaseError_UnsupportedFileVariant)

class Base_ReaderParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DelayedConversion(self, *args) -> "bool &":
        return _CadExCore.Base_ReaderParameters_DelayedConversion(self, *args)

    def ReadPMI(self, *args) -> "bool &":
        return _CadExCore.Base_ReaderParameters_ReadPMI(self, *args)

    def SaveExternalReferencePaths(self, *args) -> "bool &":
        return _CadExCore.Base_ReaderParameters_SaveExternalReferencePaths(self, *args)

    def SetLengthUnit(self, LengthUnit: "cadex::Base_LengthUnit") -> "void":
        return _CadExCore.Base_ReaderParameters_SetLengthUnit(self, LengthUnit)

    def ReadDrawing(self, *args) -> "bool &":
        return _CadExCore.Base_ReaderParameters_ReadDrawing(self, *args)

    def SetDelayedConversion(self, theDC: "bool") -> "void":
        return _CadExCore.Base_ReaderParameters_SetDelayedConversion(self, theDC)

    def SetReadPMI(self, theReadPMI: "bool") -> "void":
        return _CadExCore.Base_ReaderParameters_SetReadPMI(self, theReadPMI)

    def SetSaveExternalReferencePaths(self, theSaveExternalReferencePaths: "bool") -> "void":
        return _CadExCore.Base_ReaderParameters_SetSaveExternalReferencePaths(self, theSaveExternalReferencePaths)

    def SetReadDrawing(self, theReadDrawing: "bool") -> "void":
        return _CadExCore.Base_ReaderParameters_SetReadDrawing(self, theReadDrawing)
    __swig_destroy__ = _CadExCore.delete_Base_ReaderParameters

# Register Base_ReaderParameters in _CadExCore:
_CadExCore.Base_ReaderParameters_swigregister(Base_ReaderParameters)

ModelData_RM_BRep = _CadExCore.ModelData_RM_BRep
ModelData_RM_CoarseLOD = _CadExCore.ModelData_RM_CoarseLOD
ModelData_RM_MediumLOD = _CadExCore.ModelData_RM_MediumLOD
ModelData_RM_FineLOD = _CadExCore.ModelData_RM_FineLOD
ModelData_RM_Poly = _CadExCore.ModelData_RM_Poly
ModelData_RM_Any = _CadExCore.ModelData_RM_Any
class ModelData_RepresentationSelector(ABC, Base_NoAssignment):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Mask = _CadExCore.ModelData_RepresentationSelector_Mask
    Name = _CadExCore.ModelData_RepresentationSelector_Name
    __swig_destroy__ = _CadExCore.delete_ModelData_RepresentationSelector

    @abstractmethod
    def IsEqual(self, theOther: "ModelData_RepresentationSelector") -> "bool":
        return _CadExCore.ModelData_RepresentationSelector_IsEqual(self, theOther)

    def SelectorType(self, *args) -> "cadex::ModelData_RepresentationSelector::Type &":
        return _CadExCore.ModelData_RepresentationSelector_SelectorType(self, *args)

    def __init__(self, theType: "cadex::ModelData_RepresentationSelector::Type const"):
        if self.__class__ == ModelData_RepresentationSelector:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_RepresentationSelector_swiginit(self, _CadExCore.new_ModelData_RepresentationSelector(_self, theType))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_RepresentationSelector(self)
        return weakref.proxy(self)

# Register ModelData_RepresentationSelector in _CadExCore:
_CadExCore.ModelData_RepresentationSelector_swigregister(ModelData_RepresentationSelector)

class ModelData_RepresentationMaskSelector(ModelData_RepresentationSelector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == ModelData_RepresentationMaskSelector:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_RepresentationMaskSelector_swiginit(self, _CadExCore.new_ModelData_RepresentationMaskSelector(_self, *args))

    def IsEqual(self, theOther: "ModelData_RepresentationSelector") -> "bool":
        return _CadExCore.ModelData_RepresentationMaskSelector_IsEqual(self, theOther)

    def Mask(self, *args) -> "cadex::ModelData_RepresentationMask &":
        return _CadExCore.ModelData_RepresentationMaskSelector_Mask(self, *args)
    __swig_destroy__ = _CadExCore.delete_ModelData_RepresentationMaskSelector
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_RepresentationMaskSelector(self)
        return weakref.proxy(self)

# Register ModelData_RepresentationMaskSelector in _CadExCore:
_CadExCore.ModelData_RepresentationMaskSelector_swigregister(ModelData_RepresentationMaskSelector)

class ModelData_RepresentationNameSelector(ModelData_RepresentationSelector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theName: "Base_UTF16String"):
        if self.__class__ == ModelData_RepresentationNameSelector:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_RepresentationNameSelector_swiginit(self, _CadExCore.new_ModelData_RepresentationNameSelector(_self, theName))

    def IsEqual(self, theOther: "ModelData_RepresentationSelector") -> "bool":
        return _CadExCore.ModelData_RepresentationNameSelector_IsEqual(self, theOther)

    def Name(self, *args) -> "cadex::Base_UTF16String &":
        return _CadExCore.ModelData_RepresentationNameSelector_Name(self, *args)
    __swig_destroy__ = _CadExCore.delete_ModelData_RepresentationNameSelector
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_RepresentationNameSelector(self)
        return weakref.proxy(self)

# Register ModelData_RepresentationNameSelector in _CadExCore:
_CadExCore.ModelData_RepresentationNameSelector_swigregister(ModelData_RepresentationNameSelector)

class Base_ImportError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Message(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.Base_ImportError_Message(self)

    def Context(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.Base_ImportError_Context(self)
    __swig_destroy__ = _CadExCore.delete_Base_ImportError

# Register Base_ImportError in _CadExCore:
_CadExCore.Base_ImportError_swigregister(Base_ImportError)

class Base_WriterParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def WriteBRepRepresentation(self) -> "bool":
        return _CadExCore.Base_WriterParameters_WriteBRepRepresentation(self)

    def WritePolyRepresentation(self) -> "bool":
        return _CadExCore.Base_WriterParameters_WritePolyRepresentation(self)

    def WriteTextures(self) -> "bool":
        return _CadExCore.Base_WriterParameters_WriteTextures(self)

    def WritePMI(self) -> "bool":
        return _CadExCore.Base_WriterParameters_WritePMI(self)

    def LengthUnit(self) -> "cadex::Base_LengthUnit":
        return _CadExCore.Base_WriterParameters_LengthUnit(self)

    def PreferredLOD(self) -> "cadex::ModelData_RepresentationMask":
        return _CadExCore.Base_WriterParameters_PreferredLOD(self)

    def Author(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.Base_WriterParameters_Author(self)

    def Organization(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.Base_WriterParameters_Organization(self)

    def OriginatingSystem(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.Base_WriterParameters_OriginatingSystem(self)

    def UseOYAsUpAxis(self) -> "bool":
        return _CadExCore.Base_WriterParameters_UseOYAsUpAxis(self)

    def SetWriteBRepRepresentation(self, theWriteBRepRepresentation: "bool") -> "void":
        return _CadExCore.Base_WriterParameters_SetWriteBRepRepresentation(self, theWriteBRepRepresentation)

    def SetWritePMI(self, theWritePMI: "bool") -> "void":
        return _CadExCore.Base_WriterParameters_SetWritePMI(self, theWritePMI)

    def SetWritePolyRepresentation(self, theWritePolyRepresentation: "bool") -> "void":
        return _CadExCore.Base_WriterParameters_SetWritePolyRepresentation(self, theWritePolyRepresentation)

    def SetWriteTextures(self, theWriteTextures: "bool") -> "void":
        return _CadExCore.Base_WriterParameters_SetWriteTextures(self, theWriteTextures)

    def SetUseOYAsUpAxis(self, theUseOYAsUpAxis: "bool") -> "void":
        return _CadExCore.Base_WriterParameters_SetUseOYAsUpAxis(self, theUseOYAsUpAxis)

    def SetLengthUnit(self, theLengthUnit: "cadex::Base_LengthUnit") -> "void":
        return _CadExCore.Base_WriterParameters_SetLengthUnit(self, theLengthUnit)

    def SetPreferredLOD(self, thePreferredLOD: "cadex::ModelData_RepresentationMask") -> "void":
        return _CadExCore.Base_WriterParameters_SetPreferredLOD(self, thePreferredLOD)

    def SetAuthor(self, theAuthor: "Base_UTF16String") -> "void":
        return _CadExCore.Base_WriterParameters_SetAuthor(self, theAuthor)

    def SetOrganization(self, theOrganization: "Base_UTF16String") -> "void":
        return _CadExCore.Base_WriterParameters_SetOrganization(self, theOrganization)

    def SetOriginatingSystem(self, theOriginatingSystem: "Base_UTF16String") -> "void":
        return _CadExCore.Base_WriterParameters_SetOriginatingSystem(self, theOriginatingSystem)
    __swig_destroy__ = _CadExCore.delete_Base_WriterParameters

# Register Base_WriterParameters in _CadExCore:
_CadExCore.Base_WriterParameters_swigregister(Base_WriterParameters)

class Base_ReaderStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.Base_ReaderStatistics_swiginit(self, _CadExCore.new_Base_ReaderStatistics())

    def GetErrorIterator(self):
        return Base_ReaderStatistics_ErrorIterator(self)

    __swig_destroy__ = _CadExCore.delete_Base_ReaderStatistics

# Register Base_ReaderStatistics in _CadExCore:
_CadExCore.Base_ReaderStatistics_swigregister(Base_ReaderStatistics)

class Base_ReaderStatistics_ErrorIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theStatistics: "Base_ReaderStatistics"):
        _CadExCore.Base_ReaderStatistics_ErrorIterator_swiginit(self, _CadExCore.new_Base_ReaderStatistics_ErrorIterator(theStatistics))

    def HasNext(self) -> "bool":
        return _CadExCore.Base_ReaderStatistics_ErrorIterator_HasNext(self)

    def Next(self) -> "cadex::Base_ImportError const &":
        return _CadExCore.Base_ReaderStatistics_ErrorIterator_Next(self)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_Base_ReaderStatistics_ErrorIterator

# Register Base_ReaderStatistics_ErrorIterator in _CadExCore:
_CadExCore.Base_ReaderStatistics_ErrorIterator_swigregister(Base_ReaderStatistics_ErrorIterator)

class MissingExternalReferencesIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theReaderStats: "Base_ReaderStatistics"):
        _CadExCore.MissingExternalReferencesIterator_swiginit(self, _CadExCore.new_MissingExternalReferencesIterator(theReaderStats))

    def HasNext(self) -> "bool":
        return _CadExCore.MissingExternalReferencesIterator_HasNext(self)

    def Next(self) -> "cadex::Base_MissingExternalReference":
        return _CadExCore.MissingExternalReferencesIterator_Next(self)
    __swig_destroy__ = _CadExCore.delete_MissingExternalReferencesIterator

# Register MissingExternalReferencesIterator in _CadExCore:
_CadExCore.MissingExternalReferencesIterator_swigregister(MissingExternalReferencesIterator)

class Base_WriterStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetErrorIterator(self):
        return Base_WriterStatistics_ErrorIterator(self)

    __swig_destroy__ = _CadExCore.delete_Base_WriterStatistics

# Register Base_WriterStatistics in _CadExCore:
_CadExCore.Base_WriterStatistics_swigregister(Base_WriterStatistics)

class Base_WriterStatistics_ErrorIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theStatistics: "Base_WriterStatistics"):
        _CadExCore.Base_WriterStatistics_ErrorIterator_swiginit(self, _CadExCore.new_Base_WriterStatistics_ErrorIterator(theStatistics))

    def HasNext(self) -> "bool":
        return _CadExCore.Base_WriterStatistics_ErrorIterator_HasNext(self)

    def Next(self) -> "cadex::Base_ExportError const &":
        return _CadExCore.Base_WriterStatistics_ErrorIterator_Next(self)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_Base_WriterStatistics_ErrorIterator

# Register Base_WriterStatistics_ErrorIterator in _CadExCore:
_CadExCore.Base_WriterStatistics_ErrorIterator_swigregister(Base_WriterStatistics_ErrorIterator)

class Base_Reader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_Base_Reader

    def ReadFile(self, theFileName: "Base_UTF16String") -> "bool":
        return _CadExCore.Base_Reader_ReadFile(self, theFileName)

    def Transfer(self, theModel: "ModelData_Model") -> "bool":
        return _CadExCore.Base_Reader_Transfer(self, theModel)

    def TransferBIM(self, theModel: "ModelData_BIMModel") -> "bool":
        return _CadExCore.Base_Reader_TransferBIM(self, theModel)

    def Statistics(self) -> "cadex::Base_ReaderStatistics":
        return _CadExCore.Base_Reader_Statistics(self)

    def SetProgressStatus(self, theProgressStatus: "Base_ProgressStatus") -> "void":
        return _CadExCore.Base_Reader_SetProgressStatus(self, theProgressStatus)

# Register Base_Reader in _CadExCore:
_CadExCore.Base_Reader_swigregister(Base_Reader)

class Base_Writer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_Base_Writer

    def Transfer(self, theModel: "ModelData_Model") -> "bool":
        return _CadExCore.Base_Writer_Transfer(self, theModel)

    def WriteFile(self, theFileName: "Base_UTF16String") -> "bool":
        return _CadExCore.Base_Writer_WriteFile(self, theFileName)

    def Statistics(self) -> "cadex::Base_WriterStatistics":
        return _CadExCore.Base_Writer_Statistics(self)

    def SetProgressStatus(self, theProgressStatus: "Base_ProgressStatus") -> "void":
        return _CadExCore.Base_Writer_SetProgressStatus(self, theProgressStatus)

# Register Base_Writer in _CadExCore:
_CadExCore.Base_Writer_swigregister(Base_Writer)

class ModelData_Directiond2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Directiond2d_swiginit(self, _CadExCore.new_ModelData_Directiond2d(*args))

    def Access(self, *args) -> "cadex::internal::ModelData_BaseDirection2d< double >::ValueType &":
        return _CadExCore.ModelData_Directiond2d_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BaseDirection2d< double >::ValueType &":
        return _CadExCore.ModelData_Directiond2d_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BaseDirection2d< double >::ValueType &":
        return _CadExCore.ModelData_Directiond2d_Y(self, *args)

    def Reverse(self) -> "void":
        return _CadExCore.ModelData_Directiond2d_Reverse(self)

    def Reversed(self) -> "cadex::internal::ModelData_BaseDirection2d< double >":
        return _CadExCore.ModelData_Directiond2d_Reversed(self)

    def IsParallel(self, theOther: "ModelData_Directiond2d", theTolerance: "cadex::internal::ModelData_BaseDirection2d< double >::ValueType") -> "bool":
        return _CadExCore.ModelData_Directiond2d_IsParallel(self, theOther, theTolerance)

    def SetX(self, theX: "double") -> "void":
        return _CadExCore.ModelData_Directiond2d_SetX(self, theX)

    def SetY(self, theY: "double") -> "void":
        return _CadExCore.ModelData_Directiond2d_SetY(self, theY)
    __swig_destroy__ = _CadExCore.delete_ModelData_Directiond2d

# Register ModelData_Directiond2d in _CadExCore:
_CadExCore.ModelData_Directiond2d_swigregister(ModelData_Directiond2d)

class ModelData_Directionf2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Directionf2d_swiginit(self, _CadExCore.new_ModelData_Directionf2d(*args))

    def Access(self, *args) -> "cadex::internal::ModelData_BaseDirection2d< float >::ValueType &":
        return _CadExCore.ModelData_Directionf2d_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BaseDirection2d< float >::ValueType &":
        return _CadExCore.ModelData_Directionf2d_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BaseDirection2d< float >::ValueType &":
        return _CadExCore.ModelData_Directionf2d_Y(self, *args)

    def Reverse(self) -> "void":
        return _CadExCore.ModelData_Directionf2d_Reverse(self)

    def Reversed(self) -> "cadex::internal::ModelData_BaseDirection2d< float >":
        return _CadExCore.ModelData_Directionf2d_Reversed(self)

    def IsParallel(self, theOther: "ModelData_Directionf2d", theTolerance: "cadex::internal::ModelData_BaseDirection2d< float >::ValueType") -> "bool":
        return _CadExCore.ModelData_Directionf2d_IsParallel(self, theOther, theTolerance)

    def SetX(self, theX: "float") -> "void":
        return _CadExCore.ModelData_Directionf2d_SetX(self, theX)

    def SetY(self, theY: "float") -> "void":
        return _CadExCore.ModelData_Directionf2d_SetY(self, theY)
    __swig_destroy__ = _CadExCore.delete_ModelData_Directionf2d

# Register ModelData_Directionf2d in _CadExCore:
_CadExCore.ModelData_Directionf2d_swigregister(ModelData_Directionf2d)

class ModelData_Direction2d(ModelData_Directiond2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Direction2d_swiginit(self, _CadExCore.new_ModelData_Direction2d(*args))

    def Transform(self, theTransformation: "ModelData_Transformation2d") -> "void":
        return _CadExCore.ModelData_Direction2d_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation2d") -> "cadex::ModelData_Direction2d":
        return _CadExCore.ModelData_Direction2d_Transformed(self, theTransformation)

    @staticmethod
    def XDir() -> "cadex::ModelData_Direction2d const &":
        return _CadExCore.ModelData_Direction2d_XDir()

    @staticmethod
    def YDir() -> "cadex::ModelData_Direction2d const &":
        return _CadExCore.ModelData_Direction2d_YDir()
    __swig_destroy__ = _CadExCore.delete_ModelData_Direction2d

# Register ModelData_Direction2d in _CadExCore:
_CadExCore.ModelData_Direction2d_swigregister(ModelData_Direction2d)

def ModelData_Direction2d_XDir() -> "cadex::ModelData_Direction2d const &":
    return _CadExCore.ModelData_Direction2d_XDir()

def ModelData_Direction2d_YDir() -> "cadex::ModelData_Direction2d const &":
    return _CadExCore.ModelData_Direction2d_YDir()

class ModelData_Directiond(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Directiond_swiginit(self, _CadExCore.new_ModelData_Directiond(*args))

    def Access(self, *args) -> "cadex::internal::ModelData_BaseDirection< double >::ValueType &":
        return _CadExCore.ModelData_Directiond_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BaseDirection< double >::ValueType &":
        return _CadExCore.ModelData_Directiond_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BaseDirection< double >::ValueType &":
        return _CadExCore.ModelData_Directiond_Y(self, *args)

    def Z(self, *args) -> "cadex::internal::ModelData_BaseDirection< double >::ValueType &":
        return _CadExCore.ModelData_Directiond_Z(self, *args)

    def Reverse(self) -> "void":
        return _CadExCore.ModelData_Directiond_Reverse(self)

    def Reversed(self) -> "cadex::internal::ModelData_BaseDirection< double >":
        return _CadExCore.ModelData_Directiond_Reversed(self)

    def IsParallel(self, theOther: "ModelData_Directiond", theTolerance: "cadex::internal::ModelData_BaseDirection< double >::ValueType") -> "bool":
        return _CadExCore.ModelData_Directiond_IsParallel(self, theOther, theTolerance)

    def SetX(self, theX: "double") -> "void":
        return _CadExCore.ModelData_Directiond_SetX(self, theX)

    def SetY(self, theY: "double") -> "void":
        return _CadExCore.ModelData_Directiond_SetY(self, theY)

    def SetZ(self, theZ: "double") -> "void":
        return _CadExCore.ModelData_Directiond_SetZ(self, theZ)
    __swig_destroy__ = _CadExCore.delete_ModelData_Directiond

# Register ModelData_Directiond in _CadExCore:
_CadExCore.ModelData_Directiond_swigregister(ModelData_Directiond)

class ModelData_Directionf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Directionf_swiginit(self, _CadExCore.new_ModelData_Directionf(*args))

    def Access(self, *args) -> "cadex::internal::ModelData_BaseDirection< float >::ValueType &":
        return _CadExCore.ModelData_Directionf_Access(self, *args)

    def X(self, *args) -> "cadex::internal::ModelData_BaseDirection< float >::ValueType &":
        return _CadExCore.ModelData_Directionf_X(self, *args)

    def Y(self, *args) -> "cadex::internal::ModelData_BaseDirection< float >::ValueType &":
        return _CadExCore.ModelData_Directionf_Y(self, *args)

    def Z(self, *args) -> "cadex::internal::ModelData_BaseDirection< float >::ValueType &":
        return _CadExCore.ModelData_Directionf_Z(self, *args)

    def Reverse(self) -> "void":
        return _CadExCore.ModelData_Directionf_Reverse(self)

    def Reversed(self) -> "cadex::internal::ModelData_BaseDirection< float >":
        return _CadExCore.ModelData_Directionf_Reversed(self)

    def IsParallel(self, theOther: "ModelData_Directionf", theTolerance: "cadex::internal::ModelData_BaseDirection< float >::ValueType") -> "bool":
        return _CadExCore.ModelData_Directionf_IsParallel(self, theOther, theTolerance)

    def SetX(self, theX: "float") -> "void":
        return _CadExCore.ModelData_Directionf_SetX(self, theX)

    def SetY(self, theY: "float") -> "void":
        return _CadExCore.ModelData_Directionf_SetY(self, theY)

    def SetZ(self, theZ: "float") -> "void":
        return _CadExCore.ModelData_Directionf_SetZ(self, theZ)
    __swig_destroy__ = _CadExCore.delete_ModelData_Directionf

# Register ModelData_Directionf in _CadExCore:
_CadExCore.ModelData_Directionf_swigregister(ModelData_Directionf)

class ModelData_Direction(ModelData_Directiond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Direction_swiginit(self, _CadExCore.new_ModelData_Direction(*args))

    def Transform(self, theTransformation: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Direction_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation") -> "cadex::ModelData_Direction":
        return _CadExCore.ModelData_Direction_Transformed(self, theTransformation)

    @staticmethod
    def XDir() -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_Direction_XDir()

    @staticmethod
    def YDir() -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_Direction_YDir()

    @staticmethod
    def ZDir() -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_Direction_ZDir()
    __swig_destroy__ = _CadExCore.delete_ModelData_Direction

# Register ModelData_Direction in _CadExCore:
_CadExCore.ModelData_Direction_swigregister(ModelData_Direction)

def ModelData_Direction_XDir() -> "cadex::ModelData_Direction const &":
    return _CadExCore.ModelData_Direction_XDir()

def ModelData_Direction_YDir() -> "cadex::ModelData_Direction const &":
    return _CadExCore.ModelData_Direction_YDir()

def ModelData_Direction_ZDir() -> "cadex::ModelData_Direction const &":
    return _CadExCore.ModelData_Direction_ZDir()

class ModelData_BIMElement(Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_BIMElement_swiginit(self, _CadExCore.new_ModelData_BIMElement())

    def Properties(self) -> "cadex::ModelData_BIMPropertyLibrary":
        return _CadExCore.ModelData_BIMElement_Properties(self)

    def Accept(self, theVisitor: "ModelData_BIMElementVisitor") -> "void":
        return _CadExCore.ModelData_BIMElement_Accept(self, theVisitor)

    def Name(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_BIMElement_Name(self)

    def SetName(self, theName: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_BIMElement_SetName(self, theName)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMElement

# Register ModelData_BIMElement in _CadExCore:
_CadExCore.ModelData_BIMElement_swigregister(ModelData_BIMElement)

class ModelData_BIMGeometryElement(ModelData_BIMElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_BIMGeometryElement_swiginit(self, _CadExCore.new_ModelData_BIMGeometryElement())

    def Geometry(self) -> "cadex::ModelData_Model":
        return _CadExCore.ModelData_BIMGeometryElement_Geometry(self)

    def SetGeometry(self, theGeometry: "ModelData_Model") -> "void":
        return _CadExCore.ModelData_BIMGeometryElement_SetGeometry(self, theGeometry)

    def Transformation(self) -> "cadex::ModelData_Transformation":
        return _CadExCore.ModelData_BIMGeometryElement_Transformation(self)

    def SetTransformation(self, theTransformation: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_BIMGeometryElement_SetTransformation(self, theTransformation)

    def Material(self) -> "cadex::ModelData_BIMMaterial":
        return _CadExCore.ModelData_BIMGeometryElement_Material(self)

    def SetMaterial(self, theMaterial: "ModelData_BIMMaterial") -> "void":
        return _CadExCore.ModelData_BIMGeometryElement_SetMaterial(self, theMaterial)

    def Prototype(self) -> "cadex::ModelData_BIMGeometryElement":
        return _CadExCore.ModelData_BIMGeometryElement_Prototype(self)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMGeometryElement_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMGeometryElement

# Register ModelData_BIMGeometryElement in _CadExCore:
_CadExCore.ModelData_BIMGeometryElement_swigregister(ModelData_BIMGeometryElement)

def ModelData_BIMGeometryElement_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMGeometryElement_CompareType(theElement)

class ModelData_BIMConstructionElement(ModelData_BIMGeometryElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_BIMConstructionElement_swiginit(self, _CadExCore.new_ModelData_BIMConstructionElement())

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMConstructionElement_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMConstructionElement

# Register ModelData_BIMConstructionElement in _CadExCore:
_CadExCore.ModelData_BIMConstructionElement_swigregister(ModelData_BIMConstructionElement)

def ModelData_BIMConstructionElement_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMConstructionElement_CompareType(theElement)

class ModelData_BIMHostElement(ModelData_BIMElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_BIMHostElement_swiginit(self, _CadExCore.new_ModelData_BIMHostElement())

    def NumberOfElements(self) -> "size_t":
        return _CadExCore.ModelData_BIMHostElement_NumberOfElements(self)

    def AddElement(self, theElement: "ModelData_BIMElement") -> "void":
        return _CadExCore.ModelData_BIMHostElement_AddElement(self, theElement)

    def Accept(self, theVisitor: "ModelData_BIMElementVisitor") -> "void":
        return _CadExCore.ModelData_BIMHostElement_Accept(self, theVisitor)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMHostElement_CompareType(theElement)

    def GetElementIterator(self):
        return ModelData_BIMHostElement_ElementIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_BIMHostElement

# Register ModelData_BIMHostElement in _CadExCore:
_CadExCore.ModelData_BIMHostElement_swigregister(ModelData_BIMHostElement)

def ModelData_BIMHostElement_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMHostElement_CompareType(theElement)

class ModelData_BIMHostElement_ElementIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theElement: "ModelData_BIMHostElement"):
        _CadExCore.ModelData_BIMHostElement_ElementIterator_swiginit(self, _CadExCore.new_ModelData_BIMHostElement_ElementIterator(theElement))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_BIMHostElement_ElementIterator_HasNext(self)

    def Next(self) -> "cadex::ModelData_BIMElement const &":
        return _CadExCore.ModelData_BIMHostElement_ElementIterator_Next(self)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_BIMHostElement_ElementIterator

# Register ModelData_BIMHostElement_ElementIterator in _CadExCore:
_CadExCore.ModelData_BIMHostElement_ElementIterator_swigregister(ModelData_BIMHostElement_ElementIterator)

class ModelData_BIMBeam(ModelData_BIMConstructionElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SubType_Undefined = _CadExCore.ModelData_BIMBeam_SubType_Undefined
    SubType_General = _CadExCore.ModelData_BIMBeam_SubType_General
    SubType_Cornice = _CadExCore.ModelData_BIMBeam_SubType_Cornice
    SubType_Diaphragm = _CadExCore.ModelData_BIMBeam_SubType_Diaphragm
    SubType_Edgebeam = _CadExCore.ModelData_BIMBeam_SubType_Edgebeam
    SubType_GirderSegment = _CadExCore.ModelData_BIMBeam_SubType_GirderSegment
    SubType_Hatstone = _CadExCore.ModelData_BIMBeam_SubType_Hatstone
    SubType_Hollowcore = _CadExCore.ModelData_BIMBeam_SubType_Hollowcore
    SubType_Joist = _CadExCore.ModelData_BIMBeam_SubType_Joist
    SubType_Lintel = _CadExCore.ModelData_BIMBeam_SubType_Lintel
    SubType_Piercap = _CadExCore.ModelData_BIMBeam_SubType_Piercap
    SubType_Spandrel = _CadExCore.ModelData_BIMBeam_SubType_Spandrel
    SubType_TBeam = _CadExCore.ModelData_BIMBeam_SubType_TBeam

    def __init__(self, *args):
        _CadExCore.ModelData_BIMBeam_swiginit(self, _CadExCore.new_ModelData_BIMBeam(*args))

    def GetSubType(self) -> "cadex::ModelData_BIMBeam::SubType":
        return _CadExCore.ModelData_BIMBeam_GetSubType(self)

    def SetSubType(self, theSubType: "cadex::ModelData_BIMBeam::SubType") -> "void":
        return _CadExCore.ModelData_BIMBeam_SetSubType(self, theSubType)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMBeam_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMBeam

# Register ModelData_BIMBeam in _CadExCore:
_CadExCore.ModelData_BIMBeam_swigregister(ModelData_BIMBeam)

def ModelData_BIMBeam_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMBeam_CompareType(theElement)

class ModelData_BIMBuilding(ModelData_BIMHostElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_BIMBuilding_swiginit(self, _CadExCore.new_ModelData_BIMBuilding())

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMBuilding_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMBuilding

# Register ModelData_BIMBuilding in _CadExCore:
_CadExCore.ModelData_BIMBuilding_swigregister(ModelData_BIMBuilding)

def ModelData_BIMBuilding_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMBuilding_CompareType(theElement)

class ModelData_BIMColumn(ModelData_BIMConstructionElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SubType_Undefined = _CadExCore.ModelData_BIMColumn_SubType_Undefined
    SubType_General = _CadExCore.ModelData_BIMColumn_SubType_General
    SubType_Pierstem = _CadExCore.ModelData_BIMColumn_SubType_Pierstem
    SubType_PierstemSegment = _CadExCore.ModelData_BIMColumn_SubType_PierstemSegment
    SubType_Pilaster = _CadExCore.ModelData_BIMColumn_SubType_Pilaster
    SubType_StandColumn = _CadExCore.ModelData_BIMColumn_SubType_StandColumn

    def __init__(self, *args):
        _CadExCore.ModelData_BIMColumn_swiginit(self, _CadExCore.new_ModelData_BIMColumn(*args))

    def GetSubType(self) -> "cadex::ModelData_BIMColumn::SubType":
        return _CadExCore.ModelData_BIMColumn_GetSubType(self)

    def SetSubType(self, theSubType: "cadex::ModelData_BIMColumn::SubType") -> "void":
        return _CadExCore.ModelData_BIMColumn_SetSubType(self, theSubType)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMColumn_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMColumn

# Register ModelData_BIMColumn in _CadExCore:
_CadExCore.ModelData_BIMColumn_swigregister(ModelData_BIMColumn)

def ModelData_BIMColumn_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMColumn_CompareType(theElement)

class ModelData_BIMCustomGeometryElement(ModelData_BIMGeometryElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_BIMCustomGeometryElement_swiginit(self, _CadExCore.new_ModelData_BIMCustomGeometryElement())

    def Type(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_BIMCustomGeometryElement_Type(self)

    def SetType(self, theType: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_BIMCustomGeometryElement_SetType(self, theType)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMCustomGeometryElement_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMCustomGeometryElement

# Register ModelData_BIMCustomGeometryElement in _CadExCore:
_CadExCore.ModelData_BIMCustomGeometryElement_swigregister(ModelData_BIMCustomGeometryElement)

def ModelData_BIMCustomGeometryElement_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMCustomGeometryElement_CompareType(theElement)

class ModelData_BIMDoor(ModelData_BIMConstructionElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SubType_Undefined = _CadExCore.ModelData_BIMDoor_SubType_Undefined
    SubType_General = _CadExCore.ModelData_BIMDoor_SubType_General
    SubType_BoomBarrier = _CadExCore.ModelData_BIMDoor_SubType_BoomBarrier
    SubType_Gate = _CadExCore.ModelData_BIMDoor_SubType_Gate
    SubType_Trapdoor = _CadExCore.ModelData_BIMDoor_SubType_Trapdoor
    SubType_Turnstile = _CadExCore.ModelData_BIMDoor_SubType_Turnstile
    OperationType_Undefined = _CadExCore.ModelData_BIMDoor_OperationType_Undefined
    OperationType_DoublePanelDoubleSwing = _CadExCore.ModelData_BIMDoor_OperationType_DoublePanelDoubleSwing
    OperationType_DoublePanelFolding = _CadExCore.ModelData_BIMDoor_OperationType_DoublePanelFolding
    OperationType_DoublePanelLiftingVertical = _CadExCore.ModelData_BIMDoor_OperationType_DoublePanelLiftingVertical
    OperationType_DoublePanelSingleSwing = _CadExCore.ModelData_BIMDoor_OperationType_DoublePanelSingleSwing
    OperationType_DoublePanelSingleSwingOppositeLeft = _CadExCore.ModelData_BIMDoor_OperationType_DoublePanelSingleSwingOppositeLeft
    OperationType_DoublePanelSingleSwingOppositeRight = _CadExCore.ModelData_BIMDoor_OperationType_DoublePanelSingleSwingOppositeRight
    OperationType_DoublePanelSliding = _CadExCore.ModelData_BIMDoor_OperationType_DoublePanelSliding
    OperationType_DoubleSwingLeft = _CadExCore.ModelData_BIMDoor_OperationType_DoubleSwingLeft
    OperationType_DoubleSwingRight = _CadExCore.ModelData_BIMDoor_OperationType_DoubleSwingRight
    OperationType_FoldingToLeft = _CadExCore.ModelData_BIMDoor_OperationType_FoldingToLeft
    OperationType_FoldingToRight = _CadExCore.ModelData_BIMDoor_OperationType_FoldingToRight
    OperationType_LiftingHorizontal = _CadExCore.ModelData_BIMDoor_OperationType_LiftingHorizontal
    OperationType_LiftingVerticalLeft = _CadExCore.ModelData_BIMDoor_OperationType_LiftingVerticalLeft
    OperationType_LiftingVerticalRight = _CadExCore.ModelData_BIMDoor_OperationType_LiftingVerticalRight
    OperationType_RevolvingHorizontal = _CadExCore.ModelData_BIMDoor_OperationType_RevolvingHorizontal
    OperationType_RevolvingVertical = _CadExCore.ModelData_BIMDoor_OperationType_RevolvingVertical
    OperationType_RollingUp = _CadExCore.ModelData_BIMDoor_OperationType_RollingUp
    OperationType_SingleSwingLeft = _CadExCore.ModelData_BIMDoor_OperationType_SingleSwingLeft
    OperationType_SingleSwingRight = _CadExCore.ModelData_BIMDoor_OperationType_SingleSwingRight
    OperationType_SlidingToLeft = _CadExCore.ModelData_BIMDoor_OperationType_SlidingToLeft
    OperationType_SlidingToRight = _CadExCore.ModelData_BIMDoor_OperationType_SlidingToRight
    OperationType_SwingFixedLeft = _CadExCore.ModelData_BIMDoor_OperationType_SwingFixedLeft
    OperationType_SwingFixedRight = _CadExCore.ModelData_BIMDoor_OperationType_SwingFixedRight

    def __init__(self, *args):
        _CadExCore.ModelData_BIMDoor_swiginit(self, _CadExCore.new_ModelData_BIMDoor(*args))

    def GetOperationType(self) -> "cadex::ModelData_BIMDoor::OperationType":
        return _CadExCore.ModelData_BIMDoor_GetOperationType(self)

    def SetOperationType(self, theOperationType: "cadex::ModelData_BIMDoor::OperationType") -> "void":
        return _CadExCore.ModelData_BIMDoor_SetOperationType(self, theOperationType)

    def GetSubType(self) -> "cadex::ModelData_BIMDoor::SubType":
        return _CadExCore.ModelData_BIMDoor_GetSubType(self)

    def SetSubType(self, theSubType: "cadex::ModelData_BIMDoor::SubType") -> "void":
        return _CadExCore.ModelData_BIMDoor_SetSubType(self, theSubType)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMDoor_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMDoor

# Register ModelData_BIMDoor in _CadExCore:
_CadExCore.ModelData_BIMDoor_swigregister(ModelData_BIMDoor)

def ModelData_BIMDoor_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMDoor_CompareType(theElement)

class ModelData_BIMElementVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMElementVisitor

    @abstractmethod
    def VisitBIMBeam(self, theElement: "ModelData_BIMBeam") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitBIMBeam(self, theElement)

    @abstractmethod
    def VisitBIMColumn(self, theElement: "ModelData_BIMColumn") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitBIMColumn(self, theElement)

    @abstractmethod
    def VisitBIMDoor(self, theElement: "ModelData_BIMDoor") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitBIMDoor(self, theElement)

    @abstractmethod
    def VisitBIMFurniture(self, theElement: "ModelData_BIMFurniture") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitBIMFurniture(self, theElement)

    @abstractmethod
    def VisitBIMPlate(self, theElement: "ModelData_BIMPlate") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitBIMPlate(self, theElement)

    @abstractmethod
    def VisitBIMRailing(self, theElement: "ModelData_BIMRailing") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitBIMRailing(self, theElement)

    @abstractmethod
    def VisitBIMRoof(self, theElement: "ModelData_BIMRoof") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitBIMRoof(self, theElement)

    @abstractmethod
    def VisitBIMSlab(self, theElement: "ModelData_BIMSlab") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitBIMSlab(self, theElement)

    @abstractmethod
    def VisitBIMStair(self, theElement: "ModelData_BIMStair") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitBIMStair(self, theElement)

    @abstractmethod
    def VisitBIMWall(self, theElement: "ModelData_BIMWall") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitBIMWall(self, theElement)

    @abstractmethod
    def VisitBIMWindow(self, theElement: "ModelData_BIMWindow") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitBIMWindow(self, theElement)

    @abstractmethod
    def VisitBIMCustomGeometryElement(self, theElement: "ModelData_BIMCustomGeometryElement") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitBIMCustomGeometryElement(self, theElement)

    @abstractmethod
    def VisitEnterBIMBuilding(self, theElement: "ModelData_BIMBuilding") -> "bool":
        return _CadExCore.ModelData_BIMElementVisitor_VisitEnterBIMBuilding(self, theElement)

    @abstractmethod
    def VisitLeaveBIMBuilding(self, theElement: "ModelData_BIMBuilding") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitLeaveBIMBuilding(self, theElement)

    @abstractmethod
    def VisitEnterBIMSite(self, theElement: "ModelData_BIMSite") -> "bool":
        return _CadExCore.ModelData_BIMElementVisitor_VisitEnterBIMSite(self, theElement)

    @abstractmethod
    def VisitLeaveBIMSite(self, theElement: "ModelData_BIMSite") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitLeaveBIMSite(self, theElement)

    @abstractmethod
    def VisitEnterBIMSpace(self, theElement: "ModelData_BIMSpace") -> "bool":
        return _CadExCore.ModelData_BIMElementVisitor_VisitEnterBIMSpace(self, theElement)

    @abstractmethod
    def VisitLeaveBIMSpace(self, theElement: "ModelData_BIMSpace") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitLeaveBIMSpace(self, theElement)

    @abstractmethod
    def VisitEnterBIMStorey(self, theElement: "ModelData_BIMStorey") -> "bool":
        return _CadExCore.ModelData_BIMElementVisitor_VisitEnterBIMStorey(self, theElement)

    @abstractmethod
    def VisitLeaveBIMStorey(self, theElement: "ModelData_BIMStorey") -> "void":
        return _CadExCore.ModelData_BIMElementVisitor_VisitLeaveBIMStorey(self, theElement)

    def __init__(self):
        if self.__class__ == ModelData_BIMElementVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_BIMElementVisitor_swiginit(self, _CadExCore.new_ModelData_BIMElementVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_BIMElementVisitor(self)
        return weakref.proxy(self)

# Register ModelData_BIMElementVisitor in _CadExCore:
_CadExCore.ModelData_BIMElementVisitor_swigregister(ModelData_BIMElementVisitor)

class ModelData_BIMElementVoidVisitor(ModelData_BIMElementVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def VisitBIMBeam(self, theElement: "ModelData_BIMBeam") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitBIMBeam(self, theElement)

    def VisitBIMColumn(self, theElement: "ModelData_BIMColumn") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitBIMColumn(self, theElement)

    def VisitBIMDoor(self, theElement: "ModelData_BIMDoor") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitBIMDoor(self, theElement)

    def VisitBIMFurniture(self, theElement: "ModelData_BIMFurniture") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitBIMFurniture(self, theElement)

    def VisitBIMPlate(self, theElement: "ModelData_BIMPlate") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitBIMPlate(self, theElement)

    def VisitBIMRailing(self, theElement: "ModelData_BIMRailing") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitBIMRailing(self, theElement)

    def VisitBIMRoof(self, theElement: "ModelData_BIMRoof") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitBIMRoof(self, theElement)

    def VisitBIMSlab(self, theElement: "ModelData_BIMSlab") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitBIMSlab(self, theElement)

    def VisitBIMStair(self, theElement: "ModelData_BIMStair") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitBIMStair(self, theElement)

    def VisitBIMWall(self, theElement: "ModelData_BIMWall") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitBIMWall(self, theElement)

    def VisitBIMWindow(self, theElement: "ModelData_BIMWindow") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitBIMWindow(self, theElement)

    def VisitBIMCustomGeometryElement(self, theElement: "ModelData_BIMCustomGeometryElement") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitBIMCustomGeometryElement(self, theElement)

    def VisitEnterBIMBuilding(self, theElement: "ModelData_BIMBuilding") -> "bool":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitEnterBIMBuilding(self, theElement)

    def VisitLeaveBIMBuilding(self, theElement: "ModelData_BIMBuilding") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitLeaveBIMBuilding(self, theElement)

    def VisitEnterBIMSite(self, theElement: "ModelData_BIMSite") -> "bool":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitEnterBIMSite(self, theElement)

    def VisitLeaveBIMSite(self, theElement: "ModelData_BIMSite") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitLeaveBIMSite(self, theElement)

    def VisitEnterBIMSpace(self, theElement: "ModelData_BIMSpace") -> "bool":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitEnterBIMSpace(self, theElement)

    def VisitLeaveBIMSpace(self, theElement: "ModelData_BIMSpace") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitLeaveBIMSpace(self, theElement)

    def VisitEnterBIMStorey(self, theElement: "ModelData_BIMStorey") -> "bool":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitEnterBIMStorey(self, theElement)

    def VisitLeaveBIMStorey(self, theElement: "ModelData_BIMStorey") -> "void":
        return _CadExCore.ModelData_BIMElementVoidVisitor_VisitLeaveBIMStorey(self, theElement)

    def __init__(self):
        if self.__class__ == ModelData_BIMElementVoidVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_BIMElementVoidVisitor_swiginit(self, _CadExCore.new_ModelData_BIMElementVoidVisitor(_self, ))
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMElementVoidVisitor
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_BIMElementVoidVisitor(self)
        return weakref.proxy(self)

# Register ModelData_BIMElementVoidVisitor in _CadExCore:
_CadExCore.ModelData_BIMElementVoidVisitor_swigregister(ModelData_BIMElementVoidVisitor)

class ModelData_BIMFurniture(ModelData_BIMConstructionElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SubType_Undefined = _CadExCore.ModelData_BIMFurniture_SubType_Undefined
    SubType_Bed = _CadExCore.ModelData_BIMFurniture_SubType_Bed
    SubType_Chair = _CadExCore.ModelData_BIMFurniture_SubType_Chair
    SubType_Desk = _CadExCore.ModelData_BIMFurniture_SubType_Desk
    SubType_FileCabinet = _CadExCore.ModelData_BIMFurniture_SubType_FileCabinet
    SubType_Shelf = _CadExCore.ModelData_BIMFurniture_SubType_Shelf
    SubType_Sofa = _CadExCore.ModelData_BIMFurniture_SubType_Sofa
    SubType_Table = _CadExCore.ModelData_BIMFurniture_SubType_Table
    SubType_TechnicalCabinet = _CadExCore.ModelData_BIMFurniture_SubType_TechnicalCabinet

    def __init__(self, *args):
        _CadExCore.ModelData_BIMFurniture_swiginit(self, _CadExCore.new_ModelData_BIMFurniture(*args))

    def GetSubType(self) -> "cadex::ModelData_BIMFurniture::SubType":
        return _CadExCore.ModelData_BIMFurniture_GetSubType(self)

    def SetSubType(self, theSubType: "cadex::ModelData_BIMFurniture::SubType") -> "void":
        return _CadExCore.ModelData_BIMFurniture_SetSubType(self, theSubType)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMFurniture_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMFurniture

# Register ModelData_BIMFurniture in _CadExCore:
_CadExCore.ModelData_BIMFurniture_swigregister(ModelData_BIMFurniture)

def ModelData_BIMFurniture_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMFurniture_CompareType(theElement)

class ModelData_BIMMaterial(Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_BIMMaterial_swiginit(self, _CadExCore.new_ModelData_BIMMaterial())

    def Name(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_BIMMaterial_Name(self)

    def SetName(self, theName: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_BIMMaterial_SetName(self, theName)

    def Description(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_BIMMaterial_Description(self)

    def SetDescription(self, theDescription: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_BIMMaterial_SetDescription(self, theDescription)

    def Category(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_BIMMaterial_Category(self)

    def SetCategory(self, theCategory: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_BIMMaterial_SetCategory(self, theCategory)

    def SetAppearance(self, theAppearance: "ModelData_Appearance") -> "void":
        return _CadExCore.ModelData_BIMMaterial_SetAppearance(self, theAppearance)

    def Appearance(self) -> "cadex::ModelData_Appearance":
        return _CadExCore.ModelData_BIMMaterial_Appearance(self)

    def Properties(self) -> "cadex::ModelData_BIMPropertyLibrary":
        return _CadExCore.ModelData_BIMMaterial_Properties(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMMaterial

# Register ModelData_BIMMaterial in _CadExCore:
_CadExCore.ModelData_BIMMaterial_swigregister(ModelData_BIMMaterial)

class ModelData_BIMModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_BIMModel_swiginit(self, _CadExCore.new_ModelData_BIMModel())

    def Save(self, *args) -> "bool":
        return _CadExCore.ModelData_BIMModel_Save(self, *args)

    def Open(self, *args) -> "bool":
        return _CadExCore.ModelData_BIMModel_Open(self, *args)

    def Root(self) -> "cadex::ModelData_BIMHostElement":
        return _CadExCore.ModelData_BIMModel_Root(self)

    def SetRoot(self, theElement: "ModelData_BIMHostElement") -> "void":
        return _CadExCore.ModelData_BIMModel_SetRoot(self, theElement)

    def Accept(self, theVisitor: "ModelData_BIMElementVisitor") -> "void":
        return _CadExCore.ModelData_BIMModel_Accept(self, theVisitor)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMModel

# Register ModelData_BIMModel in _CadExCore:
_CadExCore.ModelData_BIMModel_swigregister(ModelData_BIMModel)

class ModelData_BIMPlate(ModelData_BIMConstructionElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SubType_Undefined = _CadExCore.ModelData_BIMPlate_SubType_Undefined
    SubType_BasePlate = _CadExCore.ModelData_BIMPlate_SubType_BasePlate
    SubType_CoverPlate = _CadExCore.ModelData_BIMPlate_SubType_CoverPlate
    SubType_CurtainPanel = _CadExCore.ModelData_BIMPlate_SubType_CurtainPanel
    SubType_FlangePlate = _CadExCore.ModelData_BIMPlate_SubType_FlangePlate
    SubType_GussetPlate = _CadExCore.ModelData_BIMPlate_SubType_GussetPlate
    SubType_Sheet = _CadExCore.ModelData_BIMPlate_SubType_Sheet
    SubType_SplicePlate = _CadExCore.ModelData_BIMPlate_SubType_SplicePlate
    SubType_StiffenerPlate = _CadExCore.ModelData_BIMPlate_SubType_StiffenerPlate
    SubType_WebPlate = _CadExCore.ModelData_BIMPlate_SubType_WebPlate

    def __init__(self, *args):
        _CadExCore.ModelData_BIMPlate_swiginit(self, _CadExCore.new_ModelData_BIMPlate(*args))

    def GetSubType(self) -> "cadex::ModelData_BIMPlate::SubType":
        return _CadExCore.ModelData_BIMPlate_GetSubType(self)

    def SetSubType(self, theSubType: "cadex::ModelData_BIMPlate::SubType") -> "void":
        return _CadExCore.ModelData_BIMPlate_SetSubType(self, theSubType)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMPlate_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMPlate

# Register ModelData_BIMPlate in _CadExCore:
_CadExCore.ModelData_BIMPlate_swigregister(ModelData_BIMPlate)

def ModelData_BIMPlate_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMPlate_CompareType(theElement)

class ModelData_BIMPropertyLibrary(Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_BIMPropertyLibrary_swiginit(self, _CadExCore.new_ModelData_BIMPropertyLibrary())

    def NumberOfTables(self) -> "size_t":
        return _CadExCore.ModelData_BIMPropertyLibrary_NumberOfTables(self)

    def Add(self, theTable: "ModelData_PropertyTable") -> "void":
        return _CadExCore.ModelData_BIMPropertyLibrary_Add(self, theTable)

    def Table(self, theTableName: "Base_UTF16String") -> "cadex::ModelData_PropertyTable":
        return _CadExCore.ModelData_BIMPropertyLibrary_Table(self, theTableName)

    def FindProperty(self, *args) -> "bool":
        return _CadExCore.ModelData_BIMPropertyLibrary_FindProperty(self, *args)

    def GetPropertyTableIterator(self):
        return ModelData_BIMPropertyLibrary_PropertyTableIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_BIMPropertyLibrary

# Register ModelData_BIMPropertyLibrary in _CadExCore:
_CadExCore.ModelData_BIMPropertyLibrary_swigregister(ModelData_BIMPropertyLibrary)

class ModelData_BIMPropertyLibrary_PropertyTableIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePropertyLibrary: "ModelData_BIMPropertyLibrary"):
        _CadExCore.ModelData_BIMPropertyLibrary_PropertyTableIterator_swiginit(self, _CadExCore.new_ModelData_BIMPropertyLibrary_PropertyTableIterator(thePropertyLibrary))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_BIMPropertyLibrary_PropertyTableIterator_HasNext(self)

    def Next(self) -> "cadex::ModelData_PropertyTable const &":
        return _CadExCore.ModelData_BIMPropertyLibrary_PropertyTableIterator_Next(self)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_BIMPropertyLibrary_PropertyTableIterator

# Register ModelData_BIMPropertyLibrary_PropertyTableIterator in _CadExCore:
_CadExCore.ModelData_BIMPropertyLibrary_PropertyTableIterator_swigregister(ModelData_BIMPropertyLibrary_PropertyTableIterator)

class ModelData_BIMRailing(ModelData_BIMConstructionElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SubType_Undefined = _CadExCore.ModelData_BIMRailing_SubType_Undefined
    SubType_Balustrade = _CadExCore.ModelData_BIMRailing_SubType_Balustrade
    SubType_Fence = _CadExCore.ModelData_BIMRailing_SubType_Fence
    SubType_GuardRail = _CadExCore.ModelData_BIMRailing_SubType_GuardRail
    SubType_HandRail = _CadExCore.ModelData_BIMRailing_SubType_HandRail

    def __init__(self, *args):
        _CadExCore.ModelData_BIMRailing_swiginit(self, _CadExCore.new_ModelData_BIMRailing(*args))

    def GetSubType(self) -> "cadex::ModelData_BIMRailing::SubType":
        return _CadExCore.ModelData_BIMRailing_GetSubType(self)

    def SetSubType(self, theSubType: "cadex::ModelData_BIMRailing::SubType") -> "void":
        return _CadExCore.ModelData_BIMRailing_SetSubType(self, theSubType)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMRailing_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMRailing

# Register ModelData_BIMRailing in _CadExCore:
_CadExCore.ModelData_BIMRailing_swigregister(ModelData_BIMRailing)

def ModelData_BIMRailing_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMRailing_CompareType(theElement)

class ModelData_BIMRoof(ModelData_BIMConstructionElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SubType_Undefined = _CadExCore.ModelData_BIMRoof_SubType_Undefined
    SubType_BarrelRoof = _CadExCore.ModelData_BIMRoof_SubType_BarrelRoof
    SubType_ButterflyRoof = _CadExCore.ModelData_BIMRoof_SubType_ButterflyRoof
    SubType_DomeRoof = _CadExCore.ModelData_BIMRoof_SubType_DomeRoof
    SubType_FlatRoof = _CadExCore.ModelData_BIMRoof_SubType_FlatRoof
    SubType_Freeform = _CadExCore.ModelData_BIMRoof_SubType_Freeform
    SubType_GableRoof = _CadExCore.ModelData_BIMRoof_SubType_GableRoof
    SubType_GambrelRoof = _CadExCore.ModelData_BIMRoof_SubType_GambrelRoof
    SubType_HippedGableRoof = _CadExCore.ModelData_BIMRoof_SubType_HippedGableRoof
    SubType_HipRoof = _CadExCore.ModelData_BIMRoof_SubType_HipRoof
    SubType_MansardRoof = _CadExCore.ModelData_BIMRoof_SubType_MansardRoof
    SubType_PavilionRoof = _CadExCore.ModelData_BIMRoof_SubType_PavilionRoof
    SubType_RainbowRoof = _CadExCore.ModelData_BIMRoof_SubType_RainbowRoof
    SubType_ShedRoof = _CadExCore.ModelData_BIMRoof_SubType_ShedRoof

    def __init__(self, *args):
        _CadExCore.ModelData_BIMRoof_swiginit(self, _CadExCore.new_ModelData_BIMRoof(*args))

    def GetSubType(self) -> "cadex::ModelData_BIMRoof::SubType":
        return _CadExCore.ModelData_BIMRoof_GetSubType(self)

    def SetSubType(self, theSubType: "cadex::ModelData_BIMRoof::SubType") -> "void":
        return _CadExCore.ModelData_BIMRoof_SetSubType(self, theSubType)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMRoof_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMRoof

# Register ModelData_BIMRoof in _CadExCore:
_CadExCore.ModelData_BIMRoof_swigregister(ModelData_BIMRoof)

def ModelData_BIMRoof_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMRoof_CompareType(theElement)

class ModelData_BIMSite(ModelData_BIMHostElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_BIMSite_swiginit(self, _CadExCore.new_ModelData_BIMSite())

    def Elevation(self) -> "double":
        return _CadExCore.ModelData_BIMSite_Elevation(self)

    def SetElevation(self, theElevation: "double") -> "void":
        return _CadExCore.ModelData_BIMSite_SetElevation(self, theElevation)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMSite_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMSite

# Register ModelData_BIMSite in _CadExCore:
_CadExCore.ModelData_BIMSite_swigregister(ModelData_BIMSite)

def ModelData_BIMSite_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMSite_CompareType(theElement)

class ModelData_BIMSlab(ModelData_BIMConstructionElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SubType_Undefined = _CadExCore.ModelData_BIMSlab_SubType_Undefined
    SubType_ApproachSlab = _CadExCore.ModelData_BIMSlab_SubType_ApproachSlab
    SubType_BaseSlab = _CadExCore.ModelData_BIMSlab_SubType_BaseSlab
    SubType_Floor = _CadExCore.ModelData_BIMSlab_SubType_Floor
    SubType_Landing = _CadExCore.ModelData_BIMSlab_SubType_Landing
    SubType_Paving = _CadExCore.ModelData_BIMSlab_SubType_Paving
    SubType_Roof = _CadExCore.ModelData_BIMSlab_SubType_Roof
    SubType_Sidewalk = _CadExCore.ModelData_BIMSlab_SubType_Sidewalk
    SubType_TrackSlab = _CadExCore.ModelData_BIMSlab_SubType_TrackSlab
    SubType_Wearing = _CadExCore.ModelData_BIMSlab_SubType_Wearing

    def __init__(self, *args):
        _CadExCore.ModelData_BIMSlab_swiginit(self, _CadExCore.new_ModelData_BIMSlab(*args))

    def GetSubType(self) -> "cadex::ModelData_BIMSlab::SubType":
        return _CadExCore.ModelData_BIMSlab_GetSubType(self)

    def SetSubType(self, theSubType: "cadex::ModelData_BIMSlab::SubType") -> "void":
        return _CadExCore.ModelData_BIMSlab_SetSubType(self, theSubType)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMSlab_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMSlab

# Register ModelData_BIMSlab in _CadExCore:
_CadExCore.ModelData_BIMSlab_swigregister(ModelData_BIMSlab)

def ModelData_BIMSlab_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMSlab_CompareType(theElement)

class ModelData_BIMSpace(ModelData_BIMHostElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SubType_Undefined = _CadExCore.ModelData_BIMSpace_SubType_Undefined
    SubType_General = _CadExCore.ModelData_BIMSpace_SubType_General
    SubType_Berth = _CadExCore.ModelData_BIMSpace_SubType_Berth
    SubType_External = _CadExCore.ModelData_BIMSpace_SubType_External
    SubType_Gfa = _CadExCore.ModelData_BIMSpace_SubType_Gfa
    SubType_Internal = _CadExCore.ModelData_BIMSpace_SubType_Internal
    SubType_Parking = _CadExCore.ModelData_BIMSpace_SubType_Parking

    def __init__(self):
        _CadExCore.ModelData_BIMSpace_swiginit(self, _CadExCore.new_ModelData_BIMSpace())

    def FloorElevation(self) -> "double":
        return _CadExCore.ModelData_BIMSpace_FloorElevation(self)

    def SetFloorElevation(self, theFloorElevation: "double") -> "void":
        return _CadExCore.ModelData_BIMSpace_SetFloorElevation(self, theFloorElevation)

    def GetSubType(self) -> "cadex::ModelData_BIMSpace::SubType":
        return _CadExCore.ModelData_BIMSpace_GetSubType(self)

    def SetSubType(self, theSubType: "cadex::ModelData_BIMSpace::SubType") -> "void":
        return _CadExCore.ModelData_BIMSpace_SetSubType(self, theSubType)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMSpace_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMSpace

# Register ModelData_BIMSpace in _CadExCore:
_CadExCore.ModelData_BIMSpace_swigregister(ModelData_BIMSpace)

def ModelData_BIMSpace_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMSpace_CompareType(theElement)

class ModelData_BIMStair(ModelData_BIMConstructionElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SubType_Undefined = _CadExCore.ModelData_BIMStair_SubType_Undefined
    SubType_CurvedRunStair = _CadExCore.ModelData_BIMStair_SubType_CurvedRunStair
    SubType_DoubleReturnStair = _CadExCore.ModelData_BIMStair_SubType_DoubleReturnStair
    SubType_HalfTurnStair = _CadExCore.ModelData_BIMStair_SubType_HalfTurnStair
    SubType_HalfWindingStair = _CadExCore.ModelData_BIMStair_SubType_HalfWindingStair
    SubType_Ladder = _CadExCore.ModelData_BIMStair_SubType_Ladder
    SubType_QuarterTurnStair = _CadExCore.ModelData_BIMStair_SubType_QuarterTurnStair
    SubType_QuarterWindingStair = _CadExCore.ModelData_BIMStair_SubType_QuarterWindingStair
    SubType_SpiralStair = _CadExCore.ModelData_BIMStair_SubType_SpiralStair
    SubType_StraightRunStair = _CadExCore.ModelData_BIMStair_SubType_StraightRunStair
    SubType_ThreeQuarterTurnStair = _CadExCore.ModelData_BIMStair_SubType_ThreeQuarterTurnStair
    SubType_ThreeQuarterWindingStair = _CadExCore.ModelData_BIMStair_SubType_ThreeQuarterWindingStair
    SubType_TwoCurvedRunStair = _CadExCore.ModelData_BIMStair_SubType_TwoCurvedRunStair
    SubType_TwoQuarterTurnStair = _CadExCore.ModelData_BIMStair_SubType_TwoQuarterTurnStair
    SubType_TwoQuarterWindingStair = _CadExCore.ModelData_BIMStair_SubType_TwoQuarterWindingStair
    SubType_TwoStraightRunStair = _CadExCore.ModelData_BIMStair_SubType_TwoStraightRunStair

    def __init__(self, *args):
        _CadExCore.ModelData_BIMStair_swiginit(self, _CadExCore.new_ModelData_BIMStair(*args))

    def GetSubType(self) -> "cadex::ModelData_BIMStair::SubType":
        return _CadExCore.ModelData_BIMStair_GetSubType(self)

    def SetSubType(self, theSubType: "cadex::ModelData_BIMStair::SubType") -> "void":
        return _CadExCore.ModelData_BIMStair_SetSubType(self, theSubType)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMStair_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMStair

# Register ModelData_BIMStair in _CadExCore:
_CadExCore.ModelData_BIMStair_swigregister(ModelData_BIMStair)

def ModelData_BIMStair_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMStair_CompareType(theElement)

class ModelData_BIMStorey(ModelData_BIMHostElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_BIMStorey_swiginit(self, _CadExCore.new_ModelData_BIMStorey())

    def Elevation(self) -> "double":
        return _CadExCore.ModelData_BIMStorey_Elevation(self)

    def SetElevation(self, theElevation: "double") -> "void":
        return _CadExCore.ModelData_BIMStorey_SetElevation(self, theElevation)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMStorey_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMStorey

# Register ModelData_BIMStorey in _CadExCore:
_CadExCore.ModelData_BIMStorey_swigregister(ModelData_BIMStorey)

def ModelData_BIMStorey_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMStorey_CompareType(theElement)

class ModelData_BIMWall(ModelData_BIMConstructionElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SubType_Undefined = _CadExCore.ModelData_BIMWall_SubType_Undefined
    SubType_Movable = _CadExCore.ModelData_BIMWall_SubType_Movable
    SubType_Parapet = _CadExCore.ModelData_BIMWall_SubType_Parapet
    SubType_Partitioning = _CadExCore.ModelData_BIMWall_SubType_Partitioning
    SubType_PlumbingWall = _CadExCore.ModelData_BIMWall_SubType_PlumbingWall
    SubType_RetainingWall = _CadExCore.ModelData_BIMWall_SubType_RetainingWall
    SubType_Shear = _CadExCore.ModelData_BIMWall_SubType_Shear
    SubType_SolidWall = _CadExCore.ModelData_BIMWall_SubType_SolidWall
    SubType_Standard = _CadExCore.ModelData_BIMWall_SubType_Standard
    SubType_WaveWall = _CadExCore.ModelData_BIMWall_SubType_WaveWall

    def __init__(self, *args):
        _CadExCore.ModelData_BIMWall_swiginit(self, _CadExCore.new_ModelData_BIMWall(*args))

    def GetSubType(self) -> "cadex::ModelData_BIMWall::SubType":
        return _CadExCore.ModelData_BIMWall_GetSubType(self)

    def SetSubType(self, theSubType: "cadex::ModelData_BIMWall::SubType") -> "void":
        return _CadExCore.ModelData_BIMWall_SetSubType(self, theSubType)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMWall_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMWall

# Register ModelData_BIMWall in _CadExCore:
_CadExCore.ModelData_BIMWall_swigregister(ModelData_BIMWall)

def ModelData_BIMWall_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMWall_CompareType(theElement)

class ModelData_BIMWindow(ModelData_BIMConstructionElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SubType_Undefined = _CadExCore.ModelData_BIMWindow_SubType_Undefined
    SubType_General = _CadExCore.ModelData_BIMWindow_SubType_General
    SubType_Lightdome = _CadExCore.ModelData_BIMWindow_SubType_Lightdome
    SubType_Skylight = _CadExCore.ModelData_BIMWindow_SubType_Skylight
    PartitioningType_Undefined = _CadExCore.ModelData_BIMWindow_PartitioningType_Undefined
    PartitioningType_DoublePanelHorizontal = _CadExCore.ModelData_BIMWindow_PartitioningType_DoublePanelHorizontal
    PartitioningType_DoublePanelVertical = _CadExCore.ModelData_BIMWindow_PartitioningType_DoublePanelVertical
    PartitioningType_SinglePanel = _CadExCore.ModelData_BIMWindow_PartitioningType_SinglePanel
    PartitioningType_TriplePanelBottom = _CadExCore.ModelData_BIMWindow_PartitioningType_TriplePanelBottom
    PartitioningType_TriplePanelHorizontal = _CadExCore.ModelData_BIMWindow_PartitioningType_TriplePanelHorizontal
    PartitioningType_TriplePanelLeft = _CadExCore.ModelData_BIMWindow_PartitioningType_TriplePanelLeft
    PartitioningType_TriplePanelRight = _CadExCore.ModelData_BIMWindow_PartitioningType_TriplePanelRight
    PartitioningType_TriplePanelTop = _CadExCore.ModelData_BIMWindow_PartitioningType_TriplePanelTop
    PartitioningType_TriplePanelVertical = _CadExCore.ModelData_BIMWindow_PartitioningType_TriplePanelVertical

    def __init__(self, *args):
        _CadExCore.ModelData_BIMWindow_swiginit(self, _CadExCore.new_ModelData_BIMWindow(*args))

    def GetPartitioningType(self) -> "cadex::ModelData_BIMWindow::PartitioningType":
        return _CadExCore.ModelData_BIMWindow_GetPartitioningType(self)

    def SetPartitioningType(self, thePartitioningType: "cadex::ModelData_BIMWindow::PartitioningType") -> "void":
        return _CadExCore.ModelData_BIMWindow_SetPartitioningType(self, thePartitioningType)

    def GetSubType(self) -> "cadex::ModelData_BIMWindow::SubType":
        return _CadExCore.ModelData_BIMWindow_GetSubType(self)

    def SetSubType(self, theSubType: "cadex::ModelData_BIMWindow::SubType") -> "void":
        return _CadExCore.ModelData_BIMWindow_SetSubType(self, theSubType)

    @staticmethod
    def CompareType(theElement: "ModelData_BIMElement") -> "bool":
        return _CadExCore.ModelData_BIMWindow_CompareType(theElement)
    __swig_destroy__ = _CadExCore.delete_ModelData_BIMWindow

# Register ModelData_BIMWindow in _CadExCore:
_CadExCore.ModelData_BIMWindow_swigregister(ModelData_BIMWindow)

def ModelData_BIMWindow_CompareType(theElement: "ModelData_BIMElement") -> "bool":
    return _CadExCore.ModelData_BIMWindow_CompareType(theElement)

class ModelData_Box2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Box2d_swiginit(self, _CadExCore.new_ModelData_Box2d(*args))

    def MinCorner(self, *args) -> "cadex::ModelData_Point2d &":
        return _CadExCore.ModelData_Box2d_MinCorner(self, *args)

    def MaxCorner(self, *args) -> "cadex::ModelData_Point2d &":
        return _CadExCore.ModelData_Box2d_MaxCorner(self, *args)

    def Center(self) -> "cadex::ModelData_Point2d":
        return _CadExCore.ModelData_Box2d_Center(self)

    def Add(self, *args) -> "void":
        return _CadExCore.ModelData_Box2d_Add(self, *args)

    def Clear(self) -> "void":
        return _CadExCore.ModelData_Box2d_Clear(self)

    def SetXRange(self, theMin: "double", theMax: "double") -> "void":
        return _CadExCore.ModelData_Box2d_SetXRange(self, theMin, theMax)

    def SetYRange(self, theMin: "double", theMax: "double") -> "void":
        return _CadExCore.ModelData_Box2d_SetYRange(self, theMin, theMax)

    def SetRange(self, theIdx: "size_t", theMin: "double", theMax: "double") -> "void":
        return _CadExCore.ModelData_Box2d_SetRange(self, theIdx, theMin, theMax)

    def Range(self, theIdx: "size_t") -> "double":
        return _CadExCore.ModelData_Box2d_Range(self, theIdx)

    def XRange(self) -> "double":
        return _CadExCore.ModelData_Box2d_XRange(self)

    def YRange(self) -> "double":
        return _CadExCore.ModelData_Box2d_YRange(self)

    def Enlarge(self, *args) -> "void":
        return _CadExCore.ModelData_Box2d_Enlarge(self, *args)

    def Enlarged(self, *args) -> "cadex::ModelData_Box2d":
        return _CadExCore.ModelData_Box2d_Enlarged(self, *args)

    def IsIn(self, thePoint: "ModelData_Point2d") -> "bool":
        return _CadExCore.ModelData_Box2d_IsIn(self, thePoint)

    def Intersects(self, theOther: "ModelData_Box2d") -> "bool":
        return _CadExCore.ModelData_Box2d_Intersects(self, theOther)

    def IsInfinite(self) -> "bool":
        return _CadExCore.ModelData_Box2d_IsInfinite(self)

    def Multiply(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_Box2d_Multiply(self, theValue)

    def Multiplied(self, theValue: "double") -> "cadex::ModelData_Box2d":
        return _CadExCore.ModelData_Box2d_Multiplied(self, theValue)

    def Transform(self, theTransformation: "ModelData_Transformation2d") -> "void":
        return _CadExCore.ModelData_Box2d_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation2d") -> "cadex::ModelData_Box2d":
        return _CadExCore.ModelData_Box2d_Transformed(self, theTransformation)
    __swig_destroy__ = _CadExCore.delete_ModelData_Box2d

# Register ModelData_Box2d in _CadExCore:
_CadExCore.ModelData_Box2d_swigregister(ModelData_Box2d)

class ModelData_Box(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Box_swiginit(self, _CadExCore.new_ModelData_Box(*args))

    def MinCorner(self, *args) -> "cadex::ModelData_Point &":
        return _CadExCore.ModelData_Box_MinCorner(self, *args)

    def MaxCorner(self, *args) -> "cadex::ModelData_Point &":
        return _CadExCore.ModelData_Box_MaxCorner(self, *args)

    def Corner(self, theIdx: "size_t") -> "cadex::ModelData_Point const &":
        return _CadExCore.ModelData_Box_Corner(self, theIdx)

    def Center(self) -> "cadex::ModelData_Point":
        return _CadExCore.ModelData_Box_Center(self)

    def Add(self, *args) -> "void":
        return _CadExCore.ModelData_Box_Add(self, *args)

    def Clear(self) -> "void":
        return _CadExCore.ModelData_Box_Clear(self)

    def SetXRange(self, theMin: "double", theMax: "double") -> "void":
        return _CadExCore.ModelData_Box_SetXRange(self, theMin, theMax)

    def SetYRange(self, theMin: "double", theMax: "double") -> "void":
        return _CadExCore.ModelData_Box_SetYRange(self, theMin, theMax)

    def SetZRange(self, theMin: "double", theMax: "double") -> "void":
        return _CadExCore.ModelData_Box_SetZRange(self, theMin, theMax)

    def SetRange(self, theIdx: "size_t", theMin: "double", theMax: "double") -> "void":
        return _CadExCore.ModelData_Box_SetRange(self, theIdx, theMin, theMax)

    def Range(self, theIdx: "size_t") -> "double":
        return _CadExCore.ModelData_Box_Range(self, theIdx)

    def XRange(self) -> "double":
        return _CadExCore.ModelData_Box_XRange(self)

    def YRange(self) -> "double":
        return _CadExCore.ModelData_Box_YRange(self)

    def ZRange(self) -> "double":
        return _CadExCore.ModelData_Box_ZRange(self)

    def Enlarge(self, *args) -> "void":
        return _CadExCore.ModelData_Box_Enlarge(self, *args)

    def Enlarged(self, *args) -> "cadex::ModelData_Box":
        return _CadExCore.ModelData_Box_Enlarged(self, *args)

    def IsIn(self, thePoint: "ModelData_Point") -> "bool":
        return _CadExCore.ModelData_Box_IsIn(self, thePoint)

    def Intersects(self, theOther: "ModelData_Box") -> "bool":
        return _CadExCore.ModelData_Box_Intersects(self, theOther)

    def IsInfinite(self) -> "bool":
        return _CadExCore.ModelData_Box_IsInfinite(self)

    def Multiply(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_Box_Multiply(self, theValue)

    def Multiplied(self, theValue: "double") -> "cadex::ModelData_Box":
        return _CadExCore.ModelData_Box_Multiplied(self, theValue)

    def Transform(self, theTransformation: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Box_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation") -> "cadex::ModelData_Box":
        return _CadExCore.ModelData_Box_Transformed(self, theTransformation)
    __swig_destroy__ = _CadExCore.delete_ModelData_Box

# Register ModelData_Box in _CadExCore:
_CadExCore.ModelData_Box_swigregister(ModelData_Box)

class ModelData_Transformation2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Transformation2d_swiginit(self, _CadExCore.new_ModelData_Transformation2d(*args))

    def IsIdentity(self) -> "bool":
        return _CadExCore.ModelData_Transformation2d_IsIdentity(self)

    def SetRotationPart(self, theV00: "double", theV01: "double", theV10: "double", theV11: "double") -> "void":
        return _CadExCore.ModelData_Transformation2d_SetRotationPart(self, theV00, theV01, theV10, theV11)

    def RotationPart(self) -> "void":
        return _CadExCore.ModelData_Transformation2d_RotationPart(self)

    def SetTranslation(self, *args) -> "void":
        return _CadExCore.ModelData_Transformation2d_SetTranslation(self, *args)

    def SetTranslationPart(self, *args) -> "void":
        return _CadExCore.ModelData_Transformation2d_SetTranslationPart(self, *args)

    def TranslationPart(self, *args) -> "cadex::ModelData_Vector2d":
        return _CadExCore.ModelData_Transformation2d_TranslationPart(self, *args)

    def SetScaleFactor(self, theScale: "double") -> "void":
        return _CadExCore.ModelData_Transformation2d_SetScaleFactor(self, theScale)

    def ScaleFactor(self) -> "double":
        return _CadExCore.ModelData_Transformation2d_ScaleFactor(self)

    def Data(self, i: "int", j: "int") -> "double":
        return _CadExCore.ModelData_Transformation2d_Data(self, i, j)

    def Multiply(self, theOther: "ModelData_Transformation2d") -> "void":
        return _CadExCore.ModelData_Transformation2d_Multiply(self, theOther)

    def Multiplied(self, theOther: "ModelData_Transformation2d") -> "cadex::ModelData_Transformation2d":
        return _CadExCore.ModelData_Transformation2d_Multiplied(self, theOther)

    def Invert(self) -> "void":
        return _CadExCore.ModelData_Transformation2d_Invert(self)

    def Inverted(self) -> "cadex::ModelData_Transformation2d":
        return _CadExCore.ModelData_Transformation2d_Inverted(self)

    def Transform(self, theX: "double &", theY: "double &") -> "void":
        return _CadExCore.ModelData_Transformation2d_Transform(self, theX, theY)

    def IsEqual(self, theObj: "ModelData_Transformation2d") -> "bool":
        return _CadExCore.ModelData_Transformation2d_IsEqual(self, theObj)

    def __hash__(self):
        aHasher = ModelData_Transformation2dHash()
        return int(aHasher(self))


    def __eq__(self, other):
        if id(other) == id(self):
            return True;
        if isinstance(other, ModelData_Transformation2d):
            return self.IsEqual(other);
        return False;

    __swig_destroy__ = _CadExCore.delete_ModelData_Transformation2d

# Register ModelData_Transformation2d in _CadExCore:
_CadExCore.ModelData_Transformation2d_swigregister(ModelData_Transformation2d)

class ModelData_Transformation2dHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theValue: "ModelData_Transformation2d") -> "size_t":
        return _CadExCore.ModelData_Transformation2dHash___call__(self, theValue)

    def __init__(self):
        _CadExCore.ModelData_Transformation2dHash_swiginit(self, _CadExCore.new_ModelData_Transformation2dHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_Transformation2dHash

# Register ModelData_Transformation2dHash in _CadExCore:
_CadExCore.ModelData_Transformation2dHash_swigregister(ModelData_Transformation2dHash)

class ModelData_Transformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Transformation_swiginit(self, _CadExCore.new_ModelData_Transformation(*args))

    def IsIdentity(self) -> "bool":
        return _CadExCore.ModelData_Transformation_IsIdentity(self)

    def SetRotation(self, theAx1: "ModelData_Axis1Placement", theAngle: "double") -> "void":
        return _CadExCore.ModelData_Transformation_SetRotation(self, theAx1, theAngle)

    def Rotation(self, theXYZ: "ModelData_XYZ") -> "void":
        return _CadExCore.ModelData_Transformation_Rotation(self, theXYZ)

    def SetRotationPart(self, theV00: "double", theV01: "double", theV02: "double", theV10: "double", theV11: "double", theV12: "double", theV20: "double", theV21: "double", theV22: "double") -> "void":
        return _CadExCore.ModelData_Transformation_SetRotationPart(self, theV00, theV01, theV02, theV10, theV11, theV12, theV20, theV21, theV22)

    def RotationPart(self) -> "void":
        return _CadExCore.ModelData_Transformation_RotationPart(self)

    def SetTranslation(self, *args) -> "void":
        return _CadExCore.ModelData_Transformation_SetTranslation(self, *args)

    def SetTranslationPart(self, *args) -> "void":
        return _CadExCore.ModelData_Transformation_SetTranslationPart(self, *args)

    def TranslationPart(self, *args) -> "cadex::ModelData_Vector":
        return _CadExCore.ModelData_Transformation_TranslationPart(self, *args)

    def SetScaleFactor(self, theScale: "double") -> "void":
        return _CadExCore.ModelData_Transformation_SetScaleFactor(self, theScale)

    def ScaleFactor(self) -> "double":
        return _CadExCore.ModelData_Transformation_ScaleFactor(self)

    def Data(self, i: "int", j: "int") -> "double":
        return _CadExCore.ModelData_Transformation_Data(self, i, j)

    def Multiply(self, theOther: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Transformation_Multiply(self, theOther)

    def Multiplied(self, theOther: "ModelData_Transformation") -> "cadex::ModelData_Transformation":
        return _CadExCore.ModelData_Transformation_Multiplied(self, theOther)

    def Invert(self) -> "void":
        return _CadExCore.ModelData_Transformation_Invert(self)

    def Inverted(self) -> "cadex::ModelData_Transformation":
        return _CadExCore.ModelData_Transformation_Inverted(self)

    def Transform(self, theX: "double &", theY: "double &", theZ: "double &") -> "void":
        return _CadExCore.ModelData_Transformation_Transform(self, theX, theY, theZ)

    def IsEqual(self, theObj: "ModelData_Transformation") -> "bool":
        return _CadExCore.ModelData_Transformation_IsEqual(self, theObj)

    def __hash__(self):
        aHasher = ModelData_TransformationHash()
        return int(aHasher(self))


    def __eq__(self, other):
        if id(other) == id(self):
            return True;
        if isinstance(other, ModelData_Transformation):
            return self.IsEqual(other);
        return False;

    __swig_destroy__ = _CadExCore.delete_ModelData_Transformation

# Register ModelData_Transformation in _CadExCore:
_CadExCore.ModelData_Transformation_swigregister(ModelData_Transformation)

class ModelData_TransformationHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theValue: "ModelData_Transformation") -> "size_t":
        return _CadExCore.ModelData_TransformationHash___call__(self, theValue)

    def __init__(self):
        _CadExCore.ModelData_TransformationHash_swiginit(self, _CadExCore.new_ModelData_TransformationHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_TransformationHash

# Register ModelData_TransformationHash in _CadExCore:
_CadExCore.ModelData_TransformationHash_swigregister(ModelData_TransformationHash)

class ModelData_BaseObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_BaseObject

    def TypeId(self) -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_BaseObject_TypeId(self)

    def SetName(self, theName: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_BaseObject_SetName(self, theName)

    def Name(self) -> "cadex::Base_UTF16String":
        return _CadExCore.ModelData_BaseObject_Name(self)

    def SetUuid(self, theUuid: "Base_Uuid") -> "void":
        return _CadExCore.ModelData_BaseObject_SetUuid(self, theUuid)

    def Uuid(self) -> "cadex::Base_Uuid":
        return _CadExCore.ModelData_BaseObject_Uuid(self)

    def Nullify(self) -> "void":
        return _CadExCore.ModelData_BaseObject_Nullify(self)

    def IsNull(self) -> "bool":
        return _CadExCore.ModelData_BaseObject_IsNull(self)

    def IsEqual(self, theObj: "ModelData_BaseObject") -> "bool":
        return _CadExCore.ModelData_BaseObject_IsEqual(self, theObj)

    def __hash__(self):
        aHasher = ModelData_BaseObjectHash()
        return int(aHasher(self))


    def __eq__(self, other):
        if id(other) == id(self):
            return True;
        if isinstance(other, ModelData_BaseObject):
            return self.IsEqual(other);
        return False;


# Register ModelData_BaseObject in _CadExCore:
_CadExCore.ModelData_BaseObject_swigregister(ModelData_BaseObject)

class _ModelData_BaseObject_initialized(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore._ModelData_BaseObject_initialized_swiginit(self, _CadExCore.new__ModelData_BaseObject_initialized())
    __swig_destroy__ = _CadExCore.delete__ModelData_BaseObject_initialized

# Register _ModelData_BaseObject_initialized in _CadExCore:
_CadExCore._ModelData_BaseObject_initialized_swigregister(_ModelData_BaseObject_initialized)

class ModelData_BaseObjectHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theValue: "ModelData_BaseObject") -> "size_t":
        return _CadExCore.ModelData_BaseObjectHash___call__(self, theValue)

    def __init__(self):
        _CadExCore.ModelData_BaseObjectHash_swiginit(self, _CadExCore.new_ModelData_BaseObjectHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_BaseObjectHash

# Register ModelData_BaseObjectHash in _CadExCore:
_CadExCore.ModelData_BaseObjectHash_swigregister(ModelData_BaseObjectHash)

class ModelData_Drawing(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Drawing_swiginit(self, _CadExCore.new_ModelData_Drawing(*args))

    def NumberOfSheets(self) -> "size_t":
        return _CadExCore.ModelData_Drawing_NumberOfSheets(self)

    def AddSheet(self, theSheet: "ModelData_DrawingSheet") -> "void":
        return _CadExCore.ModelData_Drawing_AddSheet(self, theSheet)

    def NumberOfLayers(self) -> "size_t":
        return _CadExCore.ModelData_Drawing_NumberOfLayers(self)

    def AddLayer(self, theLayer: "ModelData_DrawingLayer") -> "void":
        return _CadExCore.ModelData_Drawing_AddLayer(self, theLayer)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_Drawing_GetTypeId()

    def GetSheetIterator(self):
        return ModelData_Drawing_SheetIterator(self)


    def GetLayerIterator(self):
        return ModelData_Drawing_LayerIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_Drawing

# Register ModelData_Drawing in _CadExCore:
_CadExCore.ModelData_Drawing_swigregister(ModelData_Drawing)

def ModelData_Drawing_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_Drawing_GetTypeId()

class ModelData_Drawing_SheetIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theDrawing: "ModelData_Drawing"):
        _CadExCore.ModelData_Drawing_SheetIterator_swiginit(self, _CadExCore.new_ModelData_Drawing_SheetIterator(theDrawing))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_Drawing_SheetIterator_HasNext(self)

    def Next(self) -> "cadex::ModelData_DrawingSheet const &":
        return _CadExCore.ModelData_Drawing_SheetIterator_Next(self)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_Drawing_SheetIterator

# Register ModelData_Drawing_SheetIterator in _CadExCore:
_CadExCore.ModelData_Drawing_SheetIterator_swigregister(ModelData_Drawing_SheetIterator)

class ModelData_Drawing_LayerIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theDrawing: "ModelData_Drawing"):
        _CadExCore.ModelData_Drawing_LayerIterator_swiginit(self, _CadExCore.new_ModelData_Drawing_LayerIterator(theDrawing))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_Drawing_LayerIterator_HasNext(self)

    def Next(self) -> "cadex::ModelData_DrawingLayer const &":
        return _CadExCore.ModelData_Drawing_LayerIterator_Next(self)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_Drawing_LayerIterator

# Register ModelData_Drawing_LayerIterator in _CadExCore:
_CadExCore.ModelData_Drawing_LayerIterator_swigregister(ModelData_Drawing_LayerIterator)

class ModelData_DrawingElement(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Accept(self, theVisitor: "ModelData_DrawingElementVisitor") -> "void":
        return _CadExCore.ModelData_DrawingElement_Accept(self, theVisitor)
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingElement

# Register ModelData_DrawingElement in _CadExCore:
_CadExCore.ModelData_DrawingElement_swigregister(ModelData_DrawingElement)

class ModelData_DrawingDimension(ModelData_DrawingElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Internal = _CadExCore.ModelData_DrawingDimension_Internal
    External = _CadExCore.ModelData_DrawingDimension_External

    def ArrowheadPlacement(self) -> "cadex::ModelData_DrawingDimension::ArrowheadPlacementType":
        return _CadExCore.ModelData_DrawingDimension_ArrowheadPlacement(self)

    def SetArrowheadPlacement(self, theArrowheadPlacement: "cadex::ModelData_DrawingDimension::ArrowheadPlacementType") -> "void":
        return _CadExCore.ModelData_DrawingDimension_SetArrowheadPlacement(self, theArrowheadPlacement)

    def AlignTextHorizontally(self) -> "bool":
        return _CadExCore.ModelData_DrawingDimension_AlignTextHorizontally(self)

    def SetAlignTextHorizontally(self, theAlignTextHorizontally: "bool") -> "void":
        return _CadExCore.ModelData_DrawingDimension_SetAlignTextHorizontally(self, theAlignTextHorizontally)

    def MeasurementValue(self) -> "double":
        return _CadExCore.ModelData_DrawingDimension_MeasurementValue(self)

    def SetMeasurementValue(self, theMeasurementValue: "double") -> "void":
        return _CadExCore.ModelData_DrawingDimension_SetMeasurementValue(self, theMeasurementValue)

    def Text(self) -> "cadex::ModelData_DrawingText":
        return _CadExCore.ModelData_DrawingDimension_Text(self)

    def SetText(self, theText: "ModelData_DrawingText") -> "void":
        return _CadExCore.ModelData_DrawingDimension_SetText(self, theText)
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingDimension

# Register ModelData_DrawingDimension in _CadExCore:
_CadExCore.ModelData_DrawingDimension_swigregister(ModelData_DrawingDimension)

class ModelData_DrawingAngularDimension(ModelData_DrawingDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_DrawingAngularDimension_swiginit(self, _CadExCore.new_ModelData_DrawingAngularDimension(*args))

    def AnglePoint(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingAngularDimension_AnglePoint(self)

    def SetAnglePoint(self, theAnglePoint: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingAngularDimension_SetAnglePoint(self, theAnglePoint)

    def FirstReferencePoint(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingAngularDimension_FirstReferencePoint(self)

    def SetFirstReferencePoint(self, theFirstReferencePoint: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingAngularDimension_SetFirstReferencePoint(self, theFirstReferencePoint)

    def SecondReferencePoint(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingAngularDimension_SecondReferencePoint(self)

    def SetSecondReferencePoint(self, theSecondReferencePoint: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingAngularDimension_SetSecondReferencePoint(self, theSecondReferencePoint)

    def DimensionArcPoint(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingAngularDimension_DimensionArcPoint(self)

    def SetDimensionArcPoint(self, theDimensionArcPoint: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingAngularDimension_SetDimensionArcPoint(self, theDimensionArcPoint)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_DrawingAngularDimension_GetTypeId()
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingAngularDimension

# Register ModelData_DrawingAngularDimension in _CadExCore:
_CadExCore.ModelData_DrawingAngularDimension_swigregister(ModelData_DrawingAngularDimension)

def ModelData_DrawingAngularDimension_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_DrawingAngularDimension_GetTypeId()

class ModelData_DrawingDiametricDimension(ModelData_DrawingDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_DrawingDiametricDimension_swiginit(self, _CadExCore.new_ModelData_DrawingDiametricDimension(*args))

    def FirstChordPoint(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingDiametricDimension_FirstChordPoint(self)

    def SetFirstChordPoint(self, theFirstChordPoint: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingDiametricDimension_SetFirstChordPoint(self, theFirstChordPoint)

    def SecondChordPoint(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingDiametricDimension_SecondChordPoint(self)

    def SetSecondChordPoint(self, theSecondChordPoint: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingDiametricDimension_SetSecondChordPoint(self, theSecondChordPoint)

    def DimensionEndPoint(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingDiametricDimension_DimensionEndPoint(self)

    def SetDimensionEndPoint(self, theDimensionEndPoint: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingDiametricDimension_SetDimensionEndPoint(self, theDimensionEndPoint)

    def StartsFromCenter(self) -> "bool":
        return _CadExCore.ModelData_DrawingDiametricDimension_StartsFromCenter(self)

    def SetStartsFromCenter(self, theStartsFromCenter: "bool") -> "void":
        return _CadExCore.ModelData_DrawingDiametricDimension_SetStartsFromCenter(self, theStartsFromCenter)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_DrawingDiametricDimension_GetTypeId()
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingDiametricDimension

# Register ModelData_DrawingDiametricDimension in _CadExCore:
_CadExCore.ModelData_DrawingDiametricDimension_swigregister(ModelData_DrawingDiametricDimension)

def ModelData_DrawingDiametricDimension_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_DrawingDiametricDimension_GetTypeId()

class ModelData_DrawingRadialDimension(ModelData_DrawingDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_DrawingRadialDimension_swiginit(self, _CadExCore.new_ModelData_DrawingRadialDimension(*args))

    def CenterPoint(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingRadialDimension_CenterPoint(self)

    def SetCenterPoint(self, theCenterPoint: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingRadialDimension_SetCenterPoint(self, theCenterPoint)

    def ChordPoint(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingRadialDimension_ChordPoint(self)

    def SetChordPoint(self, theChordPoint: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingRadialDimension_SetChordPoint(self, theChordPoint)

    def DimensionEndPoint(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingRadialDimension_DimensionEndPoint(self)

    def SetDimensionEndPoint(self, theDimensionEndPoint: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingRadialDimension_SetDimensionEndPoint(self, theDimensionEndPoint)

    def StartsFromCenter(self) -> "bool":
        return _CadExCore.ModelData_DrawingRadialDimension_StartsFromCenter(self)

    def SetStartsFromCenter(self, theStartsFromCenter: "bool") -> "void":
        return _CadExCore.ModelData_DrawingRadialDimension_SetStartsFromCenter(self, theStartsFromCenter)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_DrawingRadialDimension_GetTypeId()
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingRadialDimension

# Register ModelData_DrawingRadialDimension in _CadExCore:
_CadExCore.ModelData_DrawingRadialDimension_swigregister(ModelData_DrawingRadialDimension)

def ModelData_DrawingRadialDimension_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_DrawingRadialDimension_GetTypeId()

class ModelData_DrawingLinearDimension(ModelData_DrawingDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Horizontal = _CadExCore.ModelData_DrawingLinearDimension_Horizontal
    Vertical = _CadExCore.ModelData_DrawingLinearDimension_Vertical
    Aligned = _CadExCore.ModelData_DrawingLinearDimension_Aligned

    def __init__(self, *args):
        _CadExCore.ModelData_DrawingLinearDimension_swiginit(self, _CadExCore.new_ModelData_DrawingLinearDimension(*args))

    def FirstReferencePoint(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingLinearDimension_FirstReferencePoint(self)

    def SetFirstReferencePoint(self, theFirstReferencePoint: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingLinearDimension_SetFirstReferencePoint(self, theFirstReferencePoint)

    def SecondReferencePoint(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingLinearDimension_SecondReferencePoint(self)

    def SetSecondReferencePoint(self, theSecondReferencePoint: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingLinearDimension_SetSecondReferencePoint(self, theSecondReferencePoint)

    def DimensionLinePoint(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingLinearDimension_DimensionLinePoint(self)

    def SetDimensionLinePoint(self, theDimensionLinePoint: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingLinearDimension_SetDimensionLinePoint(self, theDimensionLinePoint)

    def Rotation(self) -> "cadex::ModelData_DrawingLinearDimension::RotationType":
        return _CadExCore.ModelData_DrawingLinearDimension_Rotation(self)

    def SetRotation(self, theRotation: "cadex::ModelData_DrawingLinearDimension::RotationType") -> "void":
        return _CadExCore.ModelData_DrawingLinearDimension_SetRotation(self, theRotation)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_DrawingLinearDimension_GetTypeId()
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingLinearDimension

# Register ModelData_DrawingLinearDimension in _CadExCore:
_CadExCore.ModelData_DrawingLinearDimension_swigregister(ModelData_DrawingLinearDimension)

def ModelData_DrawingLinearDimension_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_DrawingLinearDimension_GetTypeId()

class ModelData_DrawingGeometry(ModelData_DrawingElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingGeometry

# Register ModelData_DrawingGeometry in _CadExCore:
_CadExCore.ModelData_DrawingGeometry_swigregister(ModelData_DrawingGeometry)

class ModelData_DrawingCurveSet(ModelData_DrawingGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_DrawingCurveSet_swiginit(self, _CadExCore.new_ModelData_DrawingCurveSet())

    def AddCurve(self, theCurve: "ModelData_Curve2d") -> "void":
        return _CadExCore.ModelData_DrawingCurveSet_AddCurve(self, theCurve)

    def NumberOfCurves(self) -> "size_t":
        return _CadExCore.ModelData_DrawingCurveSet_NumberOfCurves(self)

    def Curve(self, theIndex: "size_t") -> "cadex::ModelData_Curve2d const &":
        return _CadExCore.ModelData_DrawingCurveSet_Curve(self, theIndex)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_DrawingCurveSet_GetTypeId()
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingCurveSet

# Register ModelData_DrawingCurveSet in _CadExCore:
_CadExCore.ModelData_DrawingCurveSet_swigregister(ModelData_DrawingCurveSet)

def ModelData_DrawingCurveSet_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_DrawingCurveSet_GetTypeId()

class ModelData_DrawingPointSet(ModelData_DrawingGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_DrawingPointSet_swiginit(self, _CadExCore.new_ModelData_DrawingPointSet())

    def AddPoint(self, thePoint: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingPointSet_AddPoint(self, thePoint)

    def NumberOfPoints(self) -> "size_t":
        return _CadExCore.ModelData_DrawingPointSet_NumberOfPoints(self)

    def Point(self, theIndex: "size_t") -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingPointSet_Point(self, theIndex)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_DrawingPointSet_GetTypeId()
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingPointSet

# Register ModelData_DrawingPointSet in _CadExCore:
_CadExCore.ModelData_DrawingPointSet_swigregister(ModelData_DrawingPointSet)

def ModelData_DrawingPointSet_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_DrawingPointSet_GetTypeId()

class ModelData_DrawingPiecewiseContour(ModelData_DrawingGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_DrawingPiecewiseContour_swiginit(self, _CadExCore.new_ModelData_DrawingPiecewiseContour())

    def IsClosed(self) -> "bool":
        return _CadExCore.ModelData_DrawingPiecewiseContour_IsClosed(self)

    def AddCurve(self, *args) -> "bool":
        return _CadExCore.ModelData_DrawingPiecewiseContour_AddCurve(self, *args)

    def NumberOfCurves(self) -> "size_t":
        return _CadExCore.ModelData_DrawingPiecewiseContour_NumberOfCurves(self)

    def Curve(self, theIndex: "size_t") -> "cadex::ModelData_Curve2d const &":
        return _CadExCore.ModelData_DrawingPiecewiseContour_Curve(self, theIndex)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_DrawingPiecewiseContour_GetTypeId()
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingPiecewiseContour

# Register ModelData_DrawingPiecewiseContour in _CadExCore:
_CadExCore.ModelData_DrawingPiecewiseContour_swigregister(ModelData_DrawingPiecewiseContour)

def ModelData_DrawingPiecewiseContour_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_DrawingPiecewiseContour_GetTypeId()

class ModelData_DrawingHatch(ModelData_DrawingElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Solid = _CadExCore.ModelData_DrawingHatch_Solid
    ANSI_31 = _CadExCore.ModelData_DrawingHatch_ANSI_31
    ANSI_32 = _CadExCore.ModelData_DrawingHatch_ANSI_32
    ANSI_33 = _CadExCore.ModelData_DrawingHatch_ANSI_33
    ANSI_34 = _CadExCore.ModelData_DrawingHatch_ANSI_34
    ANSI_35 = _CadExCore.ModelData_DrawingHatch_ANSI_35
    ANSI_36 = _CadExCore.ModelData_DrawingHatch_ANSI_36
    ANSI_37 = _CadExCore.ModelData_DrawingHatch_ANSI_37
    ANSI_38 = _CadExCore.ModelData_DrawingHatch_ANSI_38
    Standard = _CadExCore.ModelData_DrawingHatch_Standard
    Mirrored = _CadExCore.ModelData_DrawingHatch_Mirrored
    Double = _CadExCore.ModelData_DrawingHatch_Double
    Inner = _CadExCore.ModelData_DrawingHatch_Inner
    Outer = _CadExCore.ModelData_DrawingHatch_Outer

    def __init__(self):
        _CadExCore.ModelData_DrawingHatch_swiginit(self, _CadExCore.new_ModelData_DrawingHatch())

    def AddContour(self, *args) -> "bool":
        return _CadExCore.ModelData_DrawingHatch_AddContour(self, *args)

    def NumberOfContours(self) -> "size_t":
        return _CadExCore.ModelData_DrawingHatch_NumberOfContours(self)

    def Contour(self, theIndex: "size_t") -> "cadex::ModelData_DrawingPiecewiseContour const &":
        return _CadExCore.ModelData_DrawingHatch_Contour(self, theIndex)

    def TypeOfContour(self, theIndex: "size_t") -> "cadex::ModelData_DrawingHatch::ContourType":
        return _CadExCore.ModelData_DrawingHatch_TypeOfContour(self, theIndex)

    def SetStyle(self, theStyle: "cadex::ModelData_DrawingHatch::StyleType") -> "void":
        return _CadExCore.ModelData_DrawingHatch_SetStyle(self, theStyle)

    def Style(self) -> "cadex::ModelData_DrawingHatch::StyleType":
        return _CadExCore.ModelData_DrawingHatch_Style(self)

    def SetPattern(self, thePattern: "cadex::ModelData_DrawingHatch::PatternType") -> "void":
        return _CadExCore.ModelData_DrawingHatch_SetPattern(self, thePattern)

    def Pattern(self) -> "cadex::ModelData_DrawingHatch::PatternType":
        return _CadExCore.ModelData_DrawingHatch_Pattern(self)

    def SetScale(self, theScale: "double") -> "void":
        return _CadExCore.ModelData_DrawingHatch_SetScale(self, theScale)

    def Scale(self) -> "double":
        return _CadExCore.ModelData_DrawingHatch_Scale(self)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_DrawingHatch_GetTypeId()
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingHatch

# Register ModelData_DrawingHatch in _CadExCore:
_CadExCore.ModelData_DrawingHatch_swigregister(ModelData_DrawingHatch)

def ModelData_DrawingHatch_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_DrawingHatch_GetTypeId()

class ModelData_DrawingLayer(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_DrawingLayer_swiginit(self, _CadExCore.new_ModelData_DrawingLayer(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_DrawingLayer_GetTypeId()

    def IsVisible(self) -> "bool":
        return _CadExCore.ModelData_DrawingLayer_IsVisible(self)

    def SetIsVisible(self, theIsVisible: "bool") -> "void":
        return _CadExCore.ModelData_DrawingLayer_SetIsVisible(self, theIsVisible)

    def SetAppearance(self, theAppearance: "ModelData_Appearance") -> "void":
        return _CadExCore.ModelData_DrawingLayer_SetAppearance(self, theAppearance)

    def Appearance(self) -> "cadex::ModelData_Appearance":
        return _CadExCore.ModelData_DrawingLayer_Appearance(self)

    def Add(self, theElement: "ModelData_DrawingElement") -> "void":
        return _CadExCore.ModelData_DrawingLayer_Add(self, theElement)

    def Remove(self, theElement: "ModelData_DrawingElement") -> "bool":
        return _CadExCore.ModelData_DrawingLayer_Remove(self, theElement)

    def Contains(self, theElement: "ModelData_DrawingElement") -> "bool":
        return _CadExCore.ModelData_DrawingLayer_Contains(self, theElement)

    def Accept(self, theVisitor: "ModelData_DrawingElementVisitor") -> "void":
        return _CadExCore.ModelData_DrawingLayer_Accept(self, theVisitor)
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingLayer

# Register ModelData_DrawingLayer in _CadExCore:
_CadExCore.ModelData_DrawingLayer_swigregister(ModelData_DrawingLayer)

def ModelData_DrawingLayer_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_DrawingLayer_GetTypeId()

class ModelData_DrawingSheet(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UnknownPaperSize = _CadExCore.ModelData_DrawingSheet_UnknownPaperSize
    A0 = _CadExCore.ModelData_DrawingSheet_A0
    A1 = _CadExCore.ModelData_DrawingSheet_A1
    A2 = _CadExCore.ModelData_DrawingSheet_A2
    A3 = _CadExCore.ModelData_DrawingSheet_A3
    A4 = _CadExCore.ModelData_DrawingSheet_A4
    A = _CadExCore.ModelData_DrawingSheet_A
    B = _CadExCore.ModelData_DrawingSheet_B
    C = _CadExCore.ModelData_DrawingSheet_C
    D = _CadExCore.ModelData_DrawingSheet_D
    E = _CadExCore.ModelData_DrawingSheet_E
    UserDefinedPaperSize = _CadExCore.ModelData_DrawingSheet_UserDefinedPaperSize
    Landscape = _CadExCore.ModelData_DrawingSheet_Landscape
    Portrait = _CadExCore.ModelData_DrawingSheet_Portrait

    def __init__(self):
        _CadExCore.ModelData_DrawingSheet_swiginit(self, _CadExCore.new_ModelData_DrawingSheet())

    def Width(self) -> "double":
        return _CadExCore.ModelData_DrawingSheet_Width(self)

    def Height(self) -> "double":
        return _CadExCore.ModelData_DrawingSheet_Height(self)

    def PaperSize(self) -> "cadex::ModelData_DrawingSheet::PaperSizeType":
        return _CadExCore.ModelData_DrawingSheet_PaperSize(self)

    def Orientation(self) -> "cadex::ModelData_DrawingSheet::OrientationType":
        return _CadExCore.ModelData_DrawingSheet_Orientation(self)

    def SetStandardSheetSize(self, thePaperSize: "cadex::ModelData_DrawingSheet::PaperSizeType", theOrientation: "cadex::ModelData_DrawingSheet::OrientationType") -> "void":
        return _CadExCore.ModelData_DrawingSheet_SetStandardSheetSize(self, thePaperSize, theOrientation)

    def SetCustomSheetSize(self, theWidth: "double", theHeight: "double") -> "void":
        return _CadExCore.ModelData_DrawingSheet_SetCustomSheetSize(self, theWidth, theHeight)

    def NumberOfViews(self) -> "size_t":
        return _CadExCore.ModelData_DrawingSheet_NumberOfViews(self)

    def AddView(self, theView: "ModelData_DrawingView") -> "void":
        return _CadExCore.ModelData_DrawingSheet_AddView(self, theView)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_DrawingSheet_GetTypeId()

    def GetViewIterator(self):
        return ModelData_DrawingSheet_ViewIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingSheet

# Register ModelData_DrawingSheet in _CadExCore:
_CadExCore.ModelData_DrawingSheet_swigregister(ModelData_DrawingSheet)

def ModelData_DrawingSheet_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_DrawingSheet_GetTypeId()

class ModelData_DrawingSheet_ViewIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theSheet: "ModelData_DrawingSheet"):
        _CadExCore.ModelData_DrawingSheet_ViewIterator_swiginit(self, _CadExCore.new_ModelData_DrawingSheet_ViewIterator(theSheet))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_DrawingSheet_ViewIterator_HasNext(self)

    def Next(self) -> "cadex::ModelData_DrawingView const &":
        return _CadExCore.ModelData_DrawingSheet_ViewIterator_Next(self)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingSheet_ViewIterator

# Register ModelData_DrawingSheet_ViewIterator in _CadExCore:
_CadExCore.ModelData_DrawingSheet_ViewIterator_swigregister(ModelData_DrawingSheet_ViewIterator)

class ModelData_DrawingText(ModelData_DrawingElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_DrawingText_swiginit(self, _CadExCore.new_ModelData_DrawingText())

    def SetText(self, theText: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_DrawingText_SetText(self, theText)

    def Text(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_DrawingText_Text(self)

    def SetTextOrigin(self, theTextOrigin: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_DrawingText_SetTextOrigin(self, theTextOrigin)

    def TextOrigin(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_DrawingText_TextOrigin(self)

    def SetFontSize(self, theFontSize: "float") -> "void":
        return _CadExCore.ModelData_DrawingText_SetFontSize(self, theFontSize)

    def FontSize(self) -> "float":
        return _CadExCore.ModelData_DrawingText_FontSize(self)

    def SetTextProperties(self, theTextProperties: "cadex::ModelData_TextProperties const &") -> "void":
        return _CadExCore.ModelData_DrawingText_SetTextProperties(self, theTextProperties)

    def TextProperties(self) -> "cadex::ModelData_TextProperties":
        return _CadExCore.ModelData_DrawingText_TextProperties(self)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_DrawingText_GetTypeId()
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingText

# Register ModelData_DrawingText in _CadExCore:
_CadExCore.ModelData_DrawingText_swigregister(ModelData_DrawingText)

def ModelData_DrawingText_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_DrawingText_GetTypeId()

class ModelData_Ratio(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Ratio_swiginit(self, _CadExCore.new_ModelData_Ratio(*args))

    def Numerator(self) -> "size_t":
        return _CadExCore.ModelData_Ratio_Numerator(self)

    def SetNumerator(self, theNumerator: "size_t") -> "void":
        return _CadExCore.ModelData_Ratio_SetNumerator(self, theNumerator)

    def Denominator(self) -> "size_t":
        return _CadExCore.ModelData_Ratio_Denominator(self)

    def SetDenominator(self, theDenominator: "size_t") -> "void":
        return _CadExCore.ModelData_Ratio_SetDenominator(self, theDenominator)

    def ToDouble(self) -> "double":
        return _CadExCore.ModelData_Ratio_ToDouble(self)

    def IsEqual(self, theOther: "ModelData_Ratio") -> "bool":
        return _CadExCore.ModelData_Ratio_IsEqual(self, theOther)

    def IsNotEqual(self, theOther: "ModelData_Ratio") -> "bool":
        return _CadExCore.ModelData_Ratio_IsNotEqual(self, theOther)
    __swig_destroy__ = _CadExCore.delete_ModelData_Ratio

# Register ModelData_Ratio in _CadExCore:
_CadExCore.ModelData_Ratio_swigregister(ModelData_Ratio)

class ModelData_DrawingView(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_DrawingView_swiginit(self, _CadExCore.new_ModelData_DrawingView(*args))

    def Position(self) -> "cadex::ModelData_Axis2Placement2d const &":
        return _CadExCore.ModelData_DrawingView_Position(self)

    def SetPosition(self, thePosition: "ModelData_Axis2Placement2d") -> "void":
        return _CadExCore.ModelData_DrawingView_SetPosition(self, thePosition)

    def Scale(self) -> "cadex::ModelData_Ratio const &":
        return _CadExCore.ModelData_DrawingView_Scale(self)

    def SetScale(self, theScale: "ModelData_Ratio") -> "void":
        return _CadExCore.ModelData_DrawingView_SetScale(self, theScale)

    def NumberOfElements(self) -> "size_t":
        return _CadExCore.ModelData_DrawingView_NumberOfElements(self)

    def Add(self, theElement: "ModelData_DrawingElement") -> "void":
        return _CadExCore.ModelData_DrawingView_Add(self, theElement)

    def SetElementAppearance(self, theElement: "ModelData_DrawingElement", theAppearance: "ModelData_Appearance") -> "void":
        return _CadExCore.ModelData_DrawingView_SetElementAppearance(self, theElement, theAppearance)

    def ElementAppearance(self, theElement: "ModelData_DrawingElement") -> "cadex::ModelData_Appearance":
        return _CadExCore.ModelData_DrawingView_ElementAppearance(self, theElement)

    def Accept(self, theVisitor: "ModelData_DrawingElementVisitor") -> "void":
        return _CadExCore.ModelData_DrawingView_Accept(self, theVisitor)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_DrawingView_GetTypeId()

    def GetElementIterator(self):
        return ModelData_DrawingView_ElementIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingView

# Register ModelData_DrawingView in _CadExCore:
_CadExCore.ModelData_DrawingView_swigregister(ModelData_DrawingView)

def ModelData_DrawingView_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_DrawingView_GetTypeId()

class ModelData_DrawingView_ElementIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theView: "ModelData_DrawingView"):
        _CadExCore.ModelData_DrawingView_ElementIterator_swiginit(self, _CadExCore.new_ModelData_DrawingView_ElementIterator(theView))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_DrawingView_ElementIterator_HasNext(self)

    def Next(self) -> "cadex::ModelData_DrawingElement &":
        return _CadExCore.ModelData_DrawingView_ElementIterator_Next(self)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingView_ElementIterator

# Register ModelData_DrawingView_ElementIterator in _CadExCore:
_CadExCore.ModelData_DrawingView_ElementIterator_swigregister(ModelData_DrawingView_ElementIterator)

class ModelData_DrawingElementVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingElementVisitor

    @abstractmethod
    def VisitDrawingAngularDimension(self, theElement: "ModelData_DrawingAngularDimension") -> "void":
        return _CadExCore.ModelData_DrawingElementVisitor_VisitDrawingAngularDimension(self, theElement)

    @abstractmethod
    def VisitDrawingCurveSet(self, theElement: "ModelData_DrawingCurveSet") -> "void":
        return _CadExCore.ModelData_DrawingElementVisitor_VisitDrawingCurveSet(self, theElement)

    @abstractmethod
    def VisitDrawingDiametricDimension(self, theElement: "ModelData_DrawingDiametricDimension") -> "void":
        return _CadExCore.ModelData_DrawingElementVisitor_VisitDrawingDiametricDimension(self, theElement)

    @abstractmethod
    def VisitDrawingHatch(self, theElement: "ModelData_DrawingHatch") -> "void":
        return _CadExCore.ModelData_DrawingElementVisitor_VisitDrawingHatch(self, theElement)

    @abstractmethod
    def VisitDrawingLinearDimension(self, theElement: "ModelData_DrawingLinearDimension") -> "void":
        return _CadExCore.ModelData_DrawingElementVisitor_VisitDrawingLinearDimension(self, theElement)

    @abstractmethod
    def VisitDrawingPiecewiseContour(self, theElement: "ModelData_DrawingPiecewiseContour") -> "void":
        return _CadExCore.ModelData_DrawingElementVisitor_VisitDrawingPiecewiseContour(self, theElement)

    @abstractmethod
    def VisitDrawingPointSet(self, theElement: "ModelData_DrawingPointSet") -> "void":
        return _CadExCore.ModelData_DrawingElementVisitor_VisitDrawingPointSet(self, theElement)

    @abstractmethod
    def VisitDrawingRadialDimension(self, theElement: "ModelData_DrawingRadialDimension") -> "void":
        return _CadExCore.ModelData_DrawingElementVisitor_VisitDrawingRadialDimension(self, theElement)

    @abstractmethod
    def VisitDrawingText(self, theElement: "ModelData_DrawingText") -> "void":
        return _CadExCore.ModelData_DrawingElementVisitor_VisitDrawingText(self, theElement)

    def __init__(self):
        if self.__class__ == ModelData_DrawingElementVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_DrawingElementVisitor_swiginit(self, _CadExCore.new_ModelData_DrawingElementVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_DrawingElementVisitor(self)
        return weakref.proxy(self)

# Register ModelData_DrawingElementVisitor in _CadExCore:
_CadExCore.ModelData_DrawingElementVisitor_swigregister(ModelData_DrawingElementVisitor)

class ModelData_DrawingElementVoidVisitor(ModelData_DrawingElementVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def VisitDrawingAngularDimension(self, arg0: "ModelData_DrawingAngularDimension") -> "void":
        return _CadExCore.ModelData_DrawingElementVoidVisitor_VisitDrawingAngularDimension(self, arg0)

    def VisitDrawingCurveSet(self, arg0: "ModelData_DrawingCurveSet") -> "void":
        return _CadExCore.ModelData_DrawingElementVoidVisitor_VisitDrawingCurveSet(self, arg0)

    def VisitDrawingDiametricDimension(self, arg0: "ModelData_DrawingDiametricDimension") -> "void":
        return _CadExCore.ModelData_DrawingElementVoidVisitor_VisitDrawingDiametricDimension(self, arg0)

    def VisitDrawingHatch(self, arg0: "ModelData_DrawingHatch") -> "void":
        return _CadExCore.ModelData_DrawingElementVoidVisitor_VisitDrawingHatch(self, arg0)

    def VisitDrawingLinearDimension(self, arg0: "ModelData_DrawingLinearDimension") -> "void":
        return _CadExCore.ModelData_DrawingElementVoidVisitor_VisitDrawingLinearDimension(self, arg0)

    def VisitDrawingPiecewiseContour(self, arg0: "ModelData_DrawingPiecewiseContour") -> "void":
        return _CadExCore.ModelData_DrawingElementVoidVisitor_VisitDrawingPiecewiseContour(self, arg0)

    def VisitDrawingPointSet(self, arg0: "ModelData_DrawingPointSet") -> "void":
        return _CadExCore.ModelData_DrawingElementVoidVisitor_VisitDrawingPointSet(self, arg0)

    def VisitDrawingRadialDimension(self, arg0: "ModelData_DrawingRadialDimension") -> "void":
        return _CadExCore.ModelData_DrawingElementVoidVisitor_VisitDrawingRadialDimension(self, arg0)

    def VisitDrawingText(self, arg0: "ModelData_DrawingText") -> "void":
        return _CadExCore.ModelData_DrawingElementVoidVisitor_VisitDrawingText(self, arg0)

    def __init__(self):
        if self.__class__ == ModelData_DrawingElementVoidVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_DrawingElementVoidVisitor_swiginit(self, _CadExCore.new_ModelData_DrawingElementVoidVisitor(_self, ))
    __swig_destroy__ = _CadExCore.delete_ModelData_DrawingElementVoidVisitor
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_DrawingElementVoidVisitor(self)
        return weakref.proxy(self)

# Register ModelData_DrawingElementVoidVisitor in _CadExCore:
_CadExCore.ModelData_DrawingElementVoidVisitor_swigregister(ModelData_DrawingElementVoidVisitor)

class ModelData_LineProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Solid = _CadExCore.ModelData_LineProperties_Solid
    Dashed = _CadExCore.ModelData_LineProperties_Dashed
    Dotted = _CadExCore.ModelData_LineProperties_Dotted
    DashedDotted = _CadExCore.ModelData_LineProperties_DashedDotted
    DashDotDot = _CadExCore.ModelData_LineProperties_DashDotDot
    Single = _CadExCore.ModelData_LineProperties_Single
    SingleDot = _CadExCore.ModelData_LineProperties_SingleDot
    DoubleArrow = _CadExCore.ModelData_LineProperties_DoubleArrow
    StitchLine = _CadExCore.ModelData_LineProperties_StitchLine
    ChainLine = _CadExCore.ModelData_LineProperties_ChainLine
    CenterLine = _CadExCore.ModelData_LineProperties_CenterLine
    HiddenLine = _CadExCore.ModelData_LineProperties_HiddenLine
    PhantomLine = _CadExCore.ModelData_LineProperties_PhantomLine
    BreakLine1 = _CadExCore.ModelData_LineProperties_BreakLine1
    BreakLine2 = _CadExCore.ModelData_LineProperties_BreakLine2
    UserSpecifiedDashPattern = _CadExCore.ModelData_LineProperties_UserSpecifiedDashPattern

    def __init__(self):
        _CadExCore.ModelData_LineProperties_swiginit(self, _CadExCore.new_ModelData_LineProperties())

    def Type(self) -> "cadex::ModelData_LineProperties::LineType":
        return _CadExCore.ModelData_LineProperties_Type(self)

    def WidthScaleFactor(self) -> "float":
        return _CadExCore.ModelData_LineProperties_WidthScaleFactor(self)

    def IsEqual(self, theObj: "ModelData_LineProperties") -> "bool":
        return _CadExCore.ModelData_LineProperties_IsEqual(self, theObj)

    def __hash__(self):
        aHasher = ModelData_LinePropertiesHash()
        return int(aHasher(self))


    def __eq__(self, other):
        if id(other) == id(self):
            return True;
        if isinstance(other, ModelData_LineProperties):
            return self.IsEqual(other);
        return False;


    def SetType(self, theType: "cadex::ModelData_LineProperties::LineType") -> "void":
        return _CadExCore.ModelData_LineProperties_SetType(self, theType)

    def SetWidthScaleFactor(self, theWidthScaleFactor: "float") -> "void":
        return _CadExCore.ModelData_LineProperties_SetWidthScaleFactor(self, theWidthScaleFactor)
    __swig_destroy__ = _CadExCore.delete_ModelData_LineProperties

# Register ModelData_LineProperties in _CadExCore:
_CadExCore.ModelData_LineProperties_swigregister(ModelData_LineProperties)

class ModelData_LinePropertiesHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theLP: "ModelData_LineProperties") -> "size_t":
        return _CadExCore.ModelData_LinePropertiesHash___call__(self, theLP)

    def __init__(self):
        _CadExCore.ModelData_LinePropertiesHash_swiginit(self, _CadExCore.new_ModelData_LinePropertiesHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_LinePropertiesHash

# Register ModelData_LinePropertiesHash in _CadExCore:
_CadExCore.ModelData_LinePropertiesHash_swigregister(ModelData_LinePropertiesHash)

class ModelData_Material(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Material_swiginit(self, _CadExCore.new_ModelData_Material(*args))

    def AmbientColor(self) -> "cadex::ModelData_Color const &":
        return _CadExCore.ModelData_Material_AmbientColor(self)

    def DiffuseColor(self) -> "cadex::ModelData_Color const &":
        return _CadExCore.ModelData_Material_DiffuseColor(self)

    def SpecularColor(self) -> "cadex::ModelData_Color const &":
        return _CadExCore.ModelData_Material_SpecularColor(self)

    def EmissionColor(self) -> "cadex::ModelData_Color const &":
        return _CadExCore.ModelData_Material_EmissionColor(self)

    def Shininess(self) -> "float":
        return _CadExCore.ModelData_Material_Shininess(self)

    def IsEqual(self, theObj: "ModelData_Material") -> "bool":
        return _CadExCore.ModelData_Material_IsEqual(self, theObj)

    def __hash__(self):
        aHasher = ModelData_MaterialHash()
        return int(aHasher(self))


    def __eq__(self, other):
        if id(other) == id(self):
            return True;
        if isinstance(other, ModelData_Material):
            return self.IsEqual(other);
        return False;


    def SetAmbientColor(self, theAmbientColor: "ModelData_Color") -> "void":
        return _CadExCore.ModelData_Material_SetAmbientColor(self, theAmbientColor)

    def SetDiffuseColor(self, theDiffuseColor: "ModelData_Color") -> "void":
        return _CadExCore.ModelData_Material_SetDiffuseColor(self, theDiffuseColor)

    def SetSpecularColor(self, theSpecularColor: "ModelData_Color") -> "void":
        return _CadExCore.ModelData_Material_SetSpecularColor(self, theSpecularColor)

    def SetEmissionColor(self, theEmissionColor: "ModelData_Color") -> "void":
        return _CadExCore.ModelData_Material_SetEmissionColor(self, theEmissionColor)

    def SetShininess(self, theShininess: "float") -> "void":
        return _CadExCore.ModelData_Material_SetShininess(self, theShininess)
    __swig_destroy__ = _CadExCore.delete_ModelData_Material

# Register ModelData_Material in _CadExCore:
_CadExCore.ModelData_Material_swigregister(ModelData_Material)

class ModelData_MaterialHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theMaterial: "ModelData_Material") -> "size_t":
        return _CadExCore.ModelData_MaterialHash___call__(self, theMaterial)

    def __init__(self):
        _CadExCore.ModelData_MaterialHash_swiginit(self, _CadExCore.new_ModelData_MaterialHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_MaterialHash

# Register ModelData_MaterialHash in _CadExCore:
_CadExCore.ModelData_MaterialHash_swigregister(ModelData_MaterialHash)

class ModelData_ColorObject(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_ColorObject_swiginit(self, _CadExCore.new_ModelData_ColorObject(*args))

    def Value(self, *args) -> "cadex::ModelData_Color &":
        return _CadExCore.ModelData_ColorObject_Value(self, *args)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_ColorObject_GetTypeId()

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_ColorObject_swiginit(self, _CadExCore.new_ModelData_ColorObject(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def IsEqual(self, theObj: "ModelData_ColorObject") -> "bool":
        return _CadExCore.ModelData_ColorObject_IsEqual(self, theObj)

    def __hash__(self):
        aHasher = ModelData_ColorObjectHash()
        return int(aHasher(self))


    def __eq__(self, other):
        if id(other) == id(self):
            return True;
        if isinstance(other, ModelData_ColorObject):
            return self.IsEqual(other);
        return False;


    def SetValue(self, theColor: "ModelData_Color") -> "void":
        return _CadExCore.ModelData_ColorObject_SetValue(self, theColor)
    __swig_destroy__ = _CadExCore.delete_ModelData_ColorObject

# Register ModelData_ColorObject in _CadExCore:
_CadExCore.ModelData_ColorObject_swigregister(ModelData_ColorObject)

def ModelData_ColorObject_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_ColorObject_GetTypeId()

class ModelData_ColorObjectHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theColor: "ModelData_ColorObject") -> "size_t":
        return _CadExCore.ModelData_ColorObjectHash___call__(self, theColor)

    def __init__(self):
        _CadExCore.ModelData_ColorObjectHash_swiginit(self, _CadExCore.new_ModelData_ColorObjectHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_ColorObjectHash

# Register ModelData_ColorObjectHash in _CadExCore:
_CadExCore.ModelData_ColorObjectHash_swigregister(ModelData_ColorObjectHash)

class ModelData_MaterialObject(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_MaterialObject_swiginit(self, _CadExCore.new_ModelData_MaterialObject(*args))

    def Value(self, *args) -> "cadex::ModelData_Material &":
        return _CadExCore.ModelData_MaterialObject_Value(self, *args)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_MaterialObject_GetTypeId()

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_MaterialObject_swiginit(self, _CadExCore.new_ModelData_MaterialObject(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def IsEqual(self, theObj: "ModelData_MaterialObject") -> "bool":
        return _CadExCore.ModelData_MaterialObject_IsEqual(self, theObj)

    def __hash__(self):
        aHasher = ModelData_MaterialObjectHash()
        return int(aHasher(self))


    def __eq__(self, other):
        if id(other) == id(self):
            return True;
        if isinstance(other, ModelData_MaterialObject):
            return self.IsEqual(other);
        return False;


    def SetValue(self, theMaterial: "ModelData_Material") -> "void":
        return _CadExCore.ModelData_MaterialObject_SetValue(self, theMaterial)
    __swig_destroy__ = _CadExCore.delete_ModelData_MaterialObject

# Register ModelData_MaterialObject in _CadExCore:
_CadExCore.ModelData_MaterialObject_swigregister(ModelData_MaterialObject)

def ModelData_MaterialObject_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_MaterialObject_GetTypeId()

class ModelData_MaterialObjectHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theMaterial: "ModelData_MaterialObject") -> "size_t":
        return _CadExCore.ModelData_MaterialObjectHash___call__(self, theMaterial)

    def __init__(self):
        _CadExCore.ModelData_MaterialObjectHash_swiginit(self, _CadExCore.new_ModelData_MaterialObjectHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_MaterialObjectHash

# Register ModelData_MaterialObjectHash in _CadExCore:
_CadExCore.ModelData_MaterialObjectHash_swigregister(ModelData_MaterialObjectHash)

class ModelData_Appearance(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Appearance_swiginit(self, _CadExCore.new_ModelData_Appearance(*args))

    def GenericColor(self) -> "cadex::ModelData_ColorObject":
        return _CadExCore.ModelData_Appearance_GenericColor(self)

    def Material(self) -> "cadex::ModelData_MaterialObject":
        return _CadExCore.ModelData_Appearance_Material(self)

    def ToColor(self, theColor: "ModelData_Color") -> "bool":
        return _CadExCore.ModelData_Appearance_ToColor(self, theColor)

    def ToMaterial(self, theMaterial: "ModelData_Material") -> "bool":
        return _CadExCore.ModelData_Appearance_ToMaterial(self, theMaterial)

    def HasLineProperties(self) -> "bool":
        return _CadExCore.ModelData_Appearance_HasLineProperties(self)

    def Set(self, *args) -> "void":
        return _CadExCore.ModelData_Appearance_Set(self, *args)

    def LineProperties(self) -> "cadex::ModelData_LineProperties const &":
        return _CadExCore.ModelData_Appearance_LineProperties(self)

    def SetTextureSet(self, theTextureSet: "ModelData_TextureSet") -> "void":
        return _CadExCore.ModelData_Appearance_SetTextureSet(self, theTextureSet)

    def Add(self, theTexture: "ModelData_Texture") -> "void":
        return _CadExCore.ModelData_Appearance_Add(self, theTexture)

    def TextureSet(self) -> "cadex::ModelData_TextureSet":
        return _CadExCore.ModelData_Appearance_TextureSet(self)

    def CopyAndOverrideWith(self, theOther: "ModelData_Appearance") -> "void":
        return _CadExCore.ModelData_Appearance_CopyAndOverrideWith(self, theOther)

    def CopyAndCombineWith(self, theOther: "ModelData_Appearance") -> "void":
        return _CadExCore.ModelData_Appearance_CopyAndCombineWith(self, theOther)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_Appearance_GetTypeId()

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_Appearance_swiginit(self, _CadExCore.new_ModelData_Appearance(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def IsEqual(self, theObj: "ModelData_Appearance") -> "bool":
        return _CadExCore.ModelData_Appearance_IsEqual(self, theObj)

    def __hash__(self):
        aHasher = ModelData_AppearanceHash()
        return int(aHasher(self))


    def __eq__(self, other):
        if id(other) == id(self):
            return True;
        if isinstance(other, ModelData_Appearance):
            return self.IsEqual(other);
        return False;

    __swig_destroy__ = _CadExCore.delete_ModelData_Appearance

# Register ModelData_Appearance in _CadExCore:
_CadExCore.ModelData_Appearance_swigregister(ModelData_Appearance)

def ModelData_Appearance_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_Appearance_GetTypeId()

class ModelData_AppearanceHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theAppearance: "ModelData_Appearance") -> "size_t":
        return _CadExCore.ModelData_AppearanceHash___call__(self, theAppearance)

    def __init__(self):
        _CadExCore.ModelData_AppearanceHash_swiginit(self, _CadExCore.new_ModelData_AppearanceHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_AppearanceHash

# Register ModelData_AppearanceHash in _CadExCore:
_CadExCore.ModelData_AppearanceHash_swigregister(ModelData_AppearanceHash)

class ModelData_PropertyTable(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PropertyTable_GetTypeId()

    def __init__(self, arg2: "_ModelData_BaseObject_initialized"):
        _CadExCore.ModelData_PropertyTable_swiginit(self, _CadExCore.new_ModelData_PropertyTable(arg2))

    def Add(self, *args) -> "void":
        return _CadExCore.ModelData_PropertyTable_Add(self, *args)

    def HasProperty(self, theName: "Base_UTF16String", theFlushProviders: "bool"=False) -> "bool":
        return _CadExCore.ModelData_PropertyTable_HasProperty(self, theName, theFlushProviders)

    def IsEmpty(self) -> "bool":
        return _CadExCore.ModelData_PropertyTable_IsEmpty(self)

    def Size(self) -> "size_t":
        return _CadExCore.ModelData_PropertyTable_Size(self)

    def Clear(self) -> "void":
        return _CadExCore.ModelData_PropertyTable_Clear(self)

    def Accept(self, theVisitor: "ModelData_PropertyTable_Visitor") -> "void":
        return _CadExCore.ModelData_PropertyTable_Accept(self, theVisitor)

    @staticmethod
    def NamePropertyName() -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PropertyTable_NamePropertyName()

    @staticmethod
    def SurfaceAreaPropertyName() -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PropertyTable_SurfaceAreaPropertyName()

    @staticmethod
    def VolumePropertyName() -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PropertyTable_VolumePropertyName()

    @staticmethod
    def CentroidPropertyName() -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PropertyTable_CentroidPropertyName()

    @staticmethod
    def BoundingBoxPropertyName() -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PropertyTable_BoundingBoxPropertyName()

    @staticmethod
    def ExternalFilenamePropertyName() -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PropertyTable_ExternalFilenamePropertyName()

    def FindProperty(self, *args) -> "bool":
        return _CadExCore.ModelData_PropertyTable_FindProperty(self, *args)

    def Remove(self, theName: "Base_UTF16String", theFlushProviders: "bool"=False) -> "bool":
        return _CadExCore.ModelData_PropertyTable_Remove(self, theName, theFlushProviders)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PropertyTable_swiginit(self, _CadExCore.new_ModelData_PropertyTable(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())

    __swig_destroy__ = _CadExCore.delete_ModelData_PropertyTable

# Register ModelData_PropertyTable in _CadExCore:
_CadExCore.ModelData_PropertyTable_swigregister(ModelData_PropertyTable)

def ModelData_PropertyTable_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PropertyTable_GetTypeId()

def ModelData_PropertyTable_NamePropertyName() -> "cadex::Base_UTF16String const &":
    return _CadExCore.ModelData_PropertyTable_NamePropertyName()

def ModelData_PropertyTable_SurfaceAreaPropertyName() -> "cadex::Base_UTF16String const &":
    return _CadExCore.ModelData_PropertyTable_SurfaceAreaPropertyName()

def ModelData_PropertyTable_VolumePropertyName() -> "cadex::Base_UTF16String const &":
    return _CadExCore.ModelData_PropertyTable_VolumePropertyName()

def ModelData_PropertyTable_CentroidPropertyName() -> "cadex::Base_UTF16String const &":
    return _CadExCore.ModelData_PropertyTable_CentroidPropertyName()

def ModelData_PropertyTable_BoundingBoxPropertyName() -> "cadex::Base_UTF16String const &":
    return _CadExCore.ModelData_PropertyTable_BoundingBoxPropertyName()

def ModelData_PropertyTable_ExternalFilenamePropertyName() -> "cadex::Base_UTF16String const &":
    return _CadExCore.ModelData_PropertyTable_ExternalFilenamePropertyName()

class TimeType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.TimeType_swiginit(self, _CadExCore.new_TimeType(*args))
    myValue = property(_CadExCore.TimeType_myValue_get, _CadExCore.TimeType_myValue_set)
    __swig_destroy__ = _CadExCore.delete_TimeType

# Register TimeType in _CadExCore:
_CadExCore.TimeType_swigregister(TimeType)

class ModelData_PropertyTable_Visitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_PropertyTable_Visitor

    @abstractmethod
    def VisitI32(self, theName: "Base_UTF16String", theValue: "cadex::I32") -> "void":
        return _CadExCore.ModelData_PropertyTable_Visitor_VisitI32(self, theName, theValue)

    @abstractmethod
    def VisitI64(self, theName: "Base_UTF16String", theValue: "cadex::I64") -> "void":
        return _CadExCore.ModelData_PropertyTable_Visitor_VisitI64(self, theName, theValue)

    @abstractmethod
    def VisitFloat(self, theName: "Base_UTF16String", theValue: "float") -> "void":
        return _CadExCore.ModelData_PropertyTable_Visitor_VisitFloat(self, theName, theValue)

    @abstractmethod
    def VisitDouble(self, theName: "Base_UTF16String", theValue: "double") -> "void":
        return _CadExCore.ModelData_PropertyTable_Visitor_VisitDouble(self, theName, theValue)

    @abstractmethod
    def VisitTimeType(self, theName: "Base_UTF16String", theValue: "TimeType") -> "void":
        return _CadExCore.ModelData_PropertyTable_Visitor_VisitTimeType(self, theName, theValue)

    @abstractmethod
    def VisitUTF16String(self, theName: "Base_UTF16String", theValue: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_PropertyTable_Visitor_VisitUTF16String(self, theName, theValue)

    @abstractmethod
    def VisitPoint(self, theName: "Base_UTF16String", theValue: "ModelData_Point") -> "void":
        return _CadExCore.ModelData_PropertyTable_Visitor_VisitPoint(self, theName, theValue)

    @abstractmethod
    def VisitBox(self, theName: "Base_UTF16String", theValue: "ModelData_Box") -> "void":
        return _CadExCore.ModelData_PropertyTable_Visitor_VisitBox(self, theName, theValue)

    def __init__(self):
        if self.__class__ == ModelData_PropertyTable_Visitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_PropertyTable_Visitor_swiginit(self, _CadExCore.new_ModelData_PropertyTable_Visitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_PropertyTable_Visitor(self)
        return weakref.proxy(self)

# Register ModelData_PropertyTable_Visitor in _CadExCore:
_CadExCore.ModelData_PropertyTable_Visitor_swigregister(ModelData_PropertyTable_Visitor)

class ModelData_PropertyTable_VoidVisitor(ModelData_PropertyTable_Visitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def VisitI32(self, theName: "Base_UTF16String", theValue: "cadex::I32") -> "void":
        return _CadExCore.ModelData_PropertyTable_VoidVisitor_VisitI32(self, theName, theValue)

    def VisitI64(self, theName: "Base_UTF16String", theValue: "cadex::I64") -> "void":
        return _CadExCore.ModelData_PropertyTable_VoidVisitor_VisitI64(self, theName, theValue)

    def VisitFloat(self, theName: "Base_UTF16String", theValue: "float") -> "void":
        return _CadExCore.ModelData_PropertyTable_VoidVisitor_VisitFloat(self, theName, theValue)

    def VisitDouble(self, theName: "Base_UTF16String", theValue: "double") -> "void":
        return _CadExCore.ModelData_PropertyTable_VoidVisitor_VisitDouble(self, theName, theValue)

    def VisitTimeType(self, theName: "Base_UTF16String", theValue: "TimeType") -> "void":
        return _CadExCore.ModelData_PropertyTable_VoidVisitor_VisitTimeType(self, theName, theValue)

    def VisitUTF16String(self, theName: "Base_UTF16String", theValue: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_PropertyTable_VoidVisitor_VisitUTF16String(self, theName, theValue)

    def VisitPoint(self, theName: "Base_UTF16String", theValue: "ModelData_Point") -> "void":
        return _CadExCore.ModelData_PropertyTable_VoidVisitor_VisitPoint(self, theName, theValue)

    def VisitBox(self, theName: "Base_UTF16String", theValue: "ModelData_Box") -> "void":
        return _CadExCore.ModelData_PropertyTable_VoidVisitor_VisitBox(self, theName, theValue)

    def __init__(self):
        if self.__class__ == ModelData_PropertyTable_VoidVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_PropertyTable_VoidVisitor_swiginit(self, _CadExCore.new_ModelData_PropertyTable_VoidVisitor(_self, ))
    __swig_destroy__ = _CadExCore.delete_ModelData_PropertyTable_VoidVisitor
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_PropertyTable_VoidVisitor(self)
        return weakref.proxy(self)

# Register ModelData_PropertyTable_VoidVisitor in _CadExCore:
_CadExCore.ModelData_PropertyTable_VoidVisitor_swigregister(ModelData_PropertyTable_VoidVisitor)

class ModelData_PropertyTable_CombinedVisitor(ModelData_PropertyTable_Visitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def VisitI32(self, theName: "Base_UTF16String", theValue: "cadex::I32") -> "void":
        return _CadExCore.ModelData_PropertyTable_CombinedVisitor_VisitI32(self, theName, theValue)

    def VisitI64(self, theName: "Base_UTF16String", theValue: "cadex::I64") -> "void":
        return _CadExCore.ModelData_PropertyTable_CombinedVisitor_VisitI64(self, theName, theValue)

    def VisitFloat(self, theName: "Base_UTF16String", theValue: "float") -> "void":
        return _CadExCore.ModelData_PropertyTable_CombinedVisitor_VisitFloat(self, theName, theValue)

    def VisitDouble(self, theName: "Base_UTF16String", theValue: "double") -> "void":
        return _CadExCore.ModelData_PropertyTable_CombinedVisitor_VisitDouble(self, theName, theValue)

    def VisitTimeType(self, theName: "Base_UTF16String", theValue: "TimeType") -> "void":
        return _CadExCore.ModelData_PropertyTable_CombinedVisitor_VisitTimeType(self, theName, theValue)

    def VisitUTF16String(self, theName: "Base_UTF16String", theValue: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_PropertyTable_CombinedVisitor_VisitUTF16String(self, theName, theValue)

    def VisitPoint(self, theName: "Base_UTF16String", theValue: "ModelData_Point") -> "void":
        return _CadExCore.ModelData_PropertyTable_CombinedVisitor_VisitPoint(self, theName, theValue)

    def VisitBox(self, theName: "Base_UTF16String", theValue: "ModelData_Box") -> "void":
        return _CadExCore.ModelData_PropertyTable_CombinedVisitor_VisitBox(self, theName, theValue)

    @abstractmethod
    def Visit(self, theName: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_PropertyTable_CombinedVisitor_Visit(self, theName)

    def __init__(self):
        if self.__class__ == ModelData_PropertyTable_CombinedVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_PropertyTable_CombinedVisitor_swiginit(self, _CadExCore.new_ModelData_PropertyTable_CombinedVisitor(_self, ))
    __swig_destroy__ = _CadExCore.delete_ModelData_PropertyTable_CombinedVisitor
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_PropertyTable_CombinedVisitor(self)
        return weakref.proxy(self)

# Register ModelData_PropertyTable_CombinedVisitor in _CadExCore:
_CadExCore.ModelData_PropertyTable_CombinedVisitor_swigregister(ModelData_PropertyTable_CombinedVisitor)

class ModelData_Axis1Placement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Axis1Placement_swiginit(self, _CadExCore.new_ModelData_Axis1Placement(*args))

    def Location(self) -> "cadex::ModelData_Point const &":
        return _CadExCore.ModelData_Axis1Placement_Location(self)

    def Direction(self) -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_Axis1Placement_Direction(self)

    def IsCoaxial(self, theOther: "ModelData_Axis1Placement", theAngularTolerance: "double", theDistanceTolerance: "double", theAllowOpposite: "bool"=False) -> "bool":
        return _CadExCore.ModelData_Axis1Placement_IsCoaxial(self, theOther, theAngularTolerance, theDistanceTolerance, theAllowOpposite)

    @staticmethod
    def OX() -> "cadex::ModelData_Axis1Placement const &":
        return _CadExCore.ModelData_Axis1Placement_OX()

    @staticmethod
    def OY() -> "cadex::ModelData_Axis1Placement const &":
        return _CadExCore.ModelData_Axis1Placement_OY()

    @staticmethod
    def OZ() -> "cadex::ModelData_Axis1Placement const &":
        return _CadExCore.ModelData_Axis1Placement_OZ()

    def Transform(self, theTransformation: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Axis1Placement_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation") -> "cadex::ModelData_Axis1Placement":
        return _CadExCore.ModelData_Axis1Placement_Transformed(self, theTransformation)

    def Mirror(self, *args) -> "void":
        return _CadExCore.ModelData_Axis1Placement_Mirror(self, *args)

    def Rotate(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "void":
        return _CadExCore.ModelData_Axis1Placement_Rotate(self, theAxis, theAngle)

    def Rotated(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "cadex::ModelData_Axis1Placement":
        return _CadExCore.ModelData_Axis1Placement_Rotated(self, theAxis, theAngle)

    def Translate(self, theVector: "ModelData_Vector") -> "void":
        return _CadExCore.ModelData_Axis1Placement_Translate(self, theVector)

    def Translated(self, theVector: "ModelData_Vector") -> "cadex::ModelData_Axis1Placement":
        return _CadExCore.ModelData_Axis1Placement_Translated(self, theVector)
    __swig_destroy__ = _CadExCore.delete_ModelData_Axis1Placement

# Register ModelData_Axis1Placement in _CadExCore:
_CadExCore.ModelData_Axis1Placement_swigregister(ModelData_Axis1Placement)

def ModelData_Axis1Placement_OX() -> "cadex::ModelData_Axis1Placement const &":
    return _CadExCore.ModelData_Axis1Placement_OX()

def ModelData_Axis1Placement_OY() -> "cadex::ModelData_Axis1Placement const &":
    return _CadExCore.ModelData_Axis1Placement_OY()

def ModelData_Axis1Placement_OZ() -> "cadex::ModelData_Axis1Placement const &":
    return _CadExCore.ModelData_Axis1Placement_OZ()

class ModelData_Axis2Placement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Axis2Placement_swiginit(self, _CadExCore.new_ModelData_Axis2Placement(*args))

    @staticmethod
    def XOY() -> "cadex::ModelData_Axis2Placement &":
        return _CadExCore.ModelData_Axis2Placement_XOY()

    @staticmethod
    def YOZ() -> "cadex::ModelData_Axis2Placement &":
        return _CadExCore.ModelData_Axis2Placement_YOZ()

    @staticmethod
    def ZOX() -> "cadex::ModelData_Axis2Placement &":
        return _CadExCore.ModelData_Axis2Placement_ZOX()

    def Location(self) -> "cadex::ModelData_Point const &":
        return _CadExCore.ModelData_Axis2Placement_Location(self)

    def Axis(self) -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_Axis2Placement_Axis(self)

    def XDirection(self) -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_Axis2Placement_XDirection(self)

    def YDirection(self) -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_Axis2Placement_YDirection(self)

    def Transform(self, theTransformation: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Axis2Placement_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation") -> "cadex::ModelData_Axis2Placement":
        return _CadExCore.ModelData_Axis2Placement_Transformed(self, theTransformation)

    def Mirror(self, *args) -> "void":
        return _CadExCore.ModelData_Axis2Placement_Mirror(self, *args)

    def Rotate(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "void":
        return _CadExCore.ModelData_Axis2Placement_Rotate(self, theAxis, theAngle)

    def Rotated(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "cadex::ModelData_Axis2Placement":
        return _CadExCore.ModelData_Axis2Placement_Rotated(self, theAxis, theAngle)

    def Translate(self, theVector: "ModelData_Vector") -> "void":
        return _CadExCore.ModelData_Axis2Placement_Translate(self, theVector)

    def Translated(self, theVector: "ModelData_Vector") -> "cadex::ModelData_Axis2Placement":
        return _CadExCore.ModelData_Axis2Placement_Translated(self, theVector)
    __swig_destroy__ = _CadExCore.delete_ModelData_Axis2Placement

# Register ModelData_Axis2Placement in _CadExCore:
_CadExCore.ModelData_Axis2Placement_swigregister(ModelData_Axis2Placement)

def ModelData_Axis2Placement_XOY() -> "cadex::ModelData_Axis2Placement &":
    return _CadExCore.ModelData_Axis2Placement_XOY()

def ModelData_Axis2Placement_YOZ() -> "cadex::ModelData_Axis2Placement &":
    return _CadExCore.ModelData_Axis2Placement_YOZ()

def ModelData_Axis2Placement_ZOX() -> "cadex::ModelData_Axis2Placement &":
    return _CadExCore.ModelData_Axis2Placement_ZOX()

class ModelData_Axis3Placement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Axis3Placement_swiginit(self, _CadExCore.new_ModelData_Axis3Placement(*args))

    def Location(self) -> "cadex::ModelData_Point const &":
        return _CadExCore.ModelData_Axis3Placement_Location(self)

    def Axis(self) -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_Axis3Placement_Axis(self)

    def XDirection(self) -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_Axis3Placement_XDirection(self)

    def YDirection(self) -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_Axis3Placement_YDirection(self)

    def IsRightHanded(self) -> "bool":
        return _CadExCore.ModelData_Axis3Placement_IsRightHanded(self)

    def Transform(self, theTransformation: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Axis3Placement_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation") -> "cadex::ModelData_Axis3Placement":
        return _CadExCore.ModelData_Axis3Placement_Transformed(self, theTransformation)

    def Mirror(self, *args) -> "void":
        return _CadExCore.ModelData_Axis3Placement_Mirror(self, *args)

    def Rotate(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "void":
        return _CadExCore.ModelData_Axis3Placement_Rotate(self, theAxis, theAngle)

    def Rotated(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "cadex::ModelData_Axis3Placement":
        return _CadExCore.ModelData_Axis3Placement_Rotated(self, theAxis, theAngle)

    def Translate(self, theVector: "ModelData_Vector") -> "void":
        return _CadExCore.ModelData_Axis3Placement_Translate(self, theVector)

    def Translated(self, theVector: "ModelData_Vector") -> "cadex::ModelData_Axis3Placement":
        return _CadExCore.ModelData_Axis3Placement_Translated(self, theVector)
    __swig_destroy__ = _CadExCore.delete_ModelData_Axis3Placement

# Register ModelData_Axis3Placement in _CadExCore:
_CadExCore.ModelData_Axis3Placement_swigregister(ModelData_Axis3Placement)

class ModelData_Axis2Placement2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Axis2Placement2d_swiginit(self, _CadExCore.new_ModelData_Axis2Placement2d(*args))

    def Location(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_Axis2Placement2d_Location(self)

    def XDirection(self) -> "cadex::ModelData_Direction2d const &":
        return _CadExCore.ModelData_Axis2Placement2d_XDirection(self)

    def YDirection(self) -> "cadex::ModelData_Direction2d const &":
        return _CadExCore.ModelData_Axis2Placement2d_YDirection(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_Axis2Placement2d

# Register ModelData_Axis2Placement2d in _CadExCore:
_CadExCore.ModelData_Axis2Placement2d_swigregister(ModelData_Axis2Placement2d)

class ModelData_WriterParameters(Base_WriterParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Xml = _CadExCore.ModelData_WriterParameters_Xml
    Binary = _CadExCore.ModelData_WriterParameters_Binary
    Cdxfb = _CadExCore.ModelData_WriterParameters_Cdxfb

    def __init__(self):
        _CadExCore.ModelData_WriterParameters_swiginit(self, _CadExCore.new_ModelData_WriterParameters())

    def FileFormat(self) -> "cadex::ModelData_WriterParameters::FileFormatType":
        return _CadExCore.ModelData_WriterParameters_FileFormat(self)

    def SetFileFormat(self, theFileFormat: "cadex::ModelData_WriterParameters::FileFormatType") -> "void":
        return _CadExCore.ModelData_WriterParameters_SetFileFormat(self, theFileFormat)
    __swig_destroy__ = _CadExCore.delete_ModelData_WriterParameters

# Register ModelData_WriterParameters in _CadExCore:
_CadExCore.ModelData_WriterParameters_swigregister(ModelData_WriterParameters)

class ModelData_Model(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Model_swiginit(self, _CadExCore.new_ModelData_Model(*args))
    __swig_destroy__ = _CadExCore.delete_ModelData_Model

    def Merge(self, *args) -> "void":
        return _CadExCore.ModelData_Model_Merge(self, *args)

    def SetName(self, theName: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_Model_SetName(self, theName)

    def Name(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_Model_Name(self)

    def Open(self, *args) -> "bool":
        return _CadExCore.ModelData_Model_Open(self, *args)

    def Save(self, *args) -> "bool":
        return _CadExCore.ModelData_Model_Save(self, *args)

    def Clear(self) -> "void":
        return _CadExCore.ModelData_Model_Clear(self)

    def IsEmpty(self) -> "bool":
        return _CadExCore.ModelData_Model_IsEmpty(self)

    def AssignUuids(self) -> "void":
        return _CadExCore.ModelData_Model_AssignUuids(self)

    def AddRoot(self, theElement: "ModelData_SceneGraphElement") -> "cadex::ModelData_SceneGraphElement const &":
        return _CadExCore.ModelData_Model_AddRoot(self, theElement)

    def RemoveRoot(self, theElement: "ModelData_SceneGraphElement") -> "bool":
        return _CadExCore.ModelData_Model_RemoveRoot(self, theElement)

    def NumberOfRoots(self) -> "size_t":
        return _CadExCore.ModelData_Model_NumberOfRoots(self)

    def SetDrawing(self, theDrawing: "ModelData_Drawing") -> "void":
        return _CadExCore.ModelData_Model_SetDrawing(self, theDrawing)

    def Drawing(self) -> "cadex::ModelData_Drawing":
        return _CadExCore.ModelData_Model_Drawing(self)

    def AddLayer(self, theLayer: "ModelData_Layer") -> "void":
        return _CadExCore.ModelData_Model_AddLayer(self, theLayer)

    def AcceptLayerVisitor(self, theVisitor: "ModelData_Model_LayerVisitor") -> "void":
        return _CadExCore.ModelData_Model_AcceptLayerVisitor(self, theVisitor)

    def AcceptElementVisitor(self, theVisitor: "ModelData_Model_ElementVisitor"):
        anIt = self.GetElementIterator()
        for i in anIt:
            i.AcceptElementVisitor(theVisitor)

    def __iter__(self):
        return ModelData_Model_ElementVisitor(self)


    def GetElementIterator(self):
        return ModelData_Model_ElementIterator(self)


    def GetLayerIterator(self):
        return ModelData_Model_LayerIterator(self)


# Register ModelData_Model in _CadExCore:
_CadExCore.ModelData_Model_swigregister(ModelData_Model)

class ModelData_Model_ElementVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_Model_ElementVisitor

    @abstractmethod
    def VisitPart(self, thePart: "ModelData_Part") -> "void":
        return _CadExCore.ModelData_Model_ElementVisitor_VisitPart(self, thePart)

    @abstractmethod
    def VisitEnterAssembly(self, theAssembly: "ModelData_Assembly") -> "bool":
        return _CadExCore.ModelData_Model_ElementVisitor_VisitEnterAssembly(self, theAssembly)

    @abstractmethod
    def VisitLeaveAssembly(self, theAssembly: "ModelData_Assembly") -> "void":
        return _CadExCore.ModelData_Model_ElementVisitor_VisitLeaveAssembly(self, theAssembly)

    @abstractmethod
    def VisitEnterInstance(self, theInstance: "ModelData_Instance") -> "bool":
        return _CadExCore.ModelData_Model_ElementVisitor_VisitEnterInstance(self, theInstance)

    @abstractmethod
    def VisitLeaveInstance(self, theInstance: "ModelData_Instance") -> "void":
        return _CadExCore.ModelData_Model_ElementVisitor_VisitLeaveInstance(self, theInstance)

    def __init__(self):
        if self.__class__ == ModelData_Model_ElementVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_Model_ElementVisitor_swiginit(self, _CadExCore.new_ModelData_Model_ElementVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_Model_ElementVisitor(self)
        return weakref.proxy(self)

# Register ModelData_Model_ElementVisitor in _CadExCore:
_CadExCore.ModelData_Model_ElementVisitor_swigregister(ModelData_Model_ElementVisitor)

class ModelData_Model_VoidElementVisitor(ModelData_Model_ElementVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def VisitPart(self, thePart: "ModelData_Part") -> "void":
        return _CadExCore.ModelData_Model_VoidElementVisitor_VisitPart(self, thePart)

    def VisitEnterAssembly(self, theAssembly: "ModelData_Assembly") -> "bool":
        return _CadExCore.ModelData_Model_VoidElementVisitor_VisitEnterAssembly(self, theAssembly)

    def VisitLeaveAssembly(self, theAssembly: "ModelData_Assembly") -> "void":
        return _CadExCore.ModelData_Model_VoidElementVisitor_VisitLeaveAssembly(self, theAssembly)

    def VisitEnterInstance(self, theInstance: "ModelData_Instance") -> "bool":
        return _CadExCore.ModelData_Model_VoidElementVisitor_VisitEnterInstance(self, theInstance)

    def VisitLeaveInstance(self, theInstance: "ModelData_Instance") -> "void":
        return _CadExCore.ModelData_Model_VoidElementVisitor_VisitLeaveInstance(self, theInstance)

    def __init__(self):
        if self.__class__ == ModelData_Model_VoidElementVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_Model_VoidElementVisitor_swiginit(self, _CadExCore.new_ModelData_Model_VoidElementVisitor(_self, ))
    __swig_destroy__ = _CadExCore.delete_ModelData_Model_VoidElementVisitor
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_Model_VoidElementVisitor(self)
        return weakref.proxy(self)

# Register ModelData_Model_VoidElementVisitor in _CadExCore:
_CadExCore.ModelData_Model_VoidElementVisitor_swigregister(ModelData_Model_VoidElementVisitor)

class ModelData_Model_CombinedElementVisitor(ModelData_Model_ElementVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def VisitPart(self, thePart: "ModelData_Part") -> "void":
        return _CadExCore.ModelData_Model_CombinedElementVisitor_VisitPart(self, thePart)

    def VisitEnterAssembly(self, theAssembly: "ModelData_Assembly") -> "bool":
        return _CadExCore.ModelData_Model_CombinedElementVisitor_VisitEnterAssembly(self, theAssembly)

    def VisitLeaveAssembly(self, theAssembly: "ModelData_Assembly") -> "void":
        return _CadExCore.ModelData_Model_CombinedElementVisitor_VisitLeaveAssembly(self, theAssembly)

    def VisitEnterInstance(self, theInstance: "ModelData_Instance") -> "bool":
        return _CadExCore.ModelData_Model_CombinedElementVisitor_VisitEnterInstance(self, theInstance)

    def VisitLeaveInstance(self, theInstance: "ModelData_Instance") -> "void":
        return _CadExCore.ModelData_Model_CombinedElementVisitor_VisitLeaveInstance(self, theInstance)

    @abstractmethod
    def VisitEnterSGE(self, theElement: "ModelData_SceneGraphElement") -> "bool":
        return _CadExCore.ModelData_Model_CombinedElementVisitor_VisitEnterSGE(self, theElement)

    def VisitLeaveSGE(self, theElement: "ModelData_SceneGraphElement") -> "void":
        return _CadExCore.ModelData_Model_CombinedElementVisitor_VisitLeaveSGE(self, theElement)

    def __init__(self):
        if self.__class__ == ModelData_Model_CombinedElementVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_Model_CombinedElementVisitor_swiginit(self, _CadExCore.new_ModelData_Model_CombinedElementVisitor(_self, ))
    __swig_destroy__ = _CadExCore.delete_ModelData_Model_CombinedElementVisitor
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_Model_CombinedElementVisitor(self)
        return weakref.proxy(self)

# Register ModelData_Model_CombinedElementVisitor in _CadExCore:
_CadExCore.ModelData_Model_CombinedElementVisitor_swigregister(ModelData_Model_CombinedElementVisitor)

class ModelData_Model_ElementIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Model_ElementIterator_swiginit(self, _CadExCore.new_ModelData_Model_ElementIterator(*args))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_Model_ElementIterator_HasNext(self)

    def Next(self, *args) -> "cadex::ModelData_SceneGraphElement &":
        return _CadExCore.ModelData_Model_ElementIterator_Next(self, *args)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_Model_ElementIterator

# Register ModelData_Model_ElementIterator in _CadExCore:
_CadExCore.ModelData_Model_ElementIterator_swigregister(ModelData_Model_ElementIterator)

class ModelData_Model_LayerIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theModel: "ModelData_Model"):
        _CadExCore.ModelData_Model_LayerIterator_swiginit(self, _CadExCore.new_ModelData_Model_LayerIterator(theModel))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_Model_LayerIterator_HasNext(self)

    def Next(self, *args) -> "cadex::ModelData_Layer &":
        return _CadExCore.ModelData_Model_LayerIterator_Next(self, *args)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_Model_LayerIterator

# Register ModelData_Model_LayerIterator in _CadExCore:
_CadExCore.ModelData_Model_LayerIterator_swigregister(ModelData_Model_LayerIterator)

class ModelData_Model_LayerVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_Model_LayerVisitor

    @abstractmethod
    def VisitLayer(self, theLayer: "ModelData_Layer") -> "void":
        return _CadExCore.ModelData_Model_LayerVisitor_VisitLayer(self, theLayer)

    def __init__(self):
        if self.__class__ == ModelData_Model_LayerVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_Model_LayerVisitor_swiginit(self, _CadExCore.new_ModelData_Model_LayerVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_Model_LayerVisitor(self)
        return weakref.proxy(self)

# Register ModelData_Model_LayerVisitor in _CadExCore:
_CadExCore.ModelData_Model_LayerVisitor_swigregister(ModelData_Model_LayerVisitor)

class ModelData_SceneGraphElement(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetAppearance(self, theAppearance: "ModelData_Appearance") -> "void":
        return _CadExCore.ModelData_SceneGraphElement_SetAppearance(self, theAppearance)

    def Appearance(self) -> "cadex::ModelData_Appearance":
        return _CadExCore.ModelData_SceneGraphElement_Appearance(self)

    def AddProperties(self, theProperties: "ModelData_PropertyTable") -> "void":
        return _CadExCore.ModelData_SceneGraphElement_AddProperties(self, theProperties)

    def Properties(self) -> "cadex::ModelData_PropertyTable":
        return _CadExCore.ModelData_SceneGraphElement_Properties(self)

    def AddPMI(self, thePMI: "ModelData_PMITable") -> "void":
        return _CadExCore.ModelData_SceneGraphElement_AddPMI(self, thePMI)

    def PMI(self) -> "cadex::ModelData_PMITable":
        return _CadExCore.ModelData_SceneGraphElement_PMI(self)

    def AddConfigurations(self, theConfigurations: "ModelData_ConfigurationManager") -> "void":
        return _CadExCore.ModelData_SceneGraphElement_AddConfigurations(self, theConfigurations)

    def Configurations(self) -> "cadex::ModelData_ConfigurationManager":
        return _CadExCore.ModelData_SceneGraphElement_Configurations(self)

    def AddToLayer(self, theLayer: "ModelData_Layer") -> "void":
        return _CadExCore.ModelData_SceneGraphElement_AddToLayer(self, theLayer)

    def AcceptElementVisitor(self, theVisitor):
        anSGE = None
        if self.TypeId() == ModelData_Assembly.GetTypeId():
            anSGE = ModelData_Assembly.Cast(self);
        elif self.TypeId() == ModelData_Instance.GetTypeId():
            anSGE = ModelData_Instance.Cast(self);
        elif self.TypeId() == ModelData_Part.GetTypeId():
            anSGE = ModelData_Part.Cast(self);
        anSGE.AcceptElementVisitor(theVisitor);

    def GetElementIterator(self):
        return ModelData_Model_ElementIterator(self)


    def GetLayerIterator(self):
        return ModelData_SceneGraphElement_LayerIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_SceneGraphElement

# Register ModelData_SceneGraphElement in _CadExCore:
_CadExCore.ModelData_SceneGraphElement_swigregister(ModelData_SceneGraphElement)

class ModelData_SceneGraphElement_LayerIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theSGE: "ModelData_SceneGraphElement"):
        _CadExCore.ModelData_SceneGraphElement_LayerIterator_swiginit(self, _CadExCore.new_ModelData_SceneGraphElement_LayerIterator(theSGE))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_SceneGraphElement_LayerIterator_HasNext(self)

    def Next(self) -> "cadex::ModelData_Layer":
        return _CadExCore.ModelData_SceneGraphElement_LayerIterator_Next(self)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_SceneGraphElement_LayerIterator

# Register ModelData_SceneGraphElement_LayerIterator in _CadExCore:
_CadExCore.ModelData_SceneGraphElement_LayerIterator_swigregister(ModelData_SceneGraphElement_LayerIterator)

ModelData_C0 = _CadExCore.ModelData_C0
ModelData_C1 = _CadExCore.ModelData_C1
ModelData_C2 = _CadExCore.ModelData_C2
ModelData_CN = _CadExCore.ModelData_CN
ModelData_CT_Line = _CadExCore.ModelData_CT_Line
ModelData_CT_Circle = _CadExCore.ModelData_CT_Circle
ModelData_CT_Ellipse = _CadExCore.ModelData_CT_Ellipse
ModelData_CT_Hyperbola = _CadExCore.ModelData_CT_Hyperbola
ModelData_CT_Parabola = _CadExCore.ModelData_CT_Parabola
ModelData_CT_Bezier = _CadExCore.ModelData_CT_Bezier
ModelData_CT_BSpline = _CadExCore.ModelData_CT_BSpline
ModelData_CT_Offset = _CadExCore.ModelData_CT_Offset
ModelData_CT_Trimmed = _CadExCore.ModelData_CT_Trimmed
ModelData_CT_Undefined = _CadExCore.ModelData_CT_Undefined
ModelData_CT_UserDefined = _CadExCore.ModelData_CT_UserDefined
class ModelData_Curve2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Curve2d_swiginit(self, _CadExCore.new_ModelData_Curve2d(*args))
    __swig_destroy__ = _CadExCore.delete_ModelData_Curve2d

    def Type(self) -> "cadex::ModelData_CurveType":
        return _CadExCore.ModelData_Curve2d_Type(self)

    def IsNull(self) -> "bool":
        return _CadExCore.ModelData_Curve2d_IsNull(self)

    def Nullify(self) -> "void":
        return _CadExCore.ModelData_Curve2d_Nullify(self)

    def IsPeriodic(self) -> "bool":
        return _CadExCore.ModelData_Curve2d_IsPeriodic(self)

    def UMin(self) -> "double":
        return _CadExCore.ModelData_Curve2d_UMin(self)

    def UMax(self) -> "double":
        return _CadExCore.ModelData_Curve2d_UMax(self)

    def Domain(self) -> "void":
        return _CadExCore.ModelData_Curve2d_Domain(self)

    def Value(self, theParameter: "double") -> "cadex::ModelData_Point2d":
        return _CadExCore.ModelData_Curve2d_Value(self, theParameter)

    def Reversed(self) -> "cadex::ModelData_Curve2d":
        return _CadExCore.ModelData_Curve2d_Reversed(self)

    def Transform(self, theTransformation: "ModelData_Transformation2d") -> "void":
        return _CadExCore.ModelData_Curve2d_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation2d") -> "cadex::ModelData_Curve2d":
        return _CadExCore.ModelData_Curve2d_Transformed(self, theTransformation)

    def Continuity(self) -> "cadex::ModelData_Continuity":
        return _CadExCore.ModelData_Curve2d_Continuity(self)

    def D0(self, theParameter: "double", theValue: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_Curve2d_D0(self, theParameter, theValue)

    def D1(self, theParameter: "double", theValue: "ModelData_Point2d", theD1: "ModelData_Vector2d") -> "void":
        return _CadExCore.ModelData_Curve2d_D1(self, theParameter, theValue, theD1)

    def D2(self, theParameter: "double", theValue: "ModelData_Point2d", theD1: "ModelData_Vector2d", theD2: "ModelData_Vector2d") -> "void":
        return _CadExCore.ModelData_Curve2d_D2(self, theParameter, theValue, theD1, theD2)

    def Curvature(self, theParameter: "double") -> "double":
        return _CadExCore.ModelData_Curve2d_Curvature(self, theParameter)

    def Normal(self, theParameter: "double", theNormal: "ModelData_Direction2d") -> "void":
        return _CadExCore.ModelData_Curve2d_Normal(self, theParameter, theNormal)

    def IsEqual(self, theObj: "ModelData_Curve2d") -> "bool":
        return _CadExCore.ModelData_Curve2d_IsEqual(self, theObj)

    def __eq__(self, other):
        if id(other) == id(self):
            return True;
        if isinstance(other, ModelData_Curve2d):
            return self.IsEqual(other);
        return False;


    def DN(self, theParameter: "double", theDerivativeOrder: "size_t", theValue: "ModelData_Point2d", theD: "ModelData_Vector2dList") -> "bool":
        return _CadExCore.ModelData_Curve2d_DN(self, theParameter, theDerivativeOrder, theValue, theD)

# Register ModelData_Curve2d in _CadExCore:
_CadExCore.ModelData_Curve2d_swigregister(ModelData_Curve2d)

class ModelData_Curve2dHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theCurve: "ModelData_Curve2d") -> "size_t":
        return _CadExCore.ModelData_Curve2dHash___call__(self, theCurve)

    def __init__(self):
        _CadExCore.ModelData_Curve2dHash_swiginit(self, _CadExCore.new_ModelData_Curve2dHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_Curve2dHash

# Register ModelData_Curve2dHash in _CadExCore:
_CadExCore.ModelData_Curve2dHash_swigregister(ModelData_Curve2dHash)

class ModelData_Curve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Curve_swiginit(self, _CadExCore.new_ModelData_Curve(*args))
    __swig_destroy__ = _CadExCore.delete_ModelData_Curve

    def Type(self) -> "cadex::ModelData_CurveType":
        return _CadExCore.ModelData_Curve_Type(self)

    def IsNull(self) -> "bool":
        return _CadExCore.ModelData_Curve_IsNull(self)

    def Nullify(self) -> "void":
        return _CadExCore.ModelData_Curve_Nullify(self)

    def IsPeriodic(self) -> "bool":
        return _CadExCore.ModelData_Curve_IsPeriodic(self)

    def UMin(self) -> "double":
        return _CadExCore.ModelData_Curve_UMin(self)

    def UMax(self) -> "double":
        return _CadExCore.ModelData_Curve_UMax(self)

    def Domain(self) -> "void":
        return _CadExCore.ModelData_Curve_Domain(self)

    def Value(self, theParameter: "double") -> "cadex::ModelData_Point":
        return _CadExCore.ModelData_Curve_Value(self, theParameter)

    def Reversed(self) -> "cadex::ModelData_Curve":
        return _CadExCore.ModelData_Curve_Reversed(self)

    def Transform(self, theTransformation: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Curve_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation") -> "cadex::ModelData_Curve":
        return _CadExCore.ModelData_Curve_Transformed(self, theTransformation)

    def Continuity(self) -> "cadex::ModelData_Continuity":
        return _CadExCore.ModelData_Curve_Continuity(self)

    def D0(self, theParameter: "double", theValue: "ModelData_Point") -> "void":
        return _CadExCore.ModelData_Curve_D0(self, theParameter, theValue)

    def D1(self, theParameter: "double", theValue: "ModelData_Point", theD1: "ModelData_Vector") -> "void":
        return _CadExCore.ModelData_Curve_D1(self, theParameter, theValue, theD1)

    def D2(self, theParameter: "double", theValue: "ModelData_Point", theD1: "ModelData_Vector", theD2: "ModelData_Vector") -> "void":
        return _CadExCore.ModelData_Curve_D2(self, theParameter, theValue, theD1, theD2)

    def Curvature(self, theParameter: "double") -> "double":
        return _CadExCore.ModelData_Curve_Curvature(self, theParameter)

    def Normal(self, theParameter: "double", theNormal: "ModelData_Direction") -> "void":
        return _CadExCore.ModelData_Curve_Normal(self, theParameter, theNormal)

    def Mirror(self, *args) -> "void":
        return _CadExCore.ModelData_Curve_Mirror(self, *args)

    def Mirrored(self, *args) -> "cadex::ModelData_Curve":
        return _CadExCore.ModelData_Curve_Mirrored(self, *args)

    def Rotate(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "void":
        return _CadExCore.ModelData_Curve_Rotate(self, theAxis, theAngle)

    def Rotated(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "cadex::ModelData_Curve":
        return _CadExCore.ModelData_Curve_Rotated(self, theAxis, theAngle)

    def Translate(self, theVector: "ModelData_Vector") -> "void":
        return _CadExCore.ModelData_Curve_Translate(self, theVector)

    def Translated(self, theVector: "ModelData_Vector") -> "cadex::ModelData_Curve":
        return _CadExCore.ModelData_Curve_Translated(self, theVector)

    def Scale(self, thePoint: "ModelData_Point", theScale: "double") -> "void":
        return _CadExCore.ModelData_Curve_Scale(self, thePoint, theScale)

    def Scaled(self, thePoint: "ModelData_Point", theScale: "double") -> "cadex::ModelData_Curve":
        return _CadExCore.ModelData_Curve_Scaled(self, thePoint, theScale)

    def IsEqual(self, theObj: "ModelData_Curve") -> "bool":
        return _CadExCore.ModelData_Curve_IsEqual(self, theObj)

    def __eq__(self, other):
        if id(other) == id(self):
            return True;
        if isinstance(other, ModelData_Curve):
            return self.IsEqual(other);
        return False;


    def DN(self, theParameter: "double", theDerivativeOrder: "size_t", theValue: "ModelData_Point", theD: "ModelData_VectorList") -> "bool":
        return _CadExCore.ModelData_Curve_DN(self, theParameter, theDerivativeOrder, theValue, theD)

# Register ModelData_Curve in _CadExCore:
_CadExCore.ModelData_Curve_swigregister(ModelData_Curve)

class ModelData_CurveHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theCurve: "ModelData_Curve") -> "size_t":
        return _CadExCore.ModelData_CurveHash___call__(self, theCurve)

    def __init__(self):
        _CadExCore.ModelData_CurveHash_swiginit(self, _CadExCore.new_ModelData_CurveHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_CurveHash

# Register ModelData_CurveHash in _CadExCore:
_CadExCore.ModelData_CurveHash_swigregister(ModelData_CurveHash)

class ModelData_TrimmedCurve2d(ModelData_Curve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theBasisCurve: "ModelData_Curve2d", U1: "double", U2: "double"):
        _CadExCore.ModelData_TrimmedCurve2d_swiginit(self, _CadExCore.new_ModelData_TrimmedCurve2d(theBasisCurve, U1, U2))

    def BasisCurve(self) -> "cadex::ModelData_Curve2d":
        return _CadExCore.ModelData_TrimmedCurve2d_BasisCurve(self)

    @staticmethod
    def Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_TrimmedCurve2d":
        return _CadExCore.ModelData_TrimmedCurve2d_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_TrimmedCurve2d

# Register ModelData_TrimmedCurve2d in _CadExCore:
_CadExCore.ModelData_TrimmedCurve2d_swigregister(ModelData_TrimmedCurve2d)

def ModelData_TrimmedCurve2d_Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_TrimmedCurve2d":
    return _CadExCore.ModelData_TrimmedCurve2d_Cast(theBase)

class ModelData_TrimmedCurve(ModelData_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theBasisCurve: "ModelData_Curve", U1: "double", U2: "double"):
        _CadExCore.ModelData_TrimmedCurve_swiginit(self, _CadExCore.new_ModelData_TrimmedCurve(theBasisCurve, U1, U2))

    def BasisCurve(self) -> "cadex::ModelData_Curve":
        return _CadExCore.ModelData_TrimmedCurve_BasisCurve(self)

    @staticmethod
    def Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_TrimmedCurve":
        return _CadExCore.ModelData_TrimmedCurve_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_TrimmedCurve

# Register ModelData_TrimmedCurve in _CadExCore:
_CadExCore.ModelData_TrimmedCurve_swigregister(ModelData_TrimmedCurve)

def ModelData_TrimmedCurve_Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_TrimmedCurve":
    return _CadExCore.ModelData_TrimmedCurve_Cast(theBase)

class ModelData_Line2d(ModelData_Curve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theLocation: "ModelData_Point2d", theDirection: "ModelData_Direction2d"):
        _CadExCore.ModelData_Line2d_swiginit(self, _CadExCore.new_ModelData_Line2d(theLocation, theDirection))

    def Location(self) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_Line2d_Location(self)

    def Direction(self) -> "cadex::ModelData_Direction2d const &":
        return _CadExCore.ModelData_Line2d_Direction(self)

    def Parameter(self, thePoint: "ModelData_Point2d") -> "double":
        return _CadExCore.ModelData_Line2d_Parameter(self, thePoint)

    @staticmethod
    def Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_Line2d":
        return _CadExCore.ModelData_Line2d_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_Line2d

# Register ModelData_Line2d in _CadExCore:
_CadExCore.ModelData_Line2d_swigregister(ModelData_Line2d)

def ModelData_Line2d_Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_Line2d":
    return _CadExCore.ModelData_Line2d_Cast(theBase)

class ModelData_Line(ModelData_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theLocation: "ModelData_Point", theDirection: "ModelData_Direction"):
        _CadExCore.ModelData_Line_swiginit(self, _CadExCore.new_ModelData_Line(theLocation, theDirection))

    def Location(self) -> "cadex::ModelData_Point const &":
        return _CadExCore.ModelData_Line_Location(self)

    def Direction(self) -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_Line_Direction(self)

    def Parameter(self, thePoint: "ModelData_Point") -> "double":
        return _CadExCore.ModelData_Line_Parameter(self, thePoint)

    @staticmethod
    def Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_Line":
        return _CadExCore.ModelData_Line_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_Line

# Register ModelData_Line in _CadExCore:
_CadExCore.ModelData_Line_swigregister(ModelData_Line)

def ModelData_Line_Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_Line":
    return _CadExCore.ModelData_Line_Cast(theBase)

class ModelData_Vertex(ModelData_Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePoint: "ModelData_Point"):
        _CadExCore.ModelData_Vertex_swiginit(self, _CadExCore.new_ModelData_Vertex(thePoint))

    def Point(self) -> "cadex::ModelData_Point":
        return _CadExCore.ModelData_Vertex_Point(self)

    def SetTolerance(self, theTolerance: "double") -> "void":
        return _CadExCore.ModelData_Vertex_SetTolerance(self, theTolerance)

    def Tolerance(self) -> "double":
        return _CadExCore.ModelData_Vertex_Tolerance(self)

    @staticmethod
    def Cast(*args) -> "cadex::ModelData_Vertex &":
        return _CadExCore.ModelData_Vertex_Cast(*args)
    __swig_destroy__ = _CadExCore.delete_ModelData_Vertex

# Register ModelData_Vertex in _CadExCore:
_CadExCore.ModelData_Vertex_swigregister(ModelData_Vertex)

def ModelData_Vertex_Cast(*args) -> "cadex::ModelData_Vertex &":
    return _CadExCore.ModelData_Vertex_Cast(*args)

class ModelData_Edge(ModelData_Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Edge_swiginit(self, _CadExCore.new_ModelData_Edge(*args))

    def SetCurve(self, *args) -> "bool":
        return _CadExCore.ModelData_Edge_SetCurve(self, *args)

    def SetPCurve(self, *args) -> "bool":
        return _CadExCore.ModelData_Edge_SetPCurve(self, *args)

    def StartVertex(self) -> "cadex::ModelData_Vertex":
        return _CadExCore.ModelData_Edge_StartVertex(self)

    def EndVertex(self) -> "cadex::ModelData_Vertex":
        return _CadExCore.ModelData_Edge_EndVertex(self)

    def Curve(self) -> "cadex::ModelData_Curve":
        return _CadExCore.ModelData_Edge_Curve(self)

    def PCurve(self, theFace: "ModelData_Face") -> "cadex::ModelData_Curve2d":
        return _CadExCore.ModelData_Edge_PCurve(self, theFace)

    def SetTolerance(self, theTolerance: "double") -> "void":
        return _CadExCore.ModelData_Edge_SetTolerance(self, theTolerance)

    def Tolerance(self) -> "double":
        return _CadExCore.ModelData_Edge_Tolerance(self)

    def IsDegenerated(self) -> "bool":
        return _CadExCore.ModelData_Edge_IsDegenerated(self)

    def IsSeam(self, theFace: "ModelData_Face") -> "bool":
        return _CadExCore.ModelData_Edge_IsSeam(self, theFace)

    @staticmethod
    def Cast(*args) -> "cadex::ModelData_Edge &":
        return _CadExCore.ModelData_Edge_Cast(*args)
    __swig_destroy__ = _CadExCore.delete_ModelData_Edge

# Register ModelData_Edge in _CadExCore:
_CadExCore.ModelData_Edge_swigregister(ModelData_Edge)

def ModelData_Edge_Cast(*args) -> "cadex::ModelData_Edge &":
    return _CadExCore.ModelData_Edge_Cast(*args)

class ModelData_Wire(ModelData_Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theEdge: "ModelData_Edge"):
        _CadExCore.ModelData_Wire_swiginit(self, _CadExCore.new_ModelData_Wire(theEdge))

    def Append(self, theEdge: "ModelData_Edge") -> "bool":
        return _CadExCore.ModelData_Wire_Append(self, theEdge)

    @staticmethod
    def Cast(*args) -> "cadex::ModelData_Wire &":
        return _CadExCore.ModelData_Wire_Cast(*args)
    __swig_destroy__ = _CadExCore.delete_ModelData_Wire

# Register ModelData_Wire in _CadExCore:
_CadExCore.ModelData_Wire_swigregister(ModelData_Wire)

def ModelData_Wire_Cast(*args) -> "cadex::ModelData_Wire &":
    return _CadExCore.ModelData_Wire_Cast(*args)

class ModelData_Face(ModelData_Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Face_swiginit(self, _CadExCore.new_ModelData_Face(*args))

    def Append(self, theWire: "ModelData_Wire") -> "bool":
        return _CadExCore.ModelData_Face_Append(self, theWire)

    def Surface(self) -> "cadex::ModelData_Surface":
        return _CadExCore.ModelData_Face_Surface(self)

    def OuterWire(self) -> "cadex::ModelData_Wire":
        return _CadExCore.ModelData_Face_OuterWire(self)

    @staticmethod
    def Cast(*args) -> "cadex::ModelData_Face &":
        return _CadExCore.ModelData_Face_Cast(*args)
    __swig_destroy__ = _CadExCore.delete_ModelData_Face

# Register ModelData_Face in _CadExCore:
_CadExCore.ModelData_Face_swigregister(ModelData_Face)

def ModelData_Face_Cast(*args) -> "cadex::ModelData_Face &":
    return _CadExCore.ModelData_Face_Cast(*args)

class ModelData_Shell(ModelData_Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theFace: "ModelData_Face"):
        _CadExCore.ModelData_Shell_swiginit(self, _CadExCore.new_ModelData_Shell(theFace))

    def Append(self, theFace: "ModelData_Face") -> "bool":
        return _CadExCore.ModelData_Shell_Append(self, theFace)

    @staticmethod
    def Cast(*args) -> "cadex::ModelData_Shell &":
        return _CadExCore.ModelData_Shell_Cast(*args)
    __swig_destroy__ = _CadExCore.delete_ModelData_Shell

# Register ModelData_Shell in _CadExCore:
_CadExCore.ModelData_Shell_swigregister(ModelData_Shell)

def ModelData_Shell_Cast(*args) -> "cadex::ModelData_Shell &":
    return _CadExCore.ModelData_Shell_Cast(*args)

class ModelData_Solid(ModelData_Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theShell: "ModelData_Shell"):
        _CadExCore.ModelData_Solid_swiginit(self, _CadExCore.new_ModelData_Solid(theShell))

    def Append(self, theShell: "ModelData_Shell") -> "bool":
        return _CadExCore.ModelData_Solid_Append(self, theShell)

    @staticmethod
    def Cast(*args) -> "cadex::ModelData_Solid &":
        return _CadExCore.ModelData_Solid_Cast(*args)
    __swig_destroy__ = _CadExCore.delete_ModelData_Solid

# Register ModelData_Solid in _CadExCore:
_CadExCore.ModelData_Solid_swigregister(ModelData_Solid)

def ModelData_Solid_Cast(*args) -> "cadex::ModelData_Solid &":
    return _CadExCore.ModelData_Solid_Cast(*args)

ModelData_ST_Plane = _CadExCore.ModelData_ST_Plane
ModelData_ST_Cylinder = _CadExCore.ModelData_ST_Cylinder
ModelData_ST_Cone = _CadExCore.ModelData_ST_Cone
ModelData_ST_Sphere = _CadExCore.ModelData_ST_Sphere
ModelData_ST_Torus = _CadExCore.ModelData_ST_Torus
ModelData_ST_LinearExtrusion = _CadExCore.ModelData_ST_LinearExtrusion
ModelData_ST_Revolution = _CadExCore.ModelData_ST_Revolution
ModelData_ST_Bezier = _CadExCore.ModelData_ST_Bezier
ModelData_ST_BSpline = _CadExCore.ModelData_ST_BSpline
ModelData_ST_Offset = _CadExCore.ModelData_ST_Offset
ModelData_ST_Trimmed = _CadExCore.ModelData_ST_Trimmed
ModelData_SrfT_Undefined = _CadExCore.ModelData_SrfT_Undefined
ModelData_ST_UserDefined = _CadExCore.ModelData_ST_UserDefined
class ModelData_Surface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Surface_swiginit(self, _CadExCore.new_ModelData_Surface(*args))
    __swig_destroy__ = _CadExCore.delete_ModelData_Surface

    def Type(self) -> "cadex::ModelData_SurfaceType":
        return _CadExCore.ModelData_Surface_Type(self)

    def IsNull(self) -> "bool":
        return _CadExCore.ModelData_Surface_IsNull(self)

    def Nullify(self) -> "void":
        return _CadExCore.ModelData_Surface_Nullify(self)

    def IsUPeriodic(self) -> "bool":
        return _CadExCore.ModelData_Surface_IsUPeriodic(self)

    def IsVPeriodic(self) -> "bool":
        return _CadExCore.ModelData_Surface_IsVPeriodic(self)

    def UMin(self) -> "double":
        return _CadExCore.ModelData_Surface_UMin(self)

    def UMax(self) -> "double":
        return _CadExCore.ModelData_Surface_UMax(self)

    def VMin(self) -> "double":
        return _CadExCore.ModelData_Surface_VMin(self)

    def VMax(self) -> "double":
        return _CadExCore.ModelData_Surface_VMax(self)

    def Domain(self) -> "void":
        return _CadExCore.ModelData_Surface_Domain(self)

    def Value(self, theParameterU: "double", theParameterV: "double") -> "cadex::ModelData_Point":
        return _CadExCore.ModelData_Surface_Value(self, theParameterU, theParameterV)

    def Transform(self, theTransformation: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Surface_Transform(self, theTransformation)

    def Transformed(self, theTransformation: "ModelData_Transformation") -> "cadex::ModelData_Surface":
        return _CadExCore.ModelData_Surface_Transformed(self, theTransformation)

    def Continuity(self) -> "cadex::ModelData_Continuity":
        return _CadExCore.ModelData_Surface_Continuity(self)

    def D0(self, theParameterU: "double", theParameterV: "double", theValue: "ModelData_Point") -> "void":
        return _CadExCore.ModelData_Surface_D0(self, theParameterU, theParameterV, theValue)

    def D1(self, theParameterU: "double", theParameterV: "double", theValue: "ModelData_Point", theD1U: "ModelData_Vector", theD1V: "ModelData_Vector") -> "void":
        return _CadExCore.ModelData_Surface_D1(self, theParameterU, theParameterV, theValue, theD1U, theD1V)

    def D2(self, theParameterU: "double", theParameterV: "double", theValue: "ModelData_Point", theD1U: "ModelData_Vector", theD1V: "ModelData_Vector", theD2U: "ModelData_Vector", theD2V: "ModelData_Vector", theD2UV: "ModelData_Vector") -> "void":
        return _CadExCore.ModelData_Surface_D2(self, theParameterU, theParameterV, theValue, theD1U, theD1V, theD2U, theD2V, theD2UV)

    def Curvature(self, *args) -> "void":
        return _CadExCore.ModelData_Surface_Curvature(self, *args)

    def Normal(self, theParameterU: "double", theParameterV: "double", theNormal: "ModelData_Direction") -> "void":
        return _CadExCore.ModelData_Surface_Normal(self, theParameterU, theParameterV, theNormal)

    def Mirror(self, *args) -> "void":
        return _CadExCore.ModelData_Surface_Mirror(self, *args)

    def Mirrored(self, *args) -> "cadex::ModelData_Surface":
        return _CadExCore.ModelData_Surface_Mirrored(self, *args)

    def Rotate(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "void":
        return _CadExCore.ModelData_Surface_Rotate(self, theAxis, theAngle)

    def Rotated(self, theAxis: "ModelData_Axis1Placement", theAngle: "double") -> "cadex::ModelData_Surface":
        return _CadExCore.ModelData_Surface_Rotated(self, theAxis, theAngle)

    def Translate(self, theVector: "ModelData_Vector") -> "void":
        return _CadExCore.ModelData_Surface_Translate(self, theVector)

    def Translated(self, theVector: "ModelData_Vector") -> "cadex::ModelData_Surface":
        return _CadExCore.ModelData_Surface_Translated(self, theVector)

    def Scale(self, thePoint: "ModelData_Point", theScale: "double") -> "void":
        return _CadExCore.ModelData_Surface_Scale(self, thePoint, theScale)

    def Scaled(self, thePoint: "ModelData_Point", theScale: "double") -> "cadex::ModelData_Surface":
        return _CadExCore.ModelData_Surface_Scaled(self, thePoint, theScale)

    def IsEqual(self, theObj: "ModelData_Surface") -> "bool":
        return _CadExCore.ModelData_Surface_IsEqual(self, theObj)

    def __eq__(self, other):
        if id(other) == id(self):
            return True;
        if isinstance(other, ModelData_Surface):
            return self.IsEqual(other);
        return False;


    def DN(self, *args) -> "bool":
        return _CadExCore.ModelData_Surface_DN(self, *args)

# Register ModelData_Surface in _CadExCore:
_CadExCore.ModelData_Surface_swigregister(ModelData_Surface)

class ModelData_SurfaceHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theSurface: "ModelData_Surface") -> "size_t":
        return _CadExCore.ModelData_SurfaceHash___call__(self, theSurface)

    def __init__(self):
        _CadExCore.ModelData_SurfaceHash_swiginit(self, _CadExCore.new_ModelData_SurfaceHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_SurfaceHash

# Register ModelData_SurfaceHash in _CadExCore:
_CadExCore.ModelData_SurfaceHash_swigregister(ModelData_SurfaceHash)


def IsNotEqual(*args) -> "bool":
    return _CadExCore.IsNotEqual(*args)
ModelData_BT_Undefined = _CadExCore.ModelData_BT_Undefined
ModelData_BT_Acorn = _CadExCore.ModelData_BT_Acorn
ModelData_BT_Wireframe = _CadExCore.ModelData_BT_Wireframe
ModelData_BT_Sheet = _CadExCore.ModelData_BT_Sheet
ModelData_BT_Solid = _CadExCore.ModelData_BT_Solid
ModelData_BT_General = _CadExCore.ModelData_BT_General
class ModelData_Body(ModelData_Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def BodyType(self) -> "cadex::ModelData_BodyType":
        return _CadExCore.ModelData_Body_BodyType(self)

    @staticmethod
    def Create(theShape: "ModelData_Shape") -> "cadex::ModelData_Body":
        return _CadExCore.ModelData_Body_Create(theShape)

    def Append(self, theShape: "ModelData_Shape") -> "bool":
        return _CadExCore.ModelData_Body_Append(self, theShape)

    @staticmethod
    def Cast(*args) -> "cadex::ModelData_Body &":
        return _CadExCore.ModelData_Body_Cast(*args)
    __swig_destroy__ = _CadExCore.delete_ModelData_Body

# Register ModelData_Body in _CadExCore:
_CadExCore.ModelData_Body_swigregister(ModelData_Body)

def ModelData_Body_Create(theShape: "ModelData_Shape") -> "cadex::ModelData_Body":
    return _CadExCore.ModelData_Body_Create(theShape)

def ModelData_Body_Cast(*args) -> "cadex::ModelData_Body &":
    return _CadExCore.ModelData_Body_Cast(*args)

class ModelData_BodyList(ModelData_Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(*args) -> "cadex::ModelData_BodyList &":
        return _CadExCore.ModelData_BodyList_Cast(*args)

    def Append(self, *args) -> "void":
        return _CadExCore.ModelData_BodyList_Append(self, *args)

    def __len__(self) -> "cadex::ModelData_BodyList::SizeType":
        return _CadExCore.ModelData_BodyList___len__(self)

    def First(self) -> "cadex::ModelData_Body const &":
        return _CadExCore.ModelData_BodyList_First(self)

    def Element(self, theIndex: "cadex::ModelData_BodyList::SizeType") -> "cadex::ModelData_Body const &":
        return _CadExCore.ModelData_BodyList_Element(self, theIndex)

    def Access(self, theIndex: "cadex::ModelData_BodyList::SizeType") -> "cadex::ModelData_Body const &":
        return _CadExCore.ModelData_BodyList_Access(self, theIndex)

    def __iter__(self):
        for i in range(len(self)):
            yield self.Element(i)

    __swig_destroy__ = _CadExCore.delete_ModelData_BodyList

# Register ModelData_BodyList in _CadExCore:
_CadExCore.ModelData_BodyList_swigregister(ModelData_BodyList)

def ModelData_BodyList_Cast(*args) -> "cadex::ModelData_BodyList &":
    return _CadExCore.ModelData_BodyList_Cast(*args)

class ModelData_PolyShape(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_PolyShape

# Register ModelData_PolyShape in _CadExCore:
_CadExCore.ModelData_PolyShape_swigregister(ModelData_PolyShape)

class ModelData_PolyVertexSet(ModelData_PolyShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetAppearance(self, theAppearance: "ModelData_Appearance") -> "void":
        return _CadExCore.ModelData_PolyVertexSet_SetAppearance(self, theAppearance)

    def Appearance(self) -> "cadex::ModelData_Appearance":
        return _CadExCore.ModelData_PolyVertexSet_Appearance(self)

    def Coordinate(self, theVertexIndex: "cadex::ModelData_PolyVertexSet::IndexType") -> "cadex::ModelData_PolyVertexSet::CoordType const &":
        return _CadExCore.ModelData_PolyVertexSet_Coordinate(self, theVertexIndex)

    def HasColors(self) -> "bool":
        return _CadExCore.ModelData_PolyVertexSet_HasColors(self)

    def Color(self, theIndex: "cadex::ModelData_PolyVertexSet::IndexType") -> "cadex::ModelData_PolyVertexSet::ColorType const &":
        return _CadExCore.ModelData_PolyVertexSet_Color(self, theIndex)

    def NumberOfVertices(self) -> "cadex::ModelData_PolyVertexSet::IndexType":
        return _CadExCore.ModelData_PolyVertexSet_NumberOfVertices(self)

    def NumberOfColors(self) -> "cadex::ModelData_PolyVertexSet::IndexType":
        return _CadExCore.ModelData_PolyVertexSet_NumberOfColors(self)

    def IsEmpty(self) -> "bool":
        return _CadExCore.ModelData_PolyVertexSet_IsEmpty(self)

    @staticmethod
    def Cast(theBase: "ModelData_PolyShape") -> "cadex::ModelData_PolyVertexSet":
        return _CadExCore.ModelData_PolyVertexSet_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_PolyVertexSet

# Register ModelData_PolyVertexSet in _CadExCore:
_CadExCore.ModelData_PolyVertexSet_swigregister(ModelData_PolyVertexSet)

def ModelData_PolyVertexSet_Cast(theBase: "ModelData_PolyShape") -> "cadex::ModelData_PolyVertexSet":
    return _CadExCore.ModelData_PolyVertexSet_Cast(theBase)

class ModelData_PolyShapeList(ModelData_PolyShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "_ModelData_BaseObject_initialized"):
        _CadExCore.ModelData_PolyShapeList_swiginit(self, _CadExCore.new_ModelData_PolyShapeList(arg2))

    def Append(self, theShape: "ModelData_PolyShape") -> "void":
        return _CadExCore.ModelData_PolyShapeList_Append(self, theShape)

    def __len__(self) -> "cadex::ModelData_PolyShapeList::SizeType":
        return _CadExCore.ModelData_PolyShapeList___len__(self)

    def Element(self, theIndex: "cadex::ModelData_PolyShapeList::SizeType") -> "cadex::ModelData_PolyVertexSet const &":
        return _CadExCore.ModelData_PolyShapeList_Element(self, theIndex)

    def Access(self, theIndex: "cadex::ModelData_PolyShapeList::SizeType") -> "cadex::ModelData_PolyVertexSet const &":
        return _CadExCore.ModelData_PolyShapeList_Access(self, theIndex)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PolyShapeList_GetTypeId()

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PolyShapeList_swiginit(self, _CadExCore.new_ModelData_PolyShapeList(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def __iter__(self):
        for i in range(len(self)):
            yield self.Element(i)

    __swig_destroy__ = _CadExCore.delete_ModelData_PolyShapeList

# Register ModelData_PolyShapeList in _CadExCore:
_CadExCore.ModelData_PolyShapeList_swigregister(ModelData_PolyShapeList)

def ModelData_PolyShapeList_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PolyShapeList_GetTypeId()

class ModelAlgo_TopoPrimitives(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def CreateBox(*args) -> "cadex::ModelData_Solid":
        return _CadExCore.ModelAlgo_TopoPrimitives_CreateBox(*args)

    @staticmethod
    def CreateSphere(*args) -> "cadex::ModelData_Solid":
        return _CadExCore.ModelAlgo_TopoPrimitives_CreateSphere(*args)

    @staticmethod
    def CreateCylinder(*args) -> "cadex::ModelData_Solid":
        return _CadExCore.ModelAlgo_TopoPrimitives_CreateCylinder(*args)

    @staticmethod
    def CreateCone(*args) -> "cadex::ModelData_Solid":
        return _CadExCore.ModelAlgo_TopoPrimitives_CreateCone(*args)

    @staticmethod
    def CreateTorus(*args) -> "cadex::ModelData_Solid":
        return _CadExCore.ModelAlgo_TopoPrimitives_CreateTorus(*args)

    def __init__(self):
        _CadExCore.ModelAlgo_TopoPrimitives_swiginit(self, _CadExCore.new_ModelAlgo_TopoPrimitives())
    __swig_destroy__ = _CadExCore.delete_ModelAlgo_TopoPrimitives

# Register ModelAlgo_TopoPrimitives in _CadExCore:
_CadExCore.ModelAlgo_TopoPrimitives_swigregister(ModelAlgo_TopoPrimitives)

def ModelAlgo_TopoPrimitives_CreateBox(*args) -> "cadex::ModelData_Solid":
    return _CadExCore.ModelAlgo_TopoPrimitives_CreateBox(*args)

def ModelAlgo_TopoPrimitives_CreateSphere(*args) -> "cadex::ModelData_Solid":
    return _CadExCore.ModelAlgo_TopoPrimitives_CreateSphere(*args)

def ModelAlgo_TopoPrimitives_CreateCylinder(*args) -> "cadex::ModelData_Solid":
    return _CadExCore.ModelAlgo_TopoPrimitives_CreateCylinder(*args)

def ModelAlgo_TopoPrimitives_CreateCone(*args) -> "cadex::ModelData_Solid":
    return _CadExCore.ModelAlgo_TopoPrimitives_CreateCone(*args)

def ModelAlgo_TopoPrimitives_CreateTorus(*args) -> "cadex::ModelData_Solid":
    return _CadExCore.ModelAlgo_TopoPrimitives_CreateTorus(*args)

class ModelAlgo_TransformationApplier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Transform(theShape: "ModelData_Shape", theTransformation: "ModelData_Transformation") -> "cadex::ModelData_Shape":
        return _CadExCore.ModelAlgo_TransformationApplier_Transform(theShape, theTransformation)

    def __init__(self):
        _CadExCore.ModelAlgo_TransformationApplier_swiginit(self, _CadExCore.new_ModelAlgo_TransformationApplier())
    __swig_destroy__ = _CadExCore.delete_ModelAlgo_TransformationApplier

# Register ModelAlgo_TransformationApplier in _CadExCore:
_CadExCore.ModelAlgo_TransformationApplier_swigregister(ModelAlgo_TransformationApplier)

def ModelAlgo_TransformationApplier_Transform(theShape: "ModelData_Shape", theTransformation: "ModelData_Transformation") -> "cadex::ModelData_Shape":
    return _CadExCore.ModelAlgo_TransformationApplier_Transform(theShape, theTransformation)

class ModelData_IndexedTriangleSet(ModelData_PolyVertexSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "_ModelData_BaseObject_initialized"):
        _CadExCore.ModelData_IndexedTriangleSet_swiginit(self, _CadExCore.new_ModelData_IndexedTriangleSet(arg2))

    def NumberOfFaces(self) -> "cadex::ModelData_PolyVertexSet::IndexType":
        return _CadExCore.ModelData_IndexedTriangleSet_NumberOfFaces(self)

    def NumberOfNormals(self) -> "cadex::ModelData_PolyVertexSet::IndexType":
        return _CadExCore.ModelData_IndexedTriangleSet_NumberOfNormals(self)

    def NumberOfUVCoordinates(self) -> "cadex::ModelData_PolyVertexSet::IndexType":
        return _CadExCore.ModelData_IndexedTriangleSet_NumberOfUVCoordinates(self)

    def Coordinate(self, *args) -> "cadex::ModelData_PolyVertexSet::CoordType const &":
        return _CadExCore.ModelData_IndexedTriangleSet_Coordinate(self, *args)

    def CoordinateIndex(self, theFace: "cadex::ModelData_PolyVertexSet::IndexType", theVertexSlot: "cadex::ModelData_PolyVertexSet::IndexType") -> "cadex::ModelData_PolyVertexSet::IndexType":
        return _CadExCore.ModelData_IndexedTriangleSet_CoordinateIndex(self, theFace, theVertexSlot)

    def FaceNormal(self, theFace: "cadex::ModelData_PolyVertexSet::IndexType") -> "cadex::ModelData_IndexedTriangleSet::NormalType":
        return _CadExCore.ModelData_IndexedTriangleSet_FaceNormal(self, theFace)

    def HasNormals(self) -> "bool":
        return _CadExCore.ModelData_IndexedTriangleSet_HasNormals(self)

    def VertexNormal(self, theFace: "cadex::ModelData_PolyVertexSet::IndexType", theVertexSlot: "cadex::ModelData_PolyVertexSet::IndexType") -> "cadex::ModelData_IndexedTriangleSet::NormalType const &":
        return _CadExCore.ModelData_IndexedTriangleSet_VertexNormal(self, theFace, theVertexSlot)

    def Normal(self, theIndex: "cadex::ModelData_PolyVertexSet::IndexType") -> "cadex::ModelData_IndexedTriangleSet::NormalType const &":
        return _CadExCore.ModelData_IndexedTriangleSet_Normal(self, theIndex)

    def NormalIndex(self, theFace: "cadex::ModelData_PolyVertexSet::IndexType", theVertexSlot: "cadex::ModelData_PolyVertexSet::IndexType") -> "cadex::ModelData_PolyVertexSet::IndexType":
        return _CadExCore.ModelData_IndexedTriangleSet_NormalIndex(self, theFace, theVertexSlot)

    def VertexColor(self, theFace: "cadex::ModelData_PolyVertexSet::IndexType", theVertexSlot: "cadex::ModelData_PolyVertexSet::IndexType") -> "cadex::ModelData_PolyVertexSet::ColorType const &":
        return _CadExCore.ModelData_IndexedTriangleSet_VertexColor(self, theFace, theVertexSlot)

    def ColorIndex(self, theFace: "cadex::ModelData_PolyVertexSet::IndexType", theVertexSlot: "cadex::ModelData_PolyVertexSet::IndexType") -> "cadex::ModelData_PolyVertexSet::IndexType":
        return _CadExCore.ModelData_IndexedTriangleSet_ColorIndex(self, theFace, theVertexSlot)

    def HasUVCoordinates(self) -> "bool":
        return _CadExCore.ModelData_IndexedTriangleSet_HasUVCoordinates(self)

    def UVCoordinate(self, *args) -> "cadex::ModelData_Point2d const &":
        return _CadExCore.ModelData_IndexedTriangleSet_UVCoordinate(self, *args)

    def UVCoordinateIndex(self, theFace: "cadex::ModelData_PolyVertexSet::IndexType", theVertexSlot: "cadex::ModelData_PolyVertexSet::IndexType") -> "cadex::ModelData_PolyVertexSet::IndexType":
        return _CadExCore.ModelData_IndexedTriangleSet_UVCoordinateIndex(self, theFace, theVertexSlot)

    def Merge(self) -> "void":
        return _CadExCore.ModelData_IndexedTriangleSet_Merge(self)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_IndexedTriangleSet_GetTypeId()

    @staticmethod
    def Cast(theBase: "ModelData_PolyShape") -> "cadex::ModelData_IndexedTriangleSet":
        return _CadExCore.ModelData_IndexedTriangleSet_Cast(theBase)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_IndexedTriangleSet_swiginit(self, _CadExCore.new_ModelData_IndexedTriangleSet(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def AddCoordinates(self, *args) -> "void":
        return _CadExCore.ModelData_IndexedTriangleSet_AddCoordinates(self, *args)

    def AddNormals(self, *args) -> "void":
        return _CadExCore.ModelData_IndexedTriangleSet_AddNormals(self, *args)

    def AddColors(self, *args) -> "void":
        return _CadExCore.ModelData_IndexedTriangleSet_AddColors(self, *args)

    def AddUVCoordinates(self, *args) -> "void":
        return _CadExCore.ModelData_IndexedTriangleSet_AddUVCoordinates(self, *args)
    __swig_destroy__ = _CadExCore.delete_ModelData_IndexedTriangleSet

# Register ModelData_IndexedTriangleSet in _CadExCore:
_CadExCore.ModelData_IndexedTriangleSet_swigregister(ModelData_IndexedTriangleSet)

def ModelData_IndexedTriangleSet_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_IndexedTriangleSet_GetTypeId()

def ModelData_IndexedTriangleSet_Cast(theBase: "ModelData_PolyShape") -> "cadex::ModelData_IndexedTriangleSet":
    return _CadExCore.ModelData_IndexedTriangleSet_Cast(theBase)

class ModelData_IndexArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_IndexArray_swiginit(self, _CadExCore.new_ModelData_IndexArray())

    def __len__(self) -> "size_t":
        return _CadExCore.ModelData_IndexArray___len__(self)

    def Element(self, theIndex: "size_t") -> "cadex::ModelData_IndexArray::IndexType":
        return _CadExCore.ModelData_IndexArray_Element(self, theIndex)

    def Access(self, theIndex: "size_t") -> "cadex::ModelData_IndexArray::IndexType":
        return _CadExCore.ModelData_IndexArray_Access(self, theIndex)

    def __iter__(self):
        for i in range(len(self)):
            yield self.Element(i)

    __swig_destroy__ = _CadExCore.delete_ModelData_IndexArray

# Register ModelData_IndexArray in _CadExCore:
_CadExCore.ModelData_IndexArray_swigregister(ModelData_IndexArray)

class ModelData_MeshPatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PVS(self) -> "cadex::ModelData_PolyVertexSet const &":
        return _CadExCore.ModelData_MeshPatch_PVS(self)

    def Indices(self) -> "cadex::ModelData_IndexArray const &":
        return _CadExCore.ModelData_MeshPatch_Indices(self)

    def IsNull(self) -> "bool":
        return _CadExCore.ModelData_MeshPatch_IsNull(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_MeshPatch

# Register ModelData_MeshPatch in _CadExCore:
_CadExCore.ModelData_MeshPatch_swigregister(ModelData_MeshPatch)

class ModelData_PolyLineSet(ModelData_PolyVertexSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "_ModelData_BaseObject_initialized"):
        _CadExCore.ModelData_PolyLineSet_swiginit(self, _CadExCore.new_ModelData_PolyLineSet(arg2))

    def NumberOfVertices(self, *args) -> "cadex::ModelData_PolyVertexSet::IndexType":
        return _CadExCore.ModelData_PolyLineSet_NumberOfVertices(self, *args)

    def NumberOfPolyLines(self) -> "cadex::ModelData_PolyVertexSet::IndexType":
        return _CadExCore.ModelData_PolyLineSet_NumberOfPolyLines(self)

    def Coordinate(self, *args) -> "cadex::ModelData_PolyVertexSet::CoordType const &":
        return _CadExCore.ModelData_PolyLineSet_Coordinate(self, *args)

    def AddPolyLine(self, theVertices: "ModelData_Point", theSize: "size_t") -> "void":
        return _CadExCore.ModelData_PolyLineSet_AddPolyLine(self, theVertices, theSize)

    def AddPolyLines(self, theSet: "ModelData_PolyLineSet") -> "void":
        return _CadExCore.ModelData_PolyLineSet_AddPolyLines(self, theSet)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PolyLineSet_GetTypeId()

    @staticmethod
    def Cast(theBase: "ModelData_PolyShape") -> "cadex::ModelData_PolyLineSet":
        return _CadExCore.ModelData_PolyLineSet_Cast(theBase)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PolyLineSet_swiginit(self, _CadExCore.new_ModelData_PolyLineSet(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def AddPolyline(self, theVertices: "ModelData_PointList") -> "void":
        return _CadExCore.ModelData_PolyLineSet_AddPolyline(self, theVertices)
    __swig_destroy__ = _CadExCore.delete_ModelData_PolyLineSet

# Register ModelData_PolyLineSet in _CadExCore:
_CadExCore.ModelData_PolyLineSet_swigregister(ModelData_PolyLineSet)

def ModelData_PolyLineSet_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PolyLineSet_GetTypeId()

def ModelData_PolyLineSet_Cast(theBase: "ModelData_PolyShape") -> "cadex::ModelData_PolyLineSet":
    return _CadExCore.ModelData_PolyLineSet_Cast(theBase)

class ModelData_PolyPointSet(ModelData_PolyVertexSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "_ModelData_BaseObject_initialized"):
        _CadExCore.ModelData_PolyPointSet_swiginit(self, _CadExCore.new_ModelData_PolyPointSet(arg2))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PolyPointSet_GetTypeId()

    @staticmethod
    def Cast(theBase: "ModelData_PolyShape") -> "cadex::ModelData_PolyPointSet":
        return _CadExCore.ModelData_PolyPointSet_Cast(theBase)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PolyPointSet_swiginit(self, _CadExCore.new_ModelData_PolyPointSet(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def Add(self, thePoints: "ModelData_PointList") -> "void":
        return _CadExCore.ModelData_PolyPointSet_Add(self, thePoints)
    __swig_destroy__ = _CadExCore.delete_ModelData_PolyPointSet

# Register ModelData_PolyPointSet in _CadExCore:
_CadExCore.ModelData_PolyPointSet_swigregister(ModelData_PolyPointSet)

def ModelData_PolyPointSet_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PolyPointSet_GetTypeId()

def ModelData_PolyPointSet_Cast(theBase: "ModelData_PolyShape") -> "cadex::ModelData_PolyPointSet":
    return _CadExCore.ModelData_PolyPointSet_Cast(theBase)

class ModelData_Layer(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Layer_swiginit(self, _CadExCore.new_ModelData_Layer(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_Layer_GetTypeId()

    def IsVisible(self, *args) -> "bool &":
        return _CadExCore.ModelData_Layer_IsVisible(self, *args)

    def Add(self, theElement: "ModelData_SceneGraphElement") -> "void":
        return _CadExCore.ModelData_Layer_Add(self, theElement)

    def Remove(self, theElement: "ModelData_SceneGraphElement") -> "bool":
        return _CadExCore.ModelData_Layer_Remove(self, theElement)

    def Find(self, theElement: "ModelData_SceneGraphElement") -> "bool":
        return _CadExCore.ModelData_Layer_Find(self, theElement)

    def Accept(self, theVisitor: "ModelData_Layer_ItemVisitor") -> "void":
        return _CadExCore.ModelData_Layer_Accept(self, theVisitor)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_Layer_swiginit(self, _CadExCore.new_ModelData_Layer(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())

    __swig_destroy__ = _CadExCore.delete_ModelData_Layer

# Register ModelData_Layer in _CadExCore:
_CadExCore.ModelData_Layer_swigregister(ModelData_Layer)

def ModelData_Layer_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_Layer_GetTypeId()

class ModelData_Layer_ItemVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_Layer_ItemVisitor

    @abstractmethod
    def VisitSGE(self, theSGE: "ModelData_SceneGraphElement") -> "void":
        return _CadExCore.ModelData_Layer_ItemVisitor_VisitSGE(self, theSGE)

    @abstractmethod
    def VisitShape(self, theShape: "ModelData_Shape", theRep: "ModelData_BRepRepresentation") -> "void":
        return _CadExCore.ModelData_Layer_ItemVisitor_VisitShape(self, theShape, theRep)

    def __init__(self):
        if self.__class__ == ModelData_Layer_ItemVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_Layer_ItemVisitor_swiginit(self, _CadExCore.new_ModelData_Layer_ItemVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_Layer_ItemVisitor(self)
        return weakref.proxy(self)

# Register ModelData_Layer_ItemVisitor in _CadExCore:
_CadExCore.ModelData_Layer_ItemVisitor_swigregister(ModelData_Layer_ItemVisitor)

class ModelData_Part(ModelData_SceneGraphElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Part_swiginit(self, _CadExCore.new_ModelData_Part(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_Part_GetTypeId()

    def AddRepresentation(self, theRepresentation: "ModelData_Representation") -> "void":
        return _CadExCore.ModelData_Part_AddRepresentation(self, theRepresentation)

    def RemoveRepresentations(self) -> "void":
        return _CadExCore.ModelData_Part_RemoveRepresentations(self)

    def BRepRepresentation(self) -> "cadex::ModelData_BRepRepresentation":
        return _CadExCore.ModelData_Part_BRepRepresentation(self)

    def PolyRepresentation(self, theRepresentationMask: "cadex::ModelData_RepresentationMask") -> "cadex::ModelData_PolyRepresentation":
        return _CadExCore.ModelData_Part_PolyRepresentation(self, theRepresentationMask)

    def Accept(self, *args) -> "void":
        return _CadExCore.ModelData_Part_Accept(self, *args)

    @staticmethod
    def Cast(theBase: "ModelData_SceneGraphElement") -> "cadex::ModelData_Part":
        return _CadExCore.ModelData_Part_Cast(theBase)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_Part_swiginit(self, _CadExCore.new_ModelData_Part(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def AcceptElementVisitor(self, theVisitor):
        theVisitor.VisitPart(self)


    def GetRepresentationIterator(self):
        return ModelData_Part_RepresentationIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_Part

# Register ModelData_Part in _CadExCore:
_CadExCore.ModelData_Part_swigregister(ModelData_Part)

def ModelData_Part_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_Part_GetTypeId()

def ModelData_Part_Cast(theBase: "ModelData_SceneGraphElement") -> "cadex::ModelData_Part":
    return _CadExCore.ModelData_Part_Cast(theBase)

class ModelData_Part_RepresentationVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_Part_RepresentationVisitor

    @abstractmethod
    def VisitBRep(self, theRep: "ModelData_BRepRepresentation") -> "void":
        return _CadExCore.ModelData_Part_RepresentationVisitor_VisitBRep(self, theRep)

    @abstractmethod
    def VisitPoly(self, theRep: "ModelData_PolyRepresentation") -> "void":
        return _CadExCore.ModelData_Part_RepresentationVisitor_VisitPoly(self, theRep)

    def __init__(self):
        if self.__class__ == ModelData_Part_RepresentationVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_Part_RepresentationVisitor_swiginit(self, _CadExCore.new_ModelData_Part_RepresentationVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_Part_RepresentationVisitor(self)
        return weakref.proxy(self)

# Register ModelData_Part_RepresentationVisitor in _CadExCore:
_CadExCore.ModelData_Part_RepresentationVisitor_swigregister(ModelData_Part_RepresentationVisitor)

class ModelData_Part_VoidRepresentationVisitor(ModelData_Part_RepresentationVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def VisitBRep(self, arg0: "ModelData_BRepRepresentation") -> "void":
        return _CadExCore.ModelData_Part_VoidRepresentationVisitor_VisitBRep(self, arg0)

    def VisitPoly(self, arg0: "ModelData_PolyRepresentation") -> "void":
        return _CadExCore.ModelData_Part_VoidRepresentationVisitor_VisitPoly(self, arg0)

    def __init__(self):
        if self.__class__ == ModelData_Part_VoidRepresentationVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_Part_VoidRepresentationVisitor_swiginit(self, _CadExCore.new_ModelData_Part_VoidRepresentationVisitor(_self, ))
    __swig_destroy__ = _CadExCore.delete_ModelData_Part_VoidRepresentationVisitor
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_Part_VoidRepresentationVisitor(self)
        return weakref.proxy(self)

# Register ModelData_Part_VoidRepresentationVisitor in _CadExCore:
_CadExCore.ModelData_Part_VoidRepresentationVisitor_swigregister(ModelData_Part_VoidRepresentationVisitor)

class ModelData_Part_CombinedRepresentationVisitor(ModelData_Part_RepresentationVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def VisitBRep(self, theRep: "ModelData_BRepRepresentation") -> "void":
        return _CadExCore.ModelData_Part_CombinedRepresentationVisitor_VisitBRep(self, theRep)

    def VisitPoly(self, theRep: "ModelData_PolyRepresentation") -> "void":
        return _CadExCore.ModelData_Part_CombinedRepresentationVisitor_VisitPoly(self, theRep)

    @abstractmethod
    def Visit(self, theRep: "ModelData_Representation") -> "void":
        return _CadExCore.ModelData_Part_CombinedRepresentationVisitor_Visit(self, theRep)

    def __init__(self):
        if self.__class__ == ModelData_Part_CombinedRepresentationVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_Part_CombinedRepresentationVisitor_swiginit(self, _CadExCore.new_ModelData_Part_CombinedRepresentationVisitor(_self, ))
    __swig_destroy__ = _CadExCore.delete_ModelData_Part_CombinedRepresentationVisitor
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_Part_CombinedRepresentationVisitor(self)
        return weakref.proxy(self)

# Register ModelData_Part_CombinedRepresentationVisitor in _CadExCore:
_CadExCore.ModelData_Part_CombinedRepresentationVisitor_swigregister(ModelData_Part_CombinedRepresentationVisitor)

class ModelData_Part_RepresentationIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePart: "ModelData_Part"):
        _CadExCore.ModelData_Part_RepresentationIterator_swiginit(self, _CadExCore.new_ModelData_Part_RepresentationIterator(thePart))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_Part_RepresentationIterator_HasNext(self)

    def Next(self, *args) -> "cadex::ModelData_Representation &":
        return _CadExCore.ModelData_Part_RepresentationIterator_Next(self, *args)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_Part_RepresentationIterator

# Register ModelData_Part_RepresentationIterator in _CadExCore:
_CadExCore.ModelData_Part_RepresentationIterator_swigregister(ModelData_Part_RepresentationIterator)

class ModelData_Representation(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Accept(self, theVisitor: "ModelData_Part_RepresentationVisitor") -> "void":
        return _CadExCore.ModelData_Representation_Accept(self, theVisitor)
    __swig_destroy__ = _CadExCore.delete_ModelData_Representation

# Register ModelData_Representation in _CadExCore:
_CadExCore.ModelData_Representation_swigregister(ModelData_Representation)

class ModelAlgo_BSplineConverterParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NumOfSpans = _CadExCore.ModelAlgo_BSplineConverterParameters_NumOfSpans
    Degree = _CadExCore.ModelAlgo_BSplineConverterParameters_Degree

    def __init__(self):
        _CadExCore.ModelAlgo_BSplineConverterParameters_swiginit(self, _CadExCore.new_ModelAlgo_BSplineConverterParameters())

    def ProcessSurfaces(self, *args) -> "bool &":
        return _CadExCore.ModelAlgo_BSplineConverterParameters_ProcessSurfaces(self, *args)

    def SetProcessSurfaces(self, theValue: "bool") -> "void":
        return _CadExCore.ModelAlgo_BSplineConverterParameters_SetProcessSurfaces(self, theValue)

    def ProcessCurves(self, *args) -> "bool &":
        return _CadExCore.ModelAlgo_BSplineConverterParameters_ProcessCurves(self, *args)

    def SetProcessCurves(self, theValue: "bool") -> "void":
        return _CadExCore.ModelAlgo_BSplineConverterParameters_SetProcessCurves(self, theValue)

    def ProcessCurves2d(self, *args) -> "bool &":
        return _CadExCore.ModelAlgo_BSplineConverterParameters_ProcessCurves2d(self, *args)

    def SetProcessCurves2d(self, theValue: "bool") -> "void":
        return _CadExCore.ModelAlgo_BSplineConverterParameters_SetProcessCurves2d(self, theValue)

    def MaxDegree(self, *args) -> "int &":
        return _CadExCore.ModelAlgo_BSplineConverterParameters_MaxDegree(self, *args)

    def SetMaxDegree(self, theValue: "int") -> "void":
        return _CadExCore.ModelAlgo_BSplineConverterParameters_SetMaxDegree(self, theValue)

    def MaxNumOfSpans(self, *args) -> "int &":
        return _CadExCore.ModelAlgo_BSplineConverterParameters_MaxNumOfSpans(self, *args)

    def SetMaxNumOfSpans(self, theValue: "int") -> "void":
        return _CadExCore.ModelAlgo_BSplineConverterParameters_SetMaxNumOfSpans(self, theValue)

    def MaxTolerance(self, *args) -> "double &":
        return _CadExCore.ModelAlgo_BSplineConverterParameters_MaxTolerance(self, *args)

    def SetMaxTolerance(self, theValue: "double") -> "void":
        return _CadExCore.ModelAlgo_BSplineConverterParameters_SetMaxTolerance(self, theValue)

    def PriorityConstraint(self, *args) -> "cadex::ModelAlgo_BSplineConverterParameters::PriorityConstraintType &":
        return _CadExCore.ModelAlgo_BSplineConverterParameters_PriorityConstraint(self, *args)

    def SetPriorityConstraint(self, theValue: "cadex::ModelAlgo_BSplineConverterParameters::PriorityConstraintType") -> "void":
        return _CadExCore.ModelAlgo_BSplineConverterParameters_SetPriorityConstraint(self, theValue)
    __swig_destroy__ = _CadExCore.delete_ModelAlgo_BSplineConverterParameters

# Register ModelAlgo_BSplineConverterParameters in _CadExCore:
_CadExCore.ModelAlgo_BSplineConverterParameters_swigregister(ModelAlgo_BSplineConverterParameters)

class ModelAlgo_BSplineConverter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelAlgo_BSplineConverter_swiginit(self, _CadExCore.new_ModelAlgo_BSplineConverter(*args))

    def Parameters(self) -> "cadex::ModelAlgo_BSplineConverter::ParametersType const &":
        return _CadExCore.ModelAlgo_BSplineConverter_Parameters(self)

    def SetParameters(self, theParameters: "ModelAlgo_BSplineConverterParameters") -> "void":
        return _CadExCore.ModelAlgo_BSplineConverter_SetParameters(self, theParameters)

    def Perform(self, *args) -> "cadex::ModelData_Shape":
        return _CadExCore.ModelAlgo_BSplineConverter_Perform(self, *args)
    __swig_destroy__ = _CadExCore.delete_ModelAlgo_BSplineConverter

# Register ModelAlgo_BSplineConverter in _CadExCore:
_CadExCore.ModelAlgo_BSplineConverter_swigregister(ModelAlgo_BSplineConverter)

class ModelAlgo_BRepMesherParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Coarse = _CadExCore.ModelAlgo_BRepMesherParameters_Coarse
    Medium = _CadExCore.ModelAlgo_BRepMesherParameters_Medium
    Fine = _CadExCore.ModelAlgo_BRepMesherParameters_Fine
    Custom = _CadExCore.ModelAlgo_BRepMesherParameters_Custom
    V1 = _CadExCore.ModelAlgo_BRepMesherParameters_V1
    V2 = _CadExCore.ModelAlgo_BRepMesherParameters_V2
    V3 = _CadExCore.ModelAlgo_BRepMesherParameters_V3

    def __init__(self, *args):
        _CadExCore.ModelAlgo_BRepMesherParameters_swiginit(self, _CadExCore.new_ModelAlgo_BRepMesherParameters(*args))

    def SetGranularity(self, theVal: "cadex::ModelAlgo_BRepMesherParameters::Granularity") -> "void":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SetGranularity(self, theVal)

    def GetGranularity(self) -> "cadex::ModelAlgo_BRepMesherParameters::Granularity":
        return _CadExCore.ModelAlgo_BRepMesherParameters_GetGranularity(self)

    def SetChordalDeflection(self, theValue: "double") -> "void":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SetChordalDeflection(self, theValue)

    def ChordalDeflection(self) -> "double":
        return _CadExCore.ModelAlgo_BRepMesherParameters_ChordalDeflection(self)

    def SetIsRelativeChordalDeflection(self, theValue: "bool") -> "void":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SetIsRelativeChordalDeflection(self, theValue)

    def IsRelativeChordalDeflection(self) -> "bool":
        return _CadExCore.ModelAlgo_BRepMesherParameters_IsRelativeChordalDeflection(self)

    def SetMaxEdgeLength(self, theValue: "double") -> "void":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SetMaxEdgeLength(self, theValue)

    def MaxEdgeLength(self) -> "double":
        return _CadExCore.ModelAlgo_BRepMesherParameters_MaxEdgeLength(self)

    def SetIsRelativeMaxEdgeLength(self, theValue: "bool") -> "void":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SetIsRelativeMaxEdgeLength(self, theValue)

    def IsRelativeMaxEdgeLength(self) -> "bool":
        return _CadExCore.ModelAlgo_BRepMesherParameters_IsRelativeMaxEdgeLength(self)

    def SetAngularDeflection(self, theValue: "double") -> "void":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SetAngularDeflection(self, theValue)

    def AngularDeflection(self) -> "double":
        return _CadExCore.ModelAlgo_BRepMesherParameters_AngularDeflection(self)

    def SetTriangulatorVersion(self, theValue: "cadex::ModelAlgo_BRepMesherParameters::TriangulatorVersion") -> "void":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SetTriangulatorVersion(self, theValue)

    def GetTriangulatorVersion(self) -> "cadex::ModelAlgo_BRepMesherParameters::TriangulatorVersion":
        return _CadExCore.ModelAlgo_BRepMesherParameters_GetTriangulatorVersion(self)

    def MergeFaceSets(self) -> "bool":
        return _CadExCore.ModelAlgo_BRepMesherParameters_MergeFaceSets(self)

    def GenerateFaceMeshAssociations(self) -> "bool":
        return _CadExCore.ModelAlgo_BRepMesherParameters_GenerateFaceMeshAssociations(self)

    def PreserveVisualizationMesh(self) -> "bool":
        return _CadExCore.ModelAlgo_BRepMesherParameters_PreserveVisualizationMesh(self)

    def SetSaveBRepToPolyAssociations(self, theValue: "bool") -> "void":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SetSaveBRepToPolyAssociations(self, theValue)

    def SaveBRepToPolyAssociations(self) -> "bool":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SaveBRepToPolyAssociations(self)

    def SetSaveAppearances(self, theValue: "bool") -> "void":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SetSaveAppearances(self, theValue)

    def SaveAppearances(self) -> "bool":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SaveAppearances(self)

    def ComputationalMeshAlgo(self) -> "cadex::internal::Base_MeshAlgoFactory const &":
        return _CadExCore.ModelAlgo_BRepMesherParameters_ComputationalMeshAlgo(self)

    def SetMergeFaceSets(self, theIsMerge: "bool") -> "void":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SetMergeFaceSets(self, theIsMerge)

    def SetGenerateFaceMeshAssociations(self, theIsGenMap: "bool") -> "void":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SetGenerateFaceMeshAssociations(self, theIsGenMap)

    def GenerateUVCoordinates(self) -> "bool":
        return _CadExCore.ModelAlgo_BRepMesherParameters_GenerateUVCoordinates(self)

    def SetGenerateUVCoordinates(self, theIsGet: "bool") -> "void":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SetGenerateUVCoordinates(self, theIsGet)

    def SetPreserveVisualizationMesh(self, theIsPreserve: "bool") -> "void":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SetPreserveVisualizationMesh(self, theIsPreserve)

    def SetComputationalMeshAlgo(self, theMeshAlgoFactory: "Base_MeshAlgoFactory") -> "void":
        return _CadExCore.ModelAlgo_BRepMesherParameters_SetComputationalMeshAlgo(self, theMeshAlgoFactory)
    __swig_destroy__ = _CadExCore.delete_ModelAlgo_BRepMesherParameters

# Register ModelAlgo_BRepMesherParameters in _CadExCore:
_CadExCore.ModelAlgo_BRepMesherParameters_swigregister(ModelAlgo_BRepMesherParameters)

class ModelData_BRepToPolyAssociations(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_BRepToPolyAssociations_swiginit(self, _CadExCore.new_ModelData_BRepToPolyAssociations())
    __swig_destroy__ = _CadExCore.delete_ModelData_BRepToPolyAssociations

    def Get(self, *args) -> "cadex::ModelData_MeshPatch":
        return _CadExCore.ModelData_BRepToPolyAssociations_Get(self, *args)

# Register ModelData_BRepToPolyAssociations in _CadExCore:
_CadExCore.ModelData_BRepToPolyAssociations_swigregister(ModelData_BRepToPolyAssociations)

class ModelData_BRepRepresentation(ModelData_Representation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_BRepRepresentation_swiginit(self, _CadExCore.new_ModelData_BRepRepresentation(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_BRepRepresentation_GetTypeId()

    def Add(self, theShape: "ModelData_Shape") -> "cadex::ModelData_Shape":
        return _CadExCore.ModelData_BRepRepresentation_Add(self, theShape)

    def Get(self) -> "cadex::ModelData_BodyList const &":
        return _CadExCore.ModelData_BRepRepresentation_Get(self)

    def Clear(self) -> "void":
        return _CadExCore.ModelData_BRepRepresentation_Clear(self)

    def HasSubshapes(self) -> "bool":
        return _CadExCore.ModelData_BRepRepresentation_HasSubshapes(self)

    def NumberOfSubshapes(self) -> "size_t":
        return _CadExCore.ModelData_BRepRepresentation_NumberOfSubshapes(self)

    def SetAppearance(self, theSubshape: "ModelData_Shape", theAppearance: "ModelData_Appearance") -> "void":
        return _CadExCore.ModelData_BRepRepresentation_SetAppearance(self, theSubshape, theAppearance)

    def SetPropertyTable(self, theSubshape: "ModelData_Shape", thePTable: "ModelData_PropertyTable") -> "void":
        return _CadExCore.ModelData_BRepRepresentation_SetPropertyTable(self, theSubshape, thePTable)

    def AddPMIData(self, theSubshape: "ModelData_Shape", thePMIData: "ModelData_PMIData") -> "void":
        return _CadExCore.ModelData_BRepRepresentation_AddPMIData(self, theSubshape, thePMIData)

    def Appearance(self, theSubshape: "ModelData_Shape") -> "cadex::ModelData_Appearance":
        return _CadExCore.ModelData_BRepRepresentation_Appearance(self, theSubshape)

    def PropertyTable(self, theSubshape: "ModelData_Shape") -> "cadex::ModelData_PropertyTable":
        return _CadExCore.ModelData_BRepRepresentation_PropertyTable(self, theSubshape)

    def AddToLayer(self, theSubshape: "ModelData_Shape", theLayer: "ModelData_Layer") -> "void":
        return _CadExCore.ModelData_BRepRepresentation_AddToLayer(self, theSubshape, theLayer)

    def RemoveFromLayer(self, theSubshape: "ModelData_Shape", theLayer: "ModelData_Layer") -> "bool":
        return _CadExCore.ModelData_BRepRepresentation_RemoveFromLayer(self, theSubshape, theLayer)

    def FindInLayer(self, theSubshape: "ModelData_Shape", theLayer: "ModelData_Layer") -> "bool":
        return _CadExCore.ModelData_BRepRepresentation_FindInLayer(self, theSubshape, theLayer)

    def Shape(self, theId: "int") -> "cadex::ModelData_Shape":
        return _CadExCore.ModelData_BRepRepresentation_Shape(self, theId)

    def ShapeId(self, theShape: "ModelData_Shape") -> "int":
        return _CadExCore.ModelData_BRepRepresentation_ShapeId(self, theShape)

    def Accept(self, *args) -> "void":
        return _CadExCore.ModelData_BRepRepresentation_Accept(self, *args)

    def Name(self, *args) -> "cadex::Base_UTF16String":
        return _CadExCore.ModelData_BRepRepresentation_Name(self, *args)

    def SetName(self, *args) -> "void":
        return _CadExCore.ModelData_BRepRepresentation_SetName(self, *args)

    @staticmethod
    def Cast(theBase: "ModelData_Representation") -> "cadex::ModelData_BRepRepresentation":
        return _CadExCore.ModelData_BRepRepresentation_Cast(theBase)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_BRepRepresentation_swiginit(self, _CadExCore.new_ModelData_BRepRepresentation(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def GetLayerIterator(self):
        return ModelData_BRepRepresentation_LayerIterator(self)


    def GetPMIDataIterator(self):
        return ModelData_BRepRepresentation_PMIDataIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_BRepRepresentation

# Register ModelData_BRepRepresentation in _CadExCore:
_CadExCore.ModelData_BRepRepresentation_swigregister(ModelData_BRepRepresentation)

def ModelData_BRepRepresentation_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_BRepRepresentation_GetTypeId()

def ModelData_BRepRepresentation_Cast(theBase: "ModelData_Representation") -> "cadex::ModelData_BRepRepresentation":
    return _CadExCore.ModelData_BRepRepresentation_Cast(theBase)

class ModelData_BRepRepresentation_LayerIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theSubshape: "ModelData_Shape", theRep: "ModelData_BRepRepresentation"):
        _CadExCore.ModelData_BRepRepresentation_LayerIterator_swiginit(self, _CadExCore.new_ModelData_BRepRepresentation_LayerIterator(theSubshape, theRep))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_BRepRepresentation_LayerIterator_HasNext(self)

    def Next(self) -> "cadex::ModelData_Layer":
        return _CadExCore.ModelData_BRepRepresentation_LayerIterator_Next(self)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_BRepRepresentation_LayerIterator

# Register ModelData_BRepRepresentation_LayerIterator in _CadExCore:
_CadExCore.ModelData_BRepRepresentation_LayerIterator_swigregister(ModelData_BRepRepresentation_LayerIterator)

class ModelData_BRepRepresentation_PMIDataIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theSubshape: "ModelData_Shape", theRep: "ModelData_BRepRepresentation"):
        _CadExCore.ModelData_BRepRepresentation_PMIDataIterator_swiginit(self, _CadExCore.new_ModelData_BRepRepresentation_PMIDataIterator(theSubshape, theRep))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_BRepRepresentation_PMIDataIterator_HasNext(self)

    def Next(self) -> "cadex::ModelData_PMIData":
        return _CadExCore.ModelData_BRepRepresentation_PMIDataIterator_Next(self)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_BRepRepresentation_PMIDataIterator

# Register ModelData_BRepRepresentation_PMIDataIterator in _CadExCore:
_CadExCore.ModelData_BRepRepresentation_PMIDataIterator_swigregister(ModelData_BRepRepresentation_PMIDataIterator)

class SubshapeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theRep: "ModelData_BRepRepresentation"):
        _CadExCore.SubshapeIterator_swiginit(self, _CadExCore.new_SubshapeIterator(theRep))

    def HasNext(self) -> "bool":
        return _CadExCore.SubshapeIterator_HasNext(self)

    def Next(self) -> "cadex::ModelData_Shape const &":
        return _CadExCore.SubshapeIterator_Next(self)
    __swig_destroy__ = _CadExCore.delete_SubshapeIterator

# Register SubshapeIterator in _CadExCore:
_CadExCore.SubshapeIterator_swigregister(SubshapeIterator)

class ModelData_BRepRepresentation_SubshapeVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_BRepRepresentation_SubshapeVisitor

    @abstractmethod
    def VisitShape(self, theShape: "ModelData_Shape") -> "void":
        return _CadExCore.ModelData_BRepRepresentation_SubshapeVisitor_VisitShape(self, theShape)

    def __init__(self):
        if self.__class__ == ModelData_BRepRepresentation_SubshapeVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_BRepRepresentation_SubshapeVisitor_swiginit(self, _CadExCore.new_ModelData_BRepRepresentation_SubshapeVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_BRepRepresentation_SubshapeVisitor(self)
        return weakref.proxy(self)

# Register ModelData_BRepRepresentation_SubshapeVisitor in _CadExCore:
_CadExCore.ModelData_BRepRepresentation_SubshapeVisitor_swigregister(ModelData_BRepRepresentation_SubshapeVisitor)

class ModelData_PolyRepresentation(ModelData_Representation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_PolyRepresentation_swiginit(self, _CadExCore.new_ModelData_PolyRepresentation(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PolyRepresentation_GetTypeId()

    def Add(self, theShape: "ModelData_PolyShape") -> "void":
        return _CadExCore.ModelData_PolyRepresentation_Add(self, theShape)

    def Get(self) -> "cadex::ModelData_PolyShapeList const &":
        return _CadExCore.ModelData_PolyRepresentation_Get(self)

    def Clear(self) -> "void":
        return _CadExCore.ModelData_PolyRepresentation_Clear(self)

    @staticmethod
    def Cast(theBase: "ModelData_Representation") -> "cadex::ModelData_PolyRepresentation":
        return _CadExCore.ModelData_PolyRepresentation_Cast(theBase)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PolyRepresentation_swiginit(self, _CadExCore.new_ModelData_PolyRepresentation(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())

    __swig_destroy__ = _CadExCore.delete_ModelData_PolyRepresentation

# Register ModelData_PolyRepresentation in _CadExCore:
_CadExCore.ModelData_PolyRepresentation_swigregister(ModelData_PolyRepresentation)

def ModelData_PolyRepresentation_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PolyRepresentation_GetTypeId()

def ModelData_PolyRepresentation_Cast(theBase: "ModelData_Representation") -> "cadex::ModelData_PolyRepresentation":
    return _CadExCore.ModelData_PolyRepresentation_Cast(theBase)

class ModelAlgo_BRepMesher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelAlgo_BRepMesher_swiginit(self, _CadExCore.new_ModelAlgo_BRepMesher(*args))

    def Parameters(self) -> "cadex::ModelAlgo_BRepMesherParameters const &":
        return _CadExCore.ModelAlgo_BRepMesher_Parameters(self)

    def Compute(self, *args) -> "cadex::ModelData_PolyShapeList":
        return _CadExCore.ModelAlgo_BRepMesher_Compute(self, *args)

    def BRepToPolyAssociations(self) -> "cadex::ModelData_BRepToPolyAssociations const &":
        return _CadExCore.ModelAlgo_BRepMesher_BRepToPolyAssociations(self)

    def SetParameters(self, theParameters: "ModelAlgo_BRepMesherParameters") -> "void":
        return _CadExCore.ModelAlgo_BRepMesher_SetParameters(self, theParameters)

    def SetProgressStatus(self, theProgressStatus: "Base_ProgressStatus") -> "void":
        return _CadExCore.ModelAlgo_BRepMesher_SetProgressStatus(self, theProgressStatus)
    __swig_destroy__ = _CadExCore.delete_ModelAlgo_BRepMesher

# Register ModelAlgo_BRepMesher in _CadExCore:
_CadExCore.ModelAlgo_BRepMesher_swigregister(ModelAlgo_BRepMesher)

class ModelAlgo_BoundingBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Compute(*args) -> "void":
        return _CadExCore.ModelAlgo_BoundingBox_Compute(*args)

    @staticmethod
    def ComputeMin(*args) -> "void":
        return _CadExCore.ModelAlgo_BoundingBox_ComputeMin(*args)

    def __init__(self):
        _CadExCore.ModelAlgo_BoundingBox_swiginit(self, _CadExCore.new_ModelAlgo_BoundingBox())
    __swig_destroy__ = _CadExCore.delete_ModelAlgo_BoundingBox

# Register ModelAlgo_BoundingBox in _CadExCore:
_CadExCore.ModelAlgo_BoundingBox_swigregister(ModelAlgo_BoundingBox)

def ModelAlgo_BoundingBox_Compute(*args) -> "void":
    return _CadExCore.ModelAlgo_BoundingBox_Compute(*args)

def ModelAlgo_BoundingBox_ComputeMin(*args) -> "void":
    return _CadExCore.ModelAlgo_BoundingBox_ComputeMin(*args)

class ModelAlgo_CurveLength(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelAlgo_CurveLength_swiginit(self, _CadExCore.new_ModelAlgo_CurveLength())
    __swig_destroy__ = _CadExCore.delete_ModelAlgo_CurveLength

    def Compute(self, *args) -> "double":
        return _CadExCore.ModelAlgo_CurveLength_Compute(self, *args)

# Register ModelAlgo_CurveLength in _CadExCore:
_CadExCore.ModelAlgo_CurveLength_swigregister(ModelAlgo_CurveLength)

class ModelAlgo_ValidationProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ComputeSurfaceArea(*args) -> "double":
        return _CadExCore.ModelAlgo_ValidationProperty_ComputeSurfaceArea(*args)

    @staticmethod
    def ComputeVolume(*args) -> "double":
        return _CadExCore.ModelAlgo_ValidationProperty_ComputeVolume(*args)

    @staticmethod
    def ComputeCentroid(*args) -> "void":
        return _CadExCore.ModelAlgo_ValidationProperty_ComputeCentroid(*args)

    @staticmethod
    def ComputeValidationProperties(*args) -> "bool":
        return _CadExCore.ModelAlgo_ValidationProperty_ComputeValidationProperties(*args)

    def __init__(self):
        _CadExCore.ModelAlgo_ValidationProperty_swiginit(self, _CadExCore.new_ModelAlgo_ValidationProperty())
    __swig_destroy__ = _CadExCore.delete_ModelAlgo_ValidationProperty

# Register ModelAlgo_ValidationProperty in _CadExCore:
_CadExCore.ModelAlgo_ValidationProperty_swigregister(ModelAlgo_ValidationProperty)

def ModelAlgo_ValidationProperty_ComputeSurfaceArea(*args) -> "double":
    return _CadExCore.ModelAlgo_ValidationProperty_ComputeSurfaceArea(*args)

def ModelAlgo_ValidationProperty_ComputeVolume(*args) -> "double":
    return _CadExCore.ModelAlgo_ValidationProperty_ComputeVolume(*args)

def ModelAlgo_ValidationProperty_ComputeCentroid(*args) -> "void":
    return _CadExCore.ModelAlgo_ValidationProperty_ComputeCentroid(*args)

def ModelAlgo_ValidationProperty_ComputeValidationProperties(*args) -> "bool":
    return _CadExCore.ModelAlgo_ValidationProperty_ComputeValidationProperties(*args)

class ModelAlgo_ValidationPropertyData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelAlgo_ValidationPropertyData_swiginit(self, _CadExCore.new_ModelAlgo_ValidationPropertyData())

    def Volume(self, *args) -> "double &":
        return _CadExCore.ModelAlgo_ValidationPropertyData_Volume(self, *args)

    def SurfaceArea(self, *args) -> "double &":
        return _CadExCore.ModelAlgo_ValidationPropertyData_SurfaceArea(self, *args)

    def Centroid(self, *args) -> "cadex::ModelData_Point &":
        return _CadExCore.ModelAlgo_ValidationPropertyData_Centroid(self, *args)

    def FirstAxisOfInertia(self, *args) -> "cadex::ModelData_Direction &":
        return _CadExCore.ModelAlgo_ValidationPropertyData_FirstAxisOfInertia(self, *args)

    def SecondAxisOfInertia(self, *args) -> "cadex::ModelData_Direction &":
        return _CadExCore.ModelAlgo_ValidationPropertyData_SecondAxisOfInertia(self, *args)

    def ThirdAxisOfInertia(self, *args) -> "cadex::ModelData_Direction &":
        return _CadExCore.ModelAlgo_ValidationPropertyData_ThirdAxisOfInertia(self, *args)
    __swig_destroy__ = _CadExCore.delete_ModelAlgo_ValidationPropertyData

# Register ModelAlgo_ValidationPropertyData in _CadExCore:
_CadExCore.ModelAlgo_ValidationPropertyData_swigregister(ModelAlgo_ValidationPropertyData)

class ModelData_Assembly(ModelData_SceneGraphElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Assembly_swiginit(self, _CadExCore.new_ModelData_Assembly(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_Assembly_GetTypeId()

    def AddInstance(self, *args) -> "void":
        return _CadExCore.ModelData_Assembly_AddInstance(self, *args)

    def RemoveInstance(self, theInstance: "ModelData_Instance") -> "bool":
        return _CadExCore.ModelData_Assembly_RemoveInstance(self, theInstance)

    def NumberOfInstances(self) -> "size_t":
        return _CadExCore.ModelData_Assembly_NumberOfInstances(self)

    @staticmethod
    def Cast(theBase: "ModelData_SceneGraphElement") -> "cadex::ModelData_Assembly":
        return _CadExCore.ModelData_Assembly_Cast(theBase)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_Assembly_swiginit(self, _CadExCore.new_ModelData_Assembly(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def AcceptElementVisitor(self, theVisitor):
        if theVisitor.VisitEnterAssembly(self):
            anIt = self.GetElementIterator()
            for i in anIt:
                i.AcceptElementVisitor(theVisitor)

        theVisitor.VisitLeaveAssembly(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_Assembly

# Register ModelData_Assembly in _CadExCore:
_CadExCore.ModelData_Assembly_swigregister(ModelData_Assembly)

def ModelData_Assembly_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_Assembly_GetTypeId()

def ModelData_Assembly_Cast(theBase: "ModelData_SceneGraphElement") -> "cadex::ModelData_Assembly":
    return _CadExCore.ModelData_Assembly_Cast(theBase)

class ModelData_Instance(ModelData_SceneGraphElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Instance_swiginit(self, _CadExCore.new_ModelData_Instance(*args))

    def SetReference(self, theElement: "ModelData_SceneGraphElement") -> "void":
        return _CadExCore.ModelData_Instance_SetReference(self, theElement)

    def Reference(self) -> "cadex::ModelData_SceneGraphElement":
        return _CadExCore.ModelData_Instance_Reference(self)

    def SetTransformation(self, theTrsf: "ModelData_Transformation") -> "void":
        return _CadExCore.ModelData_Instance_SetTransformation(self, theTrsf)

    def HasTransformation(self) -> "bool":
        return _CadExCore.ModelData_Instance_HasTransformation(self)

    def Transformation(self) -> "cadex::ModelData_Transformation const &":
        return _CadExCore.ModelData_Instance_Transformation(self)

    def ReferenceBaseConfiguration(self) -> "cadex::ModelData_SceneGraphElement":
        return _CadExCore.ModelData_Instance_ReferenceBaseConfiguration(self)

    def SetReferenceConfigurationName(self, theName: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_Instance_SetReferenceConfigurationName(self, theName)

    def ReferenceConfigurationName(self) -> "cadex::Base_UTF16String":
        return _CadExCore.ModelData_Instance_ReferenceConfigurationName(self)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_Instance_GetTypeId()

    @staticmethod
    def Cast(theBase: "ModelData_SceneGraphElement") -> "cadex::ModelData_Instance":
        return _CadExCore.ModelData_Instance_Cast(theBase)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_Instance_swiginit(self, _CadExCore.new_ModelData_Instance(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def AcceptElementVisitor(self, theVisitor):
        aReference = self.Reference()
        if theVisitor.VisitEnterInstance(self) and aReference:
            aReference.AcceptElementVisitor(theVisitor)

        theVisitor.VisitLeaveInstance(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_Instance

# Register ModelData_Instance in _CadExCore:
_CadExCore.ModelData_Instance_swigregister(ModelData_Instance)

def ModelData_Instance_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_Instance_GetTypeId()

def ModelData_Instance_Cast(theBase: "ModelData_SceneGraphElement") -> "cadex::ModelData_Instance":
    return _CadExCore.ModelData_Instance_Cast(theBase)

class ModelData_SceneGraphElementVisitorDecorator(ModelData_Model_ElementVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theRef: "ModelData_Model_ElementVisitor"):
        if self.__class__ == ModelData_SceneGraphElementVisitorDecorator:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_SceneGraphElementVisitorDecorator_swiginit(self, _CadExCore.new_ModelData_SceneGraphElementVisitorDecorator(_self, theRef))

    def VisitPart(self, thePart: "ModelData_Part") -> "void":
        return _CadExCore.ModelData_SceneGraphElementVisitorDecorator_VisitPart(self, thePart)

    def VisitEnterAssembly(self, theAssembly: "ModelData_Assembly") -> "bool":
        return _CadExCore.ModelData_SceneGraphElementVisitorDecorator_VisitEnterAssembly(self, theAssembly)

    def VisitEnterInstance(self, theInstance: "ModelData_Instance") -> "bool":
        return _CadExCore.ModelData_SceneGraphElementVisitorDecorator_VisitEnterInstance(self, theInstance)

    def VisitLeaveAssembly(self, theAssembly: "ModelData_Assembly") -> "void":
        return _CadExCore.ModelData_SceneGraphElementVisitorDecorator_VisitLeaveAssembly(self, theAssembly)

    def VisitLeaveInstance(self, theInstance: "ModelData_Instance") -> "void":
        return _CadExCore.ModelData_SceneGraphElementVisitorDecorator_VisitLeaveInstance(self, theInstance)
    __swig_destroy__ = _CadExCore.delete_ModelData_SceneGraphElementVisitorDecorator
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_SceneGraphElementVisitorDecorator(self)
        return weakref.proxy(self)

# Register ModelData_SceneGraphElementVisitorDecorator in _CadExCore:
_CadExCore.ModelData_SceneGraphElementVisitorDecorator_swigregister(ModelData_SceneGraphElementVisitorDecorator)

class ModelData_SceneGraphElementUniqueVisitor(ModelData_SceneGraphElementVisitorDecorator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theRef: "ModelData_Model_ElementVisitor"):
        if self.__class__ == ModelData_SceneGraphElementUniqueVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_SceneGraphElementUniqueVisitor_swiginit(self, _CadExCore.new_ModelData_SceneGraphElementUniqueVisitor(_self, theRef))

    def VisitPart(self, thePart: "ModelData_Part") -> "void":
        return _CadExCore.ModelData_SceneGraphElementUniqueVisitor_VisitPart(self, thePart)

    def VisitEnterAssembly(self, theAssembly: "ModelData_Assembly") -> "bool":
        return _CadExCore.ModelData_SceneGraphElementUniqueVisitor_VisitEnterAssembly(self, theAssembly)

    def VisitLeaveAssembly(self, theAssembly: "ModelData_Assembly") -> "void":
        return _CadExCore.ModelData_SceneGraphElementUniqueVisitor_VisitLeaveAssembly(self, theAssembly)

    def VisitEnterInstance(self, theInstance: "ModelData_Instance") -> "bool":
        return _CadExCore.ModelData_SceneGraphElementUniqueVisitor_VisitEnterInstance(self, theInstance)

    def VisitLeaveInstance(self, theInstance: "ModelData_Instance") -> "void":
        return _CadExCore.ModelData_SceneGraphElementUniqueVisitor_VisitLeaveInstance(self, theInstance)
    __swig_destroy__ = _CadExCore.delete_ModelData_SceneGraphElementUniqueVisitor
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_SceneGraphElementUniqueVisitor(self)
        return weakref.proxy(self)

# Register ModelData_SceneGraphElementUniqueVisitor in _CadExCore:
_CadExCore.ModelData_SceneGraphElementUniqueVisitor_swigregister(ModelData_SceneGraphElementUniqueVisitor)

class ModelData_ElementarySurface(ModelData_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Position(self) -> "cadex::ModelData_Axis3Placement const &":
        return _CadExCore.ModelData_ElementarySurface_Position(self)

    def Location(self) -> "cadex::ModelData_Point const &":
        return _CadExCore.ModelData_ElementarySurface_Location(self)

    def Direction(self) -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_ElementarySurface_Direction(self)

    def Parameter(self, thePoint: "ModelData_Point") -> "cadex::ModelData_Point2d":
        return _CadExCore.ModelData_ElementarySurface_Parameter(self, thePoint)

    @staticmethod
    def Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_ElementarySurface":
        return _CadExCore.ModelData_ElementarySurface_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_ElementarySurface

# Register ModelData_ElementarySurface in _CadExCore:
_CadExCore.ModelData_ElementarySurface_swigregister(ModelData_ElementarySurface)

def ModelData_ElementarySurface_Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_ElementarySurface":
    return _CadExCore.ModelData_ElementarySurface_Cast(theBase)

class ModelData_CylindricalSurface(ModelData_ElementarySurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePosition: "ModelData_Axis3Placement", theRadius: "double"):
        _CadExCore.ModelData_CylindricalSurface_swiginit(self, _CadExCore.new_ModelData_CylindricalSurface(thePosition, theRadius))

    def Radius(self) -> "double":
        return _CadExCore.ModelData_CylindricalSurface_Radius(self)

    @staticmethod
    def Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_CylindricalSurface":
        return _CadExCore.ModelData_CylindricalSurface_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_CylindricalSurface

# Register ModelData_CylindricalSurface in _CadExCore:
_CadExCore.ModelData_CylindricalSurface_swigregister(ModelData_CylindricalSurface)

def ModelData_CylindricalSurface_Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_CylindricalSurface":
    return _CadExCore.ModelData_CylindricalSurface_Cast(theBase)

class ModelData_SphericalSurface(ModelData_ElementarySurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePosition: "ModelData_Axis3Placement", theRadius: "double"):
        _CadExCore.ModelData_SphericalSurface_swiginit(self, _CadExCore.new_ModelData_SphericalSurface(thePosition, theRadius))

    def Radius(self) -> "double":
        return _CadExCore.ModelData_SphericalSurface_Radius(self)

    @staticmethod
    def Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_SphericalSurface":
        return _CadExCore.ModelData_SphericalSurface_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_SphericalSurface

# Register ModelData_SphericalSurface in _CadExCore:
_CadExCore.ModelData_SphericalSurface_swigregister(ModelData_SphericalSurface)

def ModelData_SphericalSurface_Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_SphericalSurface":
    return _CadExCore.ModelData_SphericalSurface_Cast(theBase)

class ModelData_ToroidalSurface(ModelData_ElementarySurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePosition: "ModelData_Axis3Placement", theMajorRadius: "double", theMinorRadius: "double"):
        _CadExCore.ModelData_ToroidalSurface_swiginit(self, _CadExCore.new_ModelData_ToroidalSurface(thePosition, theMajorRadius, theMinorRadius))

    def MajorRadius(self) -> "double":
        return _CadExCore.ModelData_ToroidalSurface_MajorRadius(self)

    def MinorRadius(self) -> "double":
        return _CadExCore.ModelData_ToroidalSurface_MinorRadius(self)

    @staticmethod
    def Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_ToroidalSurface":
        return _CadExCore.ModelData_ToroidalSurface_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_ToroidalSurface

# Register ModelData_ToroidalSurface in _CadExCore:
_CadExCore.ModelData_ToroidalSurface_swigregister(ModelData_ToroidalSurface)

def ModelData_ToroidalSurface_Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_ToroidalSurface":
    return _CadExCore.ModelData_ToroidalSurface_Cast(theBase)

class ModelData_RectangularTrimmedSurface(ModelData_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_RectangularTrimmedSurface_swiginit(self, _CadExCore.new_ModelData_RectangularTrimmedSurface(*args))

    def BasisSurface(self) -> "cadex::ModelData_Surface":
        return _CadExCore.ModelData_RectangularTrimmedSurface_BasisSurface(self)

    @staticmethod
    def Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_RectangularTrimmedSurface":
        return _CadExCore.ModelData_RectangularTrimmedSurface_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_RectangularTrimmedSurface

# Register ModelData_RectangularTrimmedSurface in _CadExCore:
_CadExCore.ModelData_RectangularTrimmedSurface_swigregister(ModelData_RectangularTrimmedSurface)

def ModelData_RectangularTrimmedSurface_Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_RectangularTrimmedSurface":
    return _CadExCore.ModelData_RectangularTrimmedSurface_Cast(theBase)

class ModelData_BezierCurve(ModelData_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Degree(self) -> "int":
        return _CadExCore.ModelData_BezierCurve_Degree(self)

    def NumberOfPoles(self) -> "int":
        return _CadExCore.ModelData_BezierCurve_NumberOfPoles(self)

    def Pole(self, theIndex: "int const") -> "cadex::ModelData_Point":
        return _CadExCore.ModelData_BezierCurve_Pole(self, theIndex)

    def Weight(self, theIndex: "int const") -> "double":
        return _CadExCore.ModelData_BezierCurve_Weight(self, theIndex)

    @staticmethod
    def Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_BezierCurve":
        return _CadExCore.ModelData_BezierCurve_Cast(theBase)

    def __init__(self, *args):
        _CadExCore.ModelData_BezierCurve_swiginit(self, _CadExCore.new_ModelData_BezierCurve(*args))

    def Poles(self) -> "std::vector< cadex::ModelData_Point,std::allocator< cadex::ModelData_Point > >":
        return _CadExCore.ModelData_BezierCurve_Poles(self)

    def Weights(self) -> "std::vector< double,std::allocator< double > >":
        return _CadExCore.ModelData_BezierCurve_Weights(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_BezierCurve

# Register ModelData_BezierCurve in _CadExCore:
_CadExCore.ModelData_BezierCurve_swigregister(ModelData_BezierCurve)

def ModelData_BezierCurve_Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_BezierCurve":
    return _CadExCore.ModelData_BezierCurve_Cast(theBase)

class ModelData_BezierCurve2d(ModelData_Curve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Degree(self) -> "int":
        return _CadExCore.ModelData_BezierCurve2d_Degree(self)

    def NumberOfPoles(self) -> "int":
        return _CadExCore.ModelData_BezierCurve2d_NumberOfPoles(self)

    def Pole(self, theIndex: "int const") -> "cadex::ModelData_Point2d":
        return _CadExCore.ModelData_BezierCurve2d_Pole(self, theIndex)

    def Weight(self, theIndex: "int const") -> "double":
        return _CadExCore.ModelData_BezierCurve2d_Weight(self, theIndex)

    @staticmethod
    def Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_BezierCurve2d":
        return _CadExCore.ModelData_BezierCurve2d_Cast(theBase)

    def __init__(self, *args):
        _CadExCore.ModelData_BezierCurve2d_swiginit(self, _CadExCore.new_ModelData_BezierCurve2d(*args))

    def Poles(self) -> "std::vector< cadex::ModelData_Point2d,std::allocator< cadex::ModelData_Point2d > >":
        return _CadExCore.ModelData_BezierCurve2d_Poles(self)

    def Weights(self) -> "std::vector< double,std::allocator< double > >":
        return _CadExCore.ModelData_BezierCurve2d_Weights(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_BezierCurve2d

# Register ModelData_BezierCurve2d in _CadExCore:
_CadExCore.ModelData_BezierCurve2d_swigregister(ModelData_BezierCurve2d)

def ModelData_BezierCurve2d_Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_BezierCurve2d":
    return _CadExCore.ModelData_BezierCurve2d_Cast(theBase)

class ModelData_BezierSurface(ModelData_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def UDegree(self) -> "int":
        return _CadExCore.ModelData_BezierSurface_UDegree(self)

    def VDegree(self) -> "int":
        return _CadExCore.ModelData_BezierSurface_VDegree(self)

    def NumberOfUPoles(self) -> "int":
        return _CadExCore.ModelData_BezierSurface_NumberOfUPoles(self)

    def NumberOfVPoles(self) -> "int":
        return _CadExCore.ModelData_BezierSurface_NumberOfVPoles(self)

    def Pole(self, theUIndex: "int const", theVIndex: "int const") -> "cadex::ModelData_Point":
        return _CadExCore.ModelData_BezierSurface_Pole(self, theUIndex, theVIndex)

    def Weight(self, theUIndex: "int const", theVIndex: "int const") -> "double":
        return _CadExCore.ModelData_BezierSurface_Weight(self, theUIndex, theVIndex)

    @staticmethod
    def Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_BezierSurface":
        return _CadExCore.ModelData_BezierSurface_Cast(theBase)

    def __init__(self, *args):
        _CadExCore.ModelData_BezierSurface_swiginit(self, _CadExCore.new_ModelData_BezierSurface(*args))

    def Poles(self) -> "std::vector< cadex::ModelData_Point,std::allocator< cadex::ModelData_Point > >":
        return _CadExCore.ModelData_BezierSurface_Poles(self)

    def Weights(self) -> "std::vector< double,std::allocator< double > >":
        return _CadExCore.ModelData_BezierSurface_Weights(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_BezierSurface

# Register ModelData_BezierSurface in _CadExCore:
_CadExCore.ModelData_BezierSurface_swigregister(ModelData_BezierSurface)

def ModelData_BezierSurface_Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_BezierSurface":
    return _CadExCore.ModelData_BezierSurface_Cast(theBase)

class ModelData_BSplineCurve(ModelData_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Degree(self) -> "int":
        return _CadExCore.ModelData_BSplineCurve_Degree(self)

    def NumberOfKnots(self) -> "int":
        return _CadExCore.ModelData_BSplineCurve_NumberOfKnots(self)

    def NumberOfPoles(self) -> "int":
        return _CadExCore.ModelData_BSplineCurve_NumberOfPoles(self)

    def Knot(self, theIndex: "int") -> "double":
        return _CadExCore.ModelData_BSplineCurve_Knot(self, theIndex)

    def Multiplicity(self, theIndex: "int") -> "int":
        return _CadExCore.ModelData_BSplineCurve_Multiplicity(self, theIndex)

    def Pole(self, theIndex: "int") -> "cadex::ModelData_Point":
        return _CadExCore.ModelData_BSplineCurve_Pole(self, theIndex)

    def IsRational(self) -> "bool":
        return _CadExCore.ModelData_BSplineCurve_IsRational(self)

    def Weight(self, theIndex: "int") -> "double":
        return _CadExCore.ModelData_BSplineCurve_Weight(self, theIndex)

    @staticmethod
    def Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_BSplineCurve":
        return _CadExCore.ModelData_BSplineCurve_Cast(theBase)

    def Knots(self) -> "std::vector< double,std::allocator< double > >":
        return _CadExCore.ModelData_BSplineCurve_Knots(self)

    def Multiplicities(self) -> "std::vector< int,std::allocator< int > >":
        return _CadExCore.ModelData_BSplineCurve_Multiplicities(self)

    def Poles(self) -> "std::vector< cadex::ModelData_Point,std::allocator< cadex::ModelData_Point > >":
        return _CadExCore.ModelData_BSplineCurve_Poles(self)

    def Weights(self) -> "std::vector< double,std::allocator< double > >":
        return _CadExCore.ModelData_BSplineCurve_Weights(self)

    def __init__(self, *args):
        _CadExCore.ModelData_BSplineCurve_swiginit(self, _CadExCore.new_ModelData_BSplineCurve(*args))
    __swig_destroy__ = _CadExCore.delete_ModelData_BSplineCurve

# Register ModelData_BSplineCurve in _CadExCore:
_CadExCore.ModelData_BSplineCurve_swigregister(ModelData_BSplineCurve)

def ModelData_BSplineCurve_Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_BSplineCurve":
    return _CadExCore.ModelData_BSplineCurve_Cast(theBase)

class ModelData_BSplineCurve2d(ModelData_Curve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Degree(self) -> "int":
        return _CadExCore.ModelData_BSplineCurve2d_Degree(self)

    def NumberOfKnots(self) -> "int":
        return _CadExCore.ModelData_BSplineCurve2d_NumberOfKnots(self)

    def NumberOfPoles(self) -> "int":
        return _CadExCore.ModelData_BSplineCurve2d_NumberOfPoles(self)

    def Knot(self, theIndex: "int") -> "double":
        return _CadExCore.ModelData_BSplineCurve2d_Knot(self, theIndex)

    def Multiplicity(self, theIndex: "int") -> "int":
        return _CadExCore.ModelData_BSplineCurve2d_Multiplicity(self, theIndex)

    def Pole(self, theIndex: "int") -> "cadex::ModelData_Point2d":
        return _CadExCore.ModelData_BSplineCurve2d_Pole(self, theIndex)

    def IsRational(self) -> "bool":
        return _CadExCore.ModelData_BSplineCurve2d_IsRational(self)

    def Weight(self, theIndex: "int") -> "double":
        return _CadExCore.ModelData_BSplineCurve2d_Weight(self, theIndex)

    @staticmethod
    def Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_BSplineCurve2d":
        return _CadExCore.ModelData_BSplineCurve2d_Cast(theBase)

    def __init__(self, *args):
        _CadExCore.ModelData_BSplineCurve2d_swiginit(self, _CadExCore.new_ModelData_BSplineCurve2d(*args))

    def Knots(self) -> "std::vector< double,std::allocator< double > >":
        return _CadExCore.ModelData_BSplineCurve2d_Knots(self)

    def Multiplicities(self) -> "std::vector< int,std::allocator< int > >":
        return _CadExCore.ModelData_BSplineCurve2d_Multiplicities(self)

    def Poles(self) -> "std::vector< cadex::ModelData_Point2d,std::allocator< cadex::ModelData_Point2d > >":
        return _CadExCore.ModelData_BSplineCurve2d_Poles(self)

    def Weights(self) -> "std::vector< double,std::allocator< double > >":
        return _CadExCore.ModelData_BSplineCurve2d_Weights(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_BSplineCurve2d

# Register ModelData_BSplineCurve2d in _CadExCore:
_CadExCore.ModelData_BSplineCurve2d_swigregister(ModelData_BSplineCurve2d)

def ModelData_BSplineCurve2d_Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_BSplineCurve2d":
    return _CadExCore.ModelData_BSplineCurve2d_Cast(theBase)

class ModelData_BSplineSurface(ModelData_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def UDegree(self) -> "int":
        return _CadExCore.ModelData_BSplineSurface_UDegree(self)

    def VDegree(self) -> "int":
        return _CadExCore.ModelData_BSplineSurface_VDegree(self)

    def NumberOfUKnots(self) -> "int":
        return _CadExCore.ModelData_BSplineSurface_NumberOfUKnots(self)

    def NumberOfUPoles(self) -> "int":
        return _CadExCore.ModelData_BSplineSurface_NumberOfUPoles(self)

    def NumberOfVKnots(self) -> "int":
        return _CadExCore.ModelData_BSplineSurface_NumberOfVKnots(self)

    def NumberOfVPoles(self) -> "int":
        return _CadExCore.ModelData_BSplineSurface_NumberOfVPoles(self)

    def UKnot(self, theUIndex: "int") -> "double":
        return _CadExCore.ModelData_BSplineSurface_UKnot(self, theUIndex)

    def VKnot(self, theVIndex: "int") -> "double":
        return _CadExCore.ModelData_BSplineSurface_VKnot(self, theVIndex)

    def UMultiplicity(self, theUIndex: "int") -> "int":
        return _CadExCore.ModelData_BSplineSurface_UMultiplicity(self, theUIndex)

    def VMultiplicity(self, theVIndex: "int") -> "int":
        return _CadExCore.ModelData_BSplineSurface_VMultiplicity(self, theVIndex)

    def Pole(self, theUIndex: "int", theVIndex: "int") -> "cadex::ModelData_Point":
        return _CadExCore.ModelData_BSplineSurface_Pole(self, theUIndex, theVIndex)

    def IsURational(self) -> "bool":
        return _CadExCore.ModelData_BSplineSurface_IsURational(self)

    def IsVRational(self) -> "bool":
        return _CadExCore.ModelData_BSplineSurface_IsVRational(self)

    def Weight(self, theUIndex: "int", theVIndex: "int") -> "double":
        return _CadExCore.ModelData_BSplineSurface_Weight(self, theUIndex, theVIndex)

    @staticmethod
    def Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_BSplineSurface":
        return _CadExCore.ModelData_BSplineSurface_Cast(theBase)

    def UKnots(self) -> "std::vector< double,std::allocator< double > >":
        return _CadExCore.ModelData_BSplineSurface_UKnots(self)

    def VKnots(self) -> "std::vector< double,std::allocator< double > >":
        return _CadExCore.ModelData_BSplineSurface_VKnots(self)

    def UMultiplicities(self) -> "std::vector< int,std::allocator< int > >":
        return _CadExCore.ModelData_BSplineSurface_UMultiplicities(self)

    def VMultiplicities(self) -> "std::vector< int,std::allocator< int > >":
        return _CadExCore.ModelData_BSplineSurface_VMultiplicities(self)

    def Poles(self) -> "std::vector< cadex::ModelData_Point,std::allocator< cadex::ModelData_Point > >":
        return _CadExCore.ModelData_BSplineSurface_Poles(self)

    def Weights(self) -> "std::vector< double,std::allocator< double > >":
        return _CadExCore.ModelData_BSplineSurface_Weights(self)

    def __init__(self, *args):
        _CadExCore.ModelData_BSplineSurface_swiginit(self, _CadExCore.new_ModelData_BSplineSurface(*args))
    __swig_destroy__ = _CadExCore.delete_ModelData_BSplineSurface

# Register ModelData_BSplineSurface in _CadExCore:
_CadExCore.ModelData_BSplineSurface_swigregister(ModelData_BSplineSurface)

def ModelData_BSplineSurface_Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_BSplineSurface":
    return _CadExCore.ModelData_BSplineSurface_Cast(theBase)

class ModelData_Plane(ModelData_ElementarySurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_Plane_swiginit(self, _CadExCore.new_ModelData_Plane(*args))

    def Location(self) -> "cadex::ModelData_Point const &":
        return _CadExCore.ModelData_Plane_Location(self)

    def Direction(self) -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_Plane_Direction(self)

    @staticmethod
    def Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_Plane":
        return _CadExCore.ModelData_Plane_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_Plane

# Register ModelData_Plane in _CadExCore:
_CadExCore.ModelData_Plane_swigregister(ModelData_Plane)

def ModelData_Plane_Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_Plane":
    return _CadExCore.ModelData_Plane_Cast(theBase)

class ModelData_Conic(ModelData_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Position(self) -> "cadex::ModelData_Axis2Placement const &":
        return _CadExCore.ModelData_Conic_Position(self)

    def Parameter(self, thePoint: "ModelData_Point") -> "double":
        return _CadExCore.ModelData_Conic_Parameter(self, thePoint)

    @staticmethod
    def Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_Conic":
        return _CadExCore.ModelData_Conic_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_Conic

# Register ModelData_Conic in _CadExCore:
_CadExCore.ModelData_Conic_swigregister(ModelData_Conic)

def ModelData_Conic_Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_Conic":
    return _CadExCore.ModelData_Conic_Cast(theBase)

class ModelData_Conic2d(ModelData_Curve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Position(self) -> "cadex::ModelData_Axis2Placement2d const &":
        return _CadExCore.ModelData_Conic2d_Position(self)

    def Parameter(self, thePoint: "ModelData_Point2d") -> "double":
        return _CadExCore.ModelData_Conic2d_Parameter(self, thePoint)

    @staticmethod
    def Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_Conic2d":
        return _CadExCore.ModelData_Conic2d_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_Conic2d

# Register ModelData_Conic2d in _CadExCore:
_CadExCore.ModelData_Conic2d_swigregister(ModelData_Conic2d)

def ModelData_Conic2d_Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_Conic2d":
    return _CadExCore.ModelData_Conic2d_Cast(theBase)

class ModelData_ConicalSurface(ModelData_ElementarySurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePosition: "ModelData_Axis3Placement", theSemiAngle: "double", theRadius: "double"):
        _CadExCore.ModelData_ConicalSurface_swiginit(self, _CadExCore.new_ModelData_ConicalSurface(thePosition, theSemiAngle, theRadius))

    def Angle(self) -> "double":
        return _CadExCore.ModelData_ConicalSurface_Angle(self)

    def SemiAngle(self) -> "double":
        return _CadExCore.ModelData_ConicalSurface_SemiAngle(self)

    def Radius(self) -> "double":
        return _CadExCore.ModelData_ConicalSurface_Radius(self)

    @staticmethod
    def Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_ConicalSurface":
        return _CadExCore.ModelData_ConicalSurface_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_ConicalSurface

# Register ModelData_ConicalSurface in _CadExCore:
_CadExCore.ModelData_ConicalSurface_swigregister(ModelData_ConicalSurface)

def ModelData_ConicalSurface_Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_ConicalSurface":
    return _CadExCore.ModelData_ConicalSurface_Cast(theBase)

class ModelData_OffsetCurve(ModelData_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theBasisCurve: "ModelData_Curve", theOffset: "double", theDir: "ModelData_Direction"):
        _CadExCore.ModelData_OffsetCurve_swiginit(self, _CadExCore.new_ModelData_OffsetCurve(theBasisCurve, theOffset, theDir))

    def BasisCurve(self) -> "cadex::ModelData_Curve":
        return _CadExCore.ModelData_OffsetCurve_BasisCurve(self)

    def Direction(self) -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_OffsetCurve_Direction(self)

    def Offset(self) -> "double":
        return _CadExCore.ModelData_OffsetCurve_Offset(self)

    @staticmethod
    def Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_OffsetCurve":
        return _CadExCore.ModelData_OffsetCurve_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_OffsetCurve

# Register ModelData_OffsetCurve in _CadExCore:
_CadExCore.ModelData_OffsetCurve_swigregister(ModelData_OffsetCurve)

def ModelData_OffsetCurve_Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_OffsetCurve":
    return _CadExCore.ModelData_OffsetCurve_Cast(theBase)

class ModelData_OffsetCurve2d(ModelData_Curve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theBasisCurve: "ModelData_Curve2d", theOffset: "double"):
        _CadExCore.ModelData_OffsetCurve2d_swiginit(self, _CadExCore.new_ModelData_OffsetCurve2d(theBasisCurve, theOffset))

    def BasisCurve(self) -> "cadex::ModelData_Curve2d":
        return _CadExCore.ModelData_OffsetCurve2d_BasisCurve(self)

    def Offset(self) -> "double":
        return _CadExCore.ModelData_OffsetCurve2d_Offset(self)

    @staticmethod
    def Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_OffsetCurve2d":
        return _CadExCore.ModelData_OffsetCurve2d_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_OffsetCurve2d

# Register ModelData_OffsetCurve2d in _CadExCore:
_CadExCore.ModelData_OffsetCurve2d_swigregister(ModelData_OffsetCurve2d)

def ModelData_OffsetCurve2d_Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_OffsetCurve2d":
    return _CadExCore.ModelData_OffsetCurve2d_Cast(theBase)

class ModelData_OffsetSurface(ModelData_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theBasisSurface: "ModelData_Surface", theOffset: "double"):
        _CadExCore.ModelData_OffsetSurface_swiginit(self, _CadExCore.new_ModelData_OffsetSurface(theBasisSurface, theOffset))

    def BasisSurface(self) -> "cadex::ModelData_Surface":
        return _CadExCore.ModelData_OffsetSurface_BasisSurface(self)

    def Offset(self) -> "double":
        return _CadExCore.ModelData_OffsetSurface_Offset(self)

    @staticmethod
    def Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_OffsetSurface":
        return _CadExCore.ModelData_OffsetSurface_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_OffsetSurface

# Register ModelData_OffsetSurface in _CadExCore:
_CadExCore.ModelData_OffsetSurface_swigregister(ModelData_OffsetSurface)

def ModelData_OffsetSurface_Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_OffsetSurface":
    return _CadExCore.ModelData_OffsetSurface_Cast(theBase)

class ModelData_SweptSurface(ModelData_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def BasisCurve(self) -> "cadex::ModelData_Curve":
        return _CadExCore.ModelData_SweptSurface_BasisCurve(self)

    def Direction(self) -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_SweptSurface_Direction(self)

    @staticmethod
    def Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_SweptSurface":
        return _CadExCore.ModelData_SweptSurface_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_SweptSurface

# Register ModelData_SweptSurface in _CadExCore:
_CadExCore.ModelData_SweptSurface_swigregister(ModelData_SweptSurface)

def ModelData_SweptSurface_Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_SweptSurface":
    return _CadExCore.ModelData_SweptSurface_Cast(theBase)

class ModelData_SurfaceOfLinearExtrusion(ModelData_SweptSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theBasisCurve: "ModelData_Curve", theDirection: "ModelData_Direction"):
        _CadExCore.ModelData_SurfaceOfLinearExtrusion_swiginit(self, _CadExCore.new_ModelData_SurfaceOfLinearExtrusion(theBasisCurve, theDirection))

    @staticmethod
    def Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_SurfaceOfLinearExtrusion":
        return _CadExCore.ModelData_SurfaceOfLinearExtrusion_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_SurfaceOfLinearExtrusion

# Register ModelData_SurfaceOfLinearExtrusion in _CadExCore:
_CadExCore.ModelData_SurfaceOfLinearExtrusion_swigregister(ModelData_SurfaceOfLinearExtrusion)

def ModelData_SurfaceOfLinearExtrusion_Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_SurfaceOfLinearExtrusion":
    return _CadExCore.ModelData_SurfaceOfLinearExtrusion_Cast(theBase)

class ModelData_SurfaceOfRevolution(ModelData_SweptSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theBasisCurve: "ModelData_Curve", theLocation: "ModelData_Point", theDirection: "ModelData_Direction"):
        _CadExCore.ModelData_SurfaceOfRevolution_swiginit(self, _CadExCore.new_ModelData_SurfaceOfRevolution(theBasisCurve, theLocation, theDirection))

    def Location(self) -> "cadex::ModelData_Point const &":
        return _CadExCore.ModelData_SurfaceOfRevolution_Location(self)

    @staticmethod
    def Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_SurfaceOfRevolution":
        return _CadExCore.ModelData_SurfaceOfRevolution_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_SurfaceOfRevolution

# Register ModelData_SurfaceOfRevolution in _CadExCore:
_CadExCore.ModelData_SurfaceOfRevolution_swigregister(ModelData_SurfaceOfRevolution)

def ModelData_SurfaceOfRevolution_Cast(theBase: "ModelData_Surface") -> "cadex::ModelData_SurfaceOfRevolution":
    return _CadExCore.ModelData_SurfaceOfRevolution_Cast(theBase)

class ModelData_Hyperbola(ModelData_Conic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePosition: "ModelData_Axis2Placement", theMajorRadius: "double", theMinorRadius: "double"):
        _CadExCore.ModelData_Hyperbola_swiginit(self, _CadExCore.new_ModelData_Hyperbola(thePosition, theMajorRadius, theMinorRadius))

    def MajorRadius(self) -> "double":
        return _CadExCore.ModelData_Hyperbola_MajorRadius(self)

    def MinorRadius(self) -> "double":
        return _CadExCore.ModelData_Hyperbola_MinorRadius(self)

    @staticmethod
    def Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_Hyperbola":
        return _CadExCore.ModelData_Hyperbola_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_Hyperbola

# Register ModelData_Hyperbola in _CadExCore:
_CadExCore.ModelData_Hyperbola_swigregister(ModelData_Hyperbola)

def ModelData_Hyperbola_Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_Hyperbola":
    return _CadExCore.ModelData_Hyperbola_Cast(theBase)

class ModelData_Hyperbola2d(ModelData_Conic2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePosition: "ModelData_Axis2Placement2d", theMajorRadius: "double", theMinorRadius: "double"):
        _CadExCore.ModelData_Hyperbola2d_swiginit(self, _CadExCore.new_ModelData_Hyperbola2d(thePosition, theMajorRadius, theMinorRadius))

    def MajorRadius(self) -> "double":
        return _CadExCore.ModelData_Hyperbola2d_MajorRadius(self)

    def MinorRadius(self) -> "double":
        return _CadExCore.ModelData_Hyperbola2d_MinorRadius(self)

    @staticmethod
    def Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_Hyperbola2d":
        return _CadExCore.ModelData_Hyperbola2d_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_Hyperbola2d

# Register ModelData_Hyperbola2d in _CadExCore:
_CadExCore.ModelData_Hyperbola2d_swigregister(ModelData_Hyperbola2d)

def ModelData_Hyperbola2d_Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_Hyperbola2d":
    return _CadExCore.ModelData_Hyperbola2d_Cast(theBase)

class ModelData_Parabola2d(ModelData_Conic2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePosition: "ModelData_Axis2Placement2d", theFocal: "double"):
        _CadExCore.ModelData_Parabola2d_swiginit(self, _CadExCore.new_ModelData_Parabola2d(thePosition, theFocal))

    def Focal(self) -> "double":
        return _CadExCore.ModelData_Parabola2d_Focal(self)

    @staticmethod
    def Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_Parabola2d":
        return _CadExCore.ModelData_Parabola2d_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_Parabola2d

# Register ModelData_Parabola2d in _CadExCore:
_CadExCore.ModelData_Parabola2d_swigregister(ModelData_Parabola2d)

def ModelData_Parabola2d_Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_Parabola2d":
    return _CadExCore.ModelData_Parabola2d_Cast(theBase)

class ModelData_Parabola(ModelData_Conic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePosition: "ModelData_Axis2Placement", theFocal: "double"):
        _CadExCore.ModelData_Parabola_swiginit(self, _CadExCore.new_ModelData_Parabola(thePosition, theFocal))

    def Focal(self) -> "double":
        return _CadExCore.ModelData_Parabola_Focal(self)

    @staticmethod
    def Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_Parabola":
        return _CadExCore.ModelData_Parabola_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_Parabola

# Register ModelData_Parabola in _CadExCore:
_CadExCore.ModelData_Parabola_swigregister(ModelData_Parabola)

def ModelData_Parabola_Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_Parabola":
    return _CadExCore.ModelData_Parabola_Cast(theBase)

class ModelData_PMICamera(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_PMICamera_swiginit(self, _CadExCore.new_ModelData_PMICamera(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMICamera_GetTypeId()

    def SetLocation(self, theLocation: "ModelData_Point") -> "void":
        return _CadExCore.ModelData_PMICamera_SetLocation(self, theLocation)

    def Location(self) -> "cadex::ModelData_Point const &":
        return _CadExCore.ModelData_PMICamera_Location(self)

    def SetTargetPoint(self, theTargetPoint: "ModelData_Point") -> "void":
        return _CadExCore.ModelData_PMICamera_SetTargetPoint(self, theTargetPoint)

    def TargetPoint(self) -> "cadex::ModelData_Point const &":
        return _CadExCore.ModelData_PMICamera_TargetPoint(self)

    def SetUpDirection(self, theUpDirection: "ModelData_Direction") -> "void":
        return _CadExCore.ModelData_PMICamera_SetUpDirection(self, theUpDirection)

    def UpDirection(self) -> "cadex::ModelData_Direction const &":
        return _CadExCore.ModelData_PMICamera_UpDirection(self)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PMICamera_swiginit(self, _CadExCore.new_ModelData_PMICamera(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())

    __swig_destroy__ = _CadExCore.delete_ModelData_PMICamera

# Register ModelData_PMICamera in _CadExCore:
_CadExCore.ModelData_PMICamera_swigregister(ModelData_PMICamera)

def ModelData_PMICamera_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMICamera_GetTypeId()

class ModelData_PMIConverter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_PMIConverter_swiginit(self, _CadExCore.new_ModelData_PMIConverter())

    def Convert(self, *args) -> "cadex::ModelData_PolyLineSet":
        return _CadExCore.ModelData_PMIConverter_Convert(self, *args)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIConverter

# Register ModelData_PMIConverter in _CadExCore:
_CadExCore.ModelData_PMIConverter_swigregister(ModelData_PMIConverter)

ModelData_PMI_Note = _CadExCore.ModelData_PMI_Note
ModelData_PMI_Dimension = _CadExCore.ModelData_PMI_Dimension
ModelData_PMI_Tolerance = _CadExCore.ModelData_PMI_Tolerance
ModelData_PMI_CoordinateSystem = _CadExCore.ModelData_PMI_CoordinateSystem
ModelData_PMI_CenterLine = _CadExCore.ModelData_PMI_CenterLine
ModelData_PMI_ReferenceGeometry = _CadExCore.ModelData_PMI_ReferenceGeometry
ModelData_PMI_MeasurementPoint = _CadExCore.ModelData_PMI_MeasurementPoint
ModelData_PMI_Datum = _CadExCore.ModelData_PMI_Datum
ModelData_PMI_FeatureControlFrame = _CadExCore.ModelData_PMI_FeatureControlFrame
ModelData_PMI_Weld = _CadExCore.ModelData_PMI_Weld
ModelData_PMI_SurfaceFinish = _CadExCore.ModelData_PMI_SurfaceFinish
ModelData_PMI_Section = _CadExCore.ModelData_PMI_Section
ModelData_PMI_Undefined = _CadExCore.ModelData_PMI_Undefined
ModelData_PMI_UserDefined = _CadExCore.ModelData_PMI_UserDefined
class ModelData_PMIData(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_PMIData_swiginit(self, _CadExCore.new_ModelData_PMIData(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIData_GetTypeId()

    def SetGraphicalElement(self, theElement: "ModelData_PMIGraphicalElement") -> "void":
        return _CadExCore.ModelData_PMIData_SetGraphicalElement(self, theElement)

    def GraphicalElement(self) -> "cadex::ModelData_PMIGraphicalElement":
        return _CadExCore.ModelData_PMIData_GraphicalElement(self)

    def SetSemanticElement(self, theElement: "ModelData_PMISemanticElement") -> "void":
        return _CadExCore.ModelData_PMIData_SetSemanticElement(self, theElement)

    def SemanticElement(self) -> "cadex::ModelData_PMISemanticElement":
        return _CadExCore.ModelData_PMIData_SemanticElement(self)

    def AddProperties(self, theProperties: "ModelData_PropertyTable") -> "void":
        return _CadExCore.ModelData_PMIData_AddProperties(self, theProperties)

    def Properties(self) -> "cadex::ModelData_PropertyTable":
        return _CadExCore.ModelData_PMIData_Properties(self)

    def SetType(self, theType: "cadex::ModelData_PMIType") -> "void":
        return _CadExCore.ModelData_PMIData_SetType(self, theType)

    def Type(self) -> "cadex::ModelData_PMIType":
        return _CadExCore.ModelData_PMIData_Type(self)

    def IsEmpty(self) -> "bool":
        return _CadExCore.ModelData_PMIData_IsEmpty(self)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PMIData_swiginit(self, _CadExCore.new_ModelData_PMIData(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())

    __swig_destroy__ = _CadExCore.delete_ModelData_PMIData

# Register ModelData_PMIData in _CadExCore:
_CadExCore.ModelData_PMIData_swigregister(ModelData_PMIData)

def ModelData_PMIData_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIData_GetTypeId()

class ModelData_PMIGraphicalElement(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "_ModelData_BaseObject_initialized"):
        _CadExCore.ModelData_PMIGraphicalElement_swiginit(self, _CadExCore.new_ModelData_PMIGraphicalElement(arg2))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIGraphicalElement_GetTypeId()

    def SetPlane(self, thePlane: "ModelData_PMIPlane") -> "void":
        return _CadExCore.ModelData_PMIGraphicalElement_SetPlane(self, thePlane)

    def Plane(self) -> "cadex::ModelData_PMIPlane":
        return _CadExCore.ModelData_PMIGraphicalElement_Plane(self)

    def AddComponent(self, theComponent: "ModelData_PMIGraphicalElementComponent") -> "void":
        return _CadExCore.ModelData_PMIGraphicalElement_AddComponent(self, theComponent)

    def IsEmpty(self) -> "bool":
        return _CadExCore.ModelData_PMIGraphicalElement_IsEmpty(self)

    def NumberOfComponents(self) -> "size_t":
        return _CadExCore.ModelData_PMIGraphicalElement_NumberOfComponents(self)

    def Accept(self, theVisitor: "ModelData_PMIGraphicalElementComponentVisitor") -> "void":
        return _CadExCore.ModelData_PMIGraphicalElement_Accept(self, theVisitor)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PMIGraphicalElement_swiginit(self, _CadExCore.new_ModelData_PMIGraphicalElement(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def GetComponentIterator(self):
        return ModelData_PMIGraphicalElement_ComponentIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_PMIGraphicalElement

# Register ModelData_PMIGraphicalElement in _CadExCore:
_CadExCore.ModelData_PMIGraphicalElement_swigregister(ModelData_PMIGraphicalElement)

def ModelData_PMIGraphicalElement_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIGraphicalElement_GetTypeId()

class ModelData_PMIGraphicalElement_ComponentIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theElement: "ModelData_PMIGraphicalElement"):
        _CadExCore.ModelData_PMIGraphicalElement_ComponentIterator_swiginit(self, _CadExCore.new_ModelData_PMIGraphicalElement_ComponentIterator(theElement))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_PMIGraphicalElement_ComponentIterator_HasNext(self)

    def Next(self, *args) -> "cadex::ModelData_PMIGraphicalElementComponent &":
        return _CadExCore.ModelData_PMIGraphicalElement_ComponentIterator_Next(self, *args)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_PMIGraphicalElement_ComponentIterator

# Register ModelData_PMIGraphicalElement_ComponentIterator in _CadExCore:
_CadExCore.ModelData_PMIGraphicalElement_ComponentIterator_swigregister(ModelData_PMIGraphicalElement_ComponentIterator)

class ModelData_PMIGraphicalElementComponent(Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Accept(self, theVisitor: "ModelData_PMIGraphicalElementComponentVisitor") -> "void":
        return _CadExCore.ModelData_PMIGraphicalElementComponent_Accept(self, theVisitor)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIGraphicalElementComponent

# Register ModelData_PMIGraphicalElementComponent in _CadExCore:
_CadExCore.ModelData_PMIGraphicalElementComponent_swigregister(ModelData_PMIGraphicalElementComponent)

class ModelData_PMIOutlinedComponent(ModelData_PMIGraphicalElementComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theOutline: "ModelData_PMIOutline"):
        _CadExCore.ModelData_PMIOutlinedComponent_swiginit(self, _CadExCore.new_ModelData_PMIOutlinedComponent(theOutline))

    @staticmethod
    def CompareType(theComponent: "ModelData_PMIGraphicalElementComponent") -> "bool":
        return _CadExCore.ModelData_PMIOutlinedComponent_CompareType(theComponent)

    def SetOutline(self, theOutline: "ModelData_PMIOutline") -> "void":
        return _CadExCore.ModelData_PMIOutlinedComponent_SetOutline(self, theOutline)

    def Outline(self) -> "cadex::ModelData_PMIOutline":
        return _CadExCore.ModelData_PMIOutlinedComponent_Outline(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIOutlinedComponent

# Register ModelData_PMIOutlinedComponent in _CadExCore:
_CadExCore.ModelData_PMIOutlinedComponent_swigregister(ModelData_PMIOutlinedComponent)

def ModelData_PMIOutlinedComponent_CompareType(theComponent: "ModelData_PMIGraphicalElementComponent") -> "bool":
    return _CadExCore.ModelData_PMIOutlinedComponent_CompareType(theComponent)

class ModelData_PMITextComponent(ModelData_PMIGraphicalElementComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def CompareType(theComponent: "ModelData_PMIGraphicalElementComponent") -> "bool":
        return _CadExCore.ModelData_PMITextComponent_CompareType(theComponent)

    def SetText(self, theText: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_PMITextComponent_SetText(self, theText)

    def Text(self) -> "cadex::Base_UTF16String":
        return _CadExCore.ModelData_PMITextComponent_Text(self)

    def SetTextOrigin(self, theTextOrigin: "ModelData_Point2d") -> "void":
        return _CadExCore.ModelData_PMITextComponent_SetTextOrigin(self, theTextOrigin)

    def TextOrigin(self) -> "cadex::ModelData_Point2d":
        return _CadExCore.ModelData_PMITextComponent_TextOrigin(self)

    def SetTextDirection(self, theTextDirection: "ModelData_Direction2d") -> "void":
        return _CadExCore.ModelData_PMITextComponent_SetTextDirection(self, theTextDirection)

    def TextDirection(self) -> "cadex::ModelData_Direction2d":
        return _CadExCore.ModelData_PMITextComponent_TextDirection(self)

    def SetFontSize(self, theFontSize: "float") -> "void":
        return _CadExCore.ModelData_PMITextComponent_SetFontSize(self, theFontSize)

    def FontSize(self) -> "float":
        return _CadExCore.ModelData_PMITextComponent_FontSize(self)

    def SetOutline(self, theOutline: "ModelData_PMIOutline") -> "void":
        return _CadExCore.ModelData_PMITextComponent_SetOutline(self, theOutline)

    def Outline(self) -> "cadex::ModelData_PMIOutline":
        return _CadExCore.ModelData_PMITextComponent_Outline(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMITextComponent

# Register ModelData_PMITextComponent in _CadExCore:
_CadExCore.ModelData_PMITextComponent_swigregister(ModelData_PMITextComponent)

def ModelData_PMITextComponent_CompareType(theComponent: "ModelData_PMIGraphicalElementComponent") -> "bool":
    return _CadExCore.ModelData_PMITextComponent_CompareType(theComponent)

class ModelData_PMITriangulatedComponent(ModelData_PMIGraphicalElementComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theTriangleSet: "ModelData_IndexedTriangleSet"):
        _CadExCore.ModelData_PMITriangulatedComponent_swiginit(self, _CadExCore.new_ModelData_PMITriangulatedComponent(theTriangleSet))

    @staticmethod
    def CompareType(theComponent: "ModelData_PMIGraphicalElementComponent") -> "bool":
        return _CadExCore.ModelData_PMITriangulatedComponent_CompareType(theComponent)

    def SetTriangleSet(self, theTriangleSet: "ModelData_IndexedTriangleSet") -> "void":
        return _CadExCore.ModelData_PMITriangulatedComponent_SetTriangleSet(self, theTriangleSet)

    def TriangleSet(self) -> "cadex::ModelData_IndexedTriangleSet":
        return _CadExCore.ModelData_PMITriangulatedComponent_TriangleSet(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMITriangulatedComponent

# Register ModelData_PMITriangulatedComponent in _CadExCore:
_CadExCore.ModelData_PMITriangulatedComponent_swigregister(ModelData_PMITriangulatedComponent)

def ModelData_PMITriangulatedComponent_CompareType(theComponent: "ModelData_PMIGraphicalElementComponent") -> "bool":
    return _CadExCore.ModelData_PMITriangulatedComponent_CompareType(theComponent)

class ModelData_PMIGraphicalElementComponentVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIGraphicalElementComponentVisitor

    @abstractmethod
    def VisitOutlinedComponent(self, theComponent: "ModelData_PMIOutlinedComponent") -> "void":
        return _CadExCore.ModelData_PMIGraphicalElementComponentVisitor_VisitOutlinedComponent(self, theComponent)

    @abstractmethod
    def VisitTextComponent(self, theComponent: "ModelData_PMITextComponent") -> "void":
        return _CadExCore.ModelData_PMIGraphicalElementComponentVisitor_VisitTextComponent(self, theComponent)

    @abstractmethod
    def VisitTriangulatedComponent(self, theComponent: "ModelData_PMITriangulatedComponent") -> "void":
        return _CadExCore.ModelData_PMIGraphicalElementComponentVisitor_VisitTriangulatedComponent(self, theComponent)

    def __init__(self):
        if self.__class__ == ModelData_PMIGraphicalElementComponentVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_PMIGraphicalElementComponentVisitor_swiginit(self, _CadExCore.new_ModelData_PMIGraphicalElementComponentVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_PMIGraphicalElementComponentVisitor(self)
        return weakref.proxy(self)

# Register ModelData_PMIGraphicalElementComponentVisitor in _CadExCore:
_CadExCore.ModelData_PMIGraphicalElementComponentVisitor_swigregister(ModelData_PMIGraphicalElementComponentVisitor)

class ModelData_PMIGraphicalElementComponentVoidVisitor(ModelData_PMIGraphicalElementComponentVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def VisitOutlinedComponent(self, theComponent: "ModelData_PMIOutlinedComponent") -> "void":
        return _CadExCore.ModelData_PMIGraphicalElementComponentVoidVisitor_VisitOutlinedComponent(self, theComponent)

    def VisitTextComponent(self, theComponent: "ModelData_PMITextComponent") -> "void":
        return _CadExCore.ModelData_PMIGraphicalElementComponentVoidVisitor_VisitTextComponent(self, theComponent)

    def VisitTriangulatedComponent(self, theComponent: "ModelData_PMITriangulatedComponent") -> "void":
        return _CadExCore.ModelData_PMIGraphicalElementComponentVoidVisitor_VisitTriangulatedComponent(self, theComponent)

    def __init__(self):
        if self.__class__ == ModelData_PMIGraphicalElementComponentVoidVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_PMIGraphicalElementComponentVoidVisitor_swiginit(self, _CadExCore.new_ModelData_PMIGraphicalElementComponentVoidVisitor(_self, ))
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIGraphicalElementComponentVoidVisitor
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_PMIGraphicalElementComponentVoidVisitor(self)
        return weakref.proxy(self)

# Register ModelData_PMIGraphicalElementComponentVoidVisitor in _CadExCore:
_CadExCore.ModelData_PMIGraphicalElementComponentVoidVisitor_swigregister(ModelData_PMIGraphicalElementComponentVoidVisitor)

class ModelData_PMIOutline(Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Accept(self, theVisitor: "ModelData_PMIOutlineVisitor") -> "void":
        return _CadExCore.ModelData_PMIOutline_Accept(self, theVisitor)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIOutline

# Register ModelData_PMIOutline in _CadExCore:
_CadExCore.ModelData_PMIOutline_swigregister(ModelData_PMIOutline)

class ModelData_PMIPolyOutline(ModelData_PMIOutline):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theLineSet: "ModelData_PolyLineSet"):
        _CadExCore.ModelData_PMIPolyOutline_swiginit(self, _CadExCore.new_ModelData_PMIPolyOutline(theLineSet))

    @staticmethod
    def CompareType(theOutline: "ModelData_PMIOutline") -> "bool":
        return _CadExCore.ModelData_PMIPolyOutline_CompareType(theOutline)

    def SetLineSet(self, theLineSet: "ModelData_PolyLineSet") -> "void":
        return _CadExCore.ModelData_PMIPolyOutline_SetLineSet(self, theLineSet)

    def LineSet(self) -> "cadex::ModelData_PolyLineSet":
        return _CadExCore.ModelData_PMIPolyOutline_LineSet(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIPolyOutline

# Register ModelData_PMIPolyOutline in _CadExCore:
_CadExCore.ModelData_PMIPolyOutline_swigregister(ModelData_PMIPolyOutline)

def ModelData_PMIPolyOutline_CompareType(theOutline: "ModelData_PMIOutline") -> "bool":
    return _CadExCore.ModelData_PMIPolyOutline_CompareType(theOutline)

class ModelData_PMIPoly2dOutline(ModelData_PMIOutline):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theLineSet: "ModelData_PolyLine2dSet"):
        _CadExCore.ModelData_PMIPoly2dOutline_swiginit(self, _CadExCore.new_ModelData_PMIPoly2dOutline(theLineSet))

    @staticmethod
    def CompareType(theOutline: "ModelData_PMIOutline") -> "bool":
        return _CadExCore.ModelData_PMIPoly2dOutline_CompareType(theOutline)

    def SetLineSet(self, theLineSet: "ModelData_PolyLine2dSet") -> "void":
        return _CadExCore.ModelData_PMIPoly2dOutline_SetLineSet(self, theLineSet)

    def LineSet(self) -> "cadex::ModelData_PolyLine2dSet":
        return _CadExCore.ModelData_PMIPoly2dOutline_LineSet(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIPoly2dOutline

# Register ModelData_PMIPoly2dOutline in _CadExCore:
_CadExCore.ModelData_PMIPoly2dOutline_swigregister(ModelData_PMIPoly2dOutline)

def ModelData_PMIPoly2dOutline_CompareType(theOutline: "ModelData_PMIOutline") -> "bool":
    return _CadExCore.ModelData_PMIPoly2dOutline_CompareType(theOutline)

class ModelData_PMICurveOutline(ModelData_PMIOutline):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def CompareType(theOutline: "ModelData_PMIOutline") -> "bool":
        return _CadExCore.ModelData_PMICurveOutline_CompareType(theOutline)

    def Append(self, theCurve: "ModelData_Curve") -> "void":
        return _CadExCore.ModelData_PMICurveOutline_Append(self, theCurve)

    def IsEmpty(self) -> "bool":
        return _CadExCore.ModelData_PMICurveOutline_IsEmpty(self)

    def NumberOfCurves(self) -> "size_t":
        return _CadExCore.ModelData_PMICurveOutline_NumberOfCurves(self)

    def Curve(self, theIndex: "size_t") -> "cadex::ModelData_Curve const &":
        return _CadExCore.ModelData_PMICurveOutline_Curve(self, theIndex)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMICurveOutline

# Register ModelData_PMICurveOutline in _CadExCore:
_CadExCore.ModelData_PMICurveOutline_swigregister(ModelData_PMICurveOutline)

def ModelData_PMICurveOutline_CompareType(theOutline: "ModelData_PMIOutline") -> "bool":
    return _CadExCore.ModelData_PMICurveOutline_CompareType(theOutline)

class ModelData_PMICurve2dOutline(ModelData_PMIOutline):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def CompareType(theOutline: "ModelData_PMIOutline") -> "bool":
        return _CadExCore.ModelData_PMICurve2dOutline_CompareType(theOutline)

    def Append(self, theCurve: "ModelData_Curve2d") -> "void":
        return _CadExCore.ModelData_PMICurve2dOutline_Append(self, theCurve)

    def IsEmpty(self) -> "bool":
        return _CadExCore.ModelData_PMICurve2dOutline_IsEmpty(self)

    def NumberOfCurves(self) -> "size_t":
        return _CadExCore.ModelData_PMICurve2dOutline_NumberOfCurves(self)

    def Curve(self, theIndex: "size_t") -> "cadex::ModelData_Curve2d const &":
        return _CadExCore.ModelData_PMICurve2dOutline_Curve(self, theIndex)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMICurve2dOutline

# Register ModelData_PMICurve2dOutline in _CadExCore:
_CadExCore.ModelData_PMICurve2dOutline_swigregister(ModelData_PMICurve2dOutline)

def ModelData_PMICurve2dOutline_CompareType(theOutline: "ModelData_PMIOutline") -> "bool":
    return _CadExCore.ModelData_PMICurve2dOutline_CompareType(theOutline)

class ModelData_PMICompositeOutline(ModelData_PMIOutline):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def CompareType(theOutline: "ModelData_PMIOutline") -> "bool":
        return _CadExCore.ModelData_PMICompositeOutline_CompareType(theOutline)

    def Append(self, theOutline: "ModelData_PMIOutline") -> "void":
        return _CadExCore.ModelData_PMICompositeOutline_Append(self, theOutline)

    def IsEmpty(self) -> "bool":
        return _CadExCore.ModelData_PMICompositeOutline_IsEmpty(self)

    def NumberOfOutlines(self) -> "size_t":
        return _CadExCore.ModelData_PMICompositeOutline_NumberOfOutlines(self)

    def Outline(self, theIndex: "size_t") -> "cadex::ModelData_PMIOutline const &":
        return _CadExCore.ModelData_PMICompositeOutline_Outline(self, theIndex)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMICompositeOutline

# Register ModelData_PMICompositeOutline in _CadExCore:
_CadExCore.ModelData_PMICompositeOutline_swigregister(ModelData_PMICompositeOutline)

def ModelData_PMICompositeOutline_CompareType(theOutline: "ModelData_PMIOutline") -> "bool":
    return _CadExCore.ModelData_PMICompositeOutline_CompareType(theOutline)

class ModelData_PMIOutlineVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIOutlineVisitor

    @abstractmethod
    def VisitPolyOutline(self, theOutline: "ModelData_PMIPolyOutline") -> "void":
        return _CadExCore.ModelData_PMIOutlineVisitor_VisitPolyOutline(self, theOutline)

    @abstractmethod
    def VisitPoly2dOutline(self, theOutline: "ModelData_PMIPoly2dOutline") -> "void":
        return _CadExCore.ModelData_PMIOutlineVisitor_VisitPoly2dOutline(self, theOutline)

    @abstractmethod
    def VisitCurveOutline(self, theOutline: "ModelData_PMICurveOutline") -> "void":
        return _CadExCore.ModelData_PMIOutlineVisitor_VisitCurveOutline(self, theOutline)

    @abstractmethod
    def VisitCurve2dOutline(self, theOutline: "ModelData_PMICurve2dOutline") -> "void":
        return _CadExCore.ModelData_PMIOutlineVisitor_VisitCurve2dOutline(self, theOutline)

    @abstractmethod
    def VisitEnterCompositeOutline(self, theOutline: "ModelData_PMICompositeOutline") -> "bool":
        return _CadExCore.ModelData_PMIOutlineVisitor_VisitEnterCompositeOutline(self, theOutline)

    @abstractmethod
    def VisitLeaveCompositeOutline(self, theOutline: "ModelData_PMICompositeOutline") -> "void":
        return _CadExCore.ModelData_PMIOutlineVisitor_VisitLeaveCompositeOutline(self, theOutline)

    def __init__(self):
        if self.__class__ == ModelData_PMIOutlineVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_PMIOutlineVisitor_swiginit(self, _CadExCore.new_ModelData_PMIOutlineVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_PMIOutlineVisitor(self)
        return weakref.proxy(self)

# Register ModelData_PMIOutlineVisitor in _CadExCore:
_CadExCore.ModelData_PMIOutlineVisitor_swigregister(ModelData_PMIOutlineVisitor)

class ModelData_PMIOutlineVoidVisitor(ModelData_PMIOutlineVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def VisitPolyOutline(self, theOutline: "ModelData_PMIPolyOutline") -> "void":
        return _CadExCore.ModelData_PMIOutlineVoidVisitor_VisitPolyOutline(self, theOutline)

    def VisitPoly2dOutline(self, theOutline: "ModelData_PMIPoly2dOutline") -> "void":
        return _CadExCore.ModelData_PMIOutlineVoidVisitor_VisitPoly2dOutline(self, theOutline)

    def VisitCurveOutline(self, theOutline: "ModelData_PMICurveOutline") -> "void":
        return _CadExCore.ModelData_PMIOutlineVoidVisitor_VisitCurveOutline(self, theOutline)

    def VisitCurve2dOutline(self, theOutline: "ModelData_PMICurve2dOutline") -> "void":
        return _CadExCore.ModelData_PMIOutlineVoidVisitor_VisitCurve2dOutline(self, theOutline)

    def VisitEnterCompositeOutline(self, theOutline: "ModelData_PMICompositeOutline") -> "bool":
        return _CadExCore.ModelData_PMIOutlineVoidVisitor_VisitEnterCompositeOutline(self, theOutline)

    def VisitLeaveCompositeOutline(self, theOutline: "ModelData_PMICompositeOutline") -> "void":
        return _CadExCore.ModelData_PMIOutlineVoidVisitor_VisitLeaveCompositeOutline(self, theOutline)

    def __init__(self):
        if self.__class__ == ModelData_PMIOutlineVoidVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_PMIOutlineVoidVisitor_swiginit(self, _CadExCore.new_ModelData_PMIOutlineVoidVisitor(_self, ))
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIOutlineVoidVisitor
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_PMIOutlineVoidVisitor(self)
        return weakref.proxy(self)

# Register ModelData_PMIOutlineVoidVisitor in _CadExCore:
_CadExCore.ModelData_PMIOutlineVoidVisitor_swigregister(ModelData_PMIOutlineVoidVisitor)

class ModelData_PMIPlane(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_PMIPlane_swiginit(self, _CadExCore.new_ModelData_PMIPlane(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIPlane_GetTypeId()

    def Plane(self) -> "cadex::ModelData_Plane":
        return _CadExCore.ModelData_PMIPlane_Plane(self)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PMIPlane_swiginit(self, _CadExCore.new_ModelData_PMIPlane(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())

    __swig_destroy__ = _CadExCore.delete_ModelData_PMIPlane

# Register ModelData_PMIPlane in _CadExCore:
_CadExCore.ModelData_PMIPlane_swigregister(ModelData_PMIPlane)

def ModelData_PMIPlane_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIPlane_GetTypeId()

class ModelData_PMISavedView(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_PMISavedView_swiginit(self, _CadExCore.new_ModelData_PMISavedView(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMISavedView_GetTypeId()

    def SetCamera(self, theCamera: "ModelData_PMICamera") -> "void":
        return _CadExCore.ModelData_PMISavedView_SetCamera(self, theCamera)

    def Camera(self) -> "cadex::ModelData_PMICamera":
        return _CadExCore.ModelData_PMISavedView_Camera(self)

    def AddGraphicalElement(self, theElement: "ModelData_PMIGraphicalElement") -> "void":
        return _CadExCore.ModelData_PMISavedView_AddGraphicalElement(self, theElement)

    def NumberOfGraphicalElements(self) -> "size_t":
        return _CadExCore.ModelData_PMISavedView_NumberOfGraphicalElements(self)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PMISavedView_swiginit(self, _CadExCore.new_ModelData_PMISavedView(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def GetGraphicalElementIterator(self):
        return ModelData_PMISavedView_GraphicalElementIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_PMISavedView

# Register ModelData_PMISavedView in _CadExCore:
_CadExCore.ModelData_PMISavedView_swigregister(ModelData_PMISavedView)

def ModelData_PMISavedView_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMISavedView_GetTypeId()

class ModelData_PMISavedView_GraphicalElementIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theView: "ModelData_PMISavedView"):
        _CadExCore.ModelData_PMISavedView_GraphicalElementIterator_swiginit(self, _CadExCore.new_ModelData_PMISavedView_GraphicalElementIterator(theView))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_PMISavedView_GraphicalElementIterator_HasNext(self)

    def Next(self, *args) -> "cadex::ModelData_PMIGraphicalElement &":
        return _CadExCore.ModelData_PMISavedView_GraphicalElementIterator_Next(self, *args)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_PMISavedView_GraphicalElementIterator

# Register ModelData_PMISavedView_GraphicalElementIterator in _CadExCore:
_CadExCore.ModelData_PMISavedView_GraphicalElementIterator_swigregister(ModelData_PMISavedView_GraphicalElementIterator)

class ModelData_PMISemanticAttribute(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Accept(self, theVisitor: "ModelData_PMISemanticAttributeVisitor") -> "void":
        return _CadExCore.ModelData_PMISemanticAttribute_Accept(self, theVisitor)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMISemanticAttribute

# Register ModelData_PMISemanticAttribute in _CadExCore:
_CadExCore.ModelData_PMISemanticAttribute_swigregister(ModelData_PMISemanticAttribute)

class ModelData_PMIModifierAttribute(ModelData_PMISemanticAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theModifier: "Base_UTF16String"):
        _CadExCore.ModelData_PMIModifierAttribute_swiginit(self, _CadExCore.new_ModelData_PMIModifierAttribute(theModifier))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIModifierAttribute_GetTypeId()

    def SetModifier(self, theModifier: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_PMIModifierAttribute_SetModifier(self, theModifier)

    def Modifier(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PMIModifierAttribute_Modifier(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIModifierAttribute

# Register ModelData_PMIModifierAttribute in _CadExCore:
_CadExCore.ModelData_PMIModifierAttribute_swigregister(ModelData_PMIModifierAttribute)

def ModelData_PMIModifierAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIModifierAttribute_GetTypeId()

class ModelData_PMIModifierWithValueAttribute(ModelData_PMIModifierAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theModifier: "Base_UTF16String", theValue: "double"):
        _CadExCore.ModelData_PMIModifierWithValueAttribute_swiginit(self, _CadExCore.new_ModelData_PMIModifierWithValueAttribute(theModifier, theValue))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIModifierWithValueAttribute_GetTypeId()

    def SetValue(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_PMIModifierWithValueAttribute_SetValue(self, theValue)

    def Value(self) -> "double":
        return _CadExCore.ModelData_PMIModifierWithValueAttribute_Value(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIModifierWithValueAttribute

# Register ModelData_PMIModifierWithValueAttribute in _CadExCore:
_CadExCore.ModelData_PMIModifierWithValueAttribute_swigregister(ModelData_PMIModifierWithValueAttribute)

def ModelData_PMIModifierWithValueAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIModifierWithValueAttribute_GetTypeId()

class ModelData_PMIQualifierAttribute(ModelData_PMISemanticAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theQualifier: "Base_UTF16String"):
        _CadExCore.ModelData_PMIQualifierAttribute_swiginit(self, _CadExCore.new_ModelData_PMIQualifierAttribute(theQualifier))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIQualifierAttribute_GetTypeId()

    def SetQualifier(self, theQualifier: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_PMIQualifierAttribute_SetQualifier(self, theQualifier)

    def Qualifier(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PMIQualifierAttribute_Qualifier(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIQualifierAttribute

# Register ModelData_PMIQualifierAttribute in _CadExCore:
_CadExCore.ModelData_PMIQualifierAttribute_swigregister(ModelData_PMIQualifierAttribute)

def ModelData_PMIQualifierAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIQualifierAttribute_GetTypeId()

class ModelData_PMIPlusMinusBoundsAttribute(ModelData_PMISemanticAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theLowerBound: "double", theUpperBound: "double"):
        _CadExCore.ModelData_PMIPlusMinusBoundsAttribute_swiginit(self, _CadExCore.new_ModelData_PMIPlusMinusBoundsAttribute(theLowerBound, theUpperBound))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIPlusMinusBoundsAttribute_GetTypeId()

    def SetUpperBound(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_PMIPlusMinusBoundsAttribute_SetUpperBound(self, theValue)

    def UpperBound(self) -> "double":
        return _CadExCore.ModelData_PMIPlusMinusBoundsAttribute_UpperBound(self)

    def SetLowerBound(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_PMIPlusMinusBoundsAttribute_SetLowerBound(self, theValue)

    def LowerBound(self) -> "double":
        return _CadExCore.ModelData_PMIPlusMinusBoundsAttribute_LowerBound(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIPlusMinusBoundsAttribute

# Register ModelData_PMIPlusMinusBoundsAttribute in _CadExCore:
_CadExCore.ModelData_PMIPlusMinusBoundsAttribute_swigregister(ModelData_PMIPlusMinusBoundsAttribute)

def ModelData_PMIPlusMinusBoundsAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIPlusMinusBoundsAttribute_GetTypeId()

class ModelData_PMIRangeAttribute(ModelData_PMISemanticAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theLowerLimit: "double", theUpperLimit: "double"):
        _CadExCore.ModelData_PMIRangeAttribute_swiginit(self, _CadExCore.new_ModelData_PMIRangeAttribute(theLowerLimit, theUpperLimit))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIRangeAttribute_GetTypeId()

    def SetUpperLimit(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_PMIRangeAttribute_SetUpperLimit(self, theValue)

    def UpperLimit(self) -> "double":
        return _CadExCore.ModelData_PMIRangeAttribute_UpperLimit(self)

    def SetLowerLimit(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_PMIRangeAttribute_SetLowerLimit(self, theValue)

    def LowerLimit(self) -> "double":
        return _CadExCore.ModelData_PMIRangeAttribute_LowerLimit(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIRangeAttribute

# Register ModelData_PMIRangeAttribute in _CadExCore:
_CadExCore.ModelData_PMIRangeAttribute_swigregister(ModelData_PMIRangeAttribute)

def ModelData_PMIRangeAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIRangeAttribute_GetTypeId()

class ModelData_PMILimitsAndFitsAttribute(ModelData_PMISemanticAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theType: "Base_UTF16String", theValue: "Base_UTF16String"):
        _CadExCore.ModelData_PMILimitsAndFitsAttribute_swiginit(self, _CadExCore.new_ModelData_PMILimitsAndFitsAttribute(theType, theValue))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMILimitsAndFitsAttribute_GetTypeId()

    def SetType(self, theType: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_PMILimitsAndFitsAttribute_SetType(self, theType)

    def Type(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PMILimitsAndFitsAttribute_Type(self)

    def SetValue(self, theValue: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_PMILimitsAndFitsAttribute_SetValue(self, theValue)

    def Value(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PMILimitsAndFitsAttribute_Value(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMILimitsAndFitsAttribute

# Register ModelData_PMILimitsAndFitsAttribute in _CadExCore:
_CadExCore.ModelData_PMILimitsAndFitsAttribute_swigregister(ModelData_PMILimitsAndFitsAttribute)

def ModelData_PMILimitsAndFitsAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMILimitsAndFitsAttribute_GetTypeId()

class ModelData_PMIDatumTargetAttribute(ModelData_PMISemanticAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theIndex: "size_t", theDescription: "Base_UTF16String"):
        _CadExCore.ModelData_PMIDatumTargetAttribute_swiginit(self, _CadExCore.new_ModelData_PMIDatumTargetAttribute(theIndex, theDescription))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIDatumTargetAttribute_GetTypeId()

    def SetIndex(self, theIndex: "size_t") -> "void":
        return _CadExCore.ModelData_PMIDatumTargetAttribute_SetIndex(self, theIndex)

    def Index(self) -> "size_t":
        return _CadExCore.ModelData_PMIDatumTargetAttribute_Index(self)

    def SetDescription(self, theValue: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_PMIDatumTargetAttribute_SetDescription(self, theValue)

    def Description(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PMIDatumTargetAttribute_Description(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIDatumTargetAttribute

# Register ModelData_PMIDatumTargetAttribute in _CadExCore:
_CadExCore.ModelData_PMIDatumTargetAttribute_swigregister(ModelData_PMIDatumTargetAttribute)

def ModelData_PMIDatumTargetAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIDatumTargetAttribute_GetTypeId()

class ModelData_PMIDatumRefAttribute(ModelData_PMISemanticAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePrecedence: "size_t", theTargetLabel: "Base_UTF16String"):
        _CadExCore.ModelData_PMIDatumRefAttribute_swiginit(self, _CadExCore.new_ModelData_PMIDatumRefAttribute(thePrecedence, theTargetLabel))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIDatumRefAttribute_GetTypeId()

    def SetPrecedence(self, thePrecedence: "size_t") -> "void":
        return _CadExCore.ModelData_PMIDatumRefAttribute_SetPrecedence(self, thePrecedence)

    def Precedence(self) -> "size_t":
        return _CadExCore.ModelData_PMIDatumRefAttribute_Precedence(self)

    def SetTargetLabel(self, theTargetLabel: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_PMIDatumRefAttribute_SetTargetLabel(self, theTargetLabel)

    def TargetLabel(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PMIDatumRefAttribute_TargetLabel(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIDatumRefAttribute

# Register ModelData_PMIDatumRefAttribute in _CadExCore:
_CadExCore.ModelData_PMIDatumRefAttribute_swigregister(ModelData_PMIDatumRefAttribute)

def ModelData_PMIDatumRefAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIDatumRefAttribute_GetTypeId()

class ModelData_PMIDatumRefCompartmentAttribute(ModelData_PMISemanticAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIDatumRefCompartmentAttribute_GetTypeId()

    def AddReference(self, *args) -> "void":
        return _CadExCore.ModelData_PMIDatumRefCompartmentAttribute_AddReference(self, *args)

    def NumberOfReferences(self) -> "size_t":
        return _CadExCore.ModelData_PMIDatumRefCompartmentAttribute_NumberOfReferences(self)

    def Reference(self, theIndex: "size_t") -> "cadex::ModelData_PMISemanticAttribute const &":
        return _CadExCore.ModelData_PMIDatumRefCompartmentAttribute_Reference(self, theIndex)

    def AddModifierAttribute(self, theAttribute: "ModelData_PMIModifierAttribute") -> "void":
        return _CadExCore.ModelData_PMIDatumRefCompartmentAttribute_AddModifierAttribute(self, theAttribute)

    def NumberOfModifierAttributes(self) -> "size_t":
        return _CadExCore.ModelData_PMIDatumRefCompartmentAttribute_NumberOfModifierAttributes(self)

    def ModifierAttribute(self, theIndex: "size_t") -> "cadex::ModelData_PMIModifierAttribute const &":
        return _CadExCore.ModelData_PMIDatumRefCompartmentAttribute_ModifierAttribute(self, theIndex)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIDatumRefCompartmentAttribute

# Register ModelData_PMIDatumRefCompartmentAttribute in _CadExCore:
_CadExCore.ModelData_PMIDatumRefCompartmentAttribute_swigregister(ModelData_PMIDatumRefCompartmentAttribute)

def ModelData_PMIDatumRefCompartmentAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIDatumRefCompartmentAttribute_GetTypeId()

class ModelData_PMIMaximumValueAttribute(ModelData_PMISemanticAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theMaxValue: "double"):
        _CadExCore.ModelData_PMIMaximumValueAttribute_swiginit(self, _CadExCore.new_ModelData_PMIMaximumValueAttribute(theMaxValue))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIMaximumValueAttribute_GetTypeId()

    def SetMaxValue(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_PMIMaximumValueAttribute_SetMaxValue(self, theValue)

    def MaxValue(self) -> "double":
        return _CadExCore.ModelData_PMIMaximumValueAttribute_MaxValue(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIMaximumValueAttribute

# Register ModelData_PMIMaximumValueAttribute in _CadExCore:
_CadExCore.ModelData_PMIMaximumValueAttribute_swigregister(ModelData_PMIMaximumValueAttribute)

def ModelData_PMIMaximumValueAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIMaximumValueAttribute_GetTypeId()

class ModelData_PMIDisplacementAttribute(ModelData_PMISemanticAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theDisplacement: "double"):
        _CadExCore.ModelData_PMIDisplacementAttribute_swiginit(self, _CadExCore.new_ModelData_PMIDisplacementAttribute(theDisplacement))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIDisplacementAttribute_GetTypeId()

    def SetDisplacement(self, theDisplacement: "double") -> "void":
        return _CadExCore.ModelData_PMIDisplacementAttribute_SetDisplacement(self, theDisplacement)

    def Displacement(self) -> "double":
        return _CadExCore.ModelData_PMIDisplacementAttribute_Displacement(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIDisplacementAttribute

# Register ModelData_PMIDisplacementAttribute in _CadExCore:
_CadExCore.ModelData_PMIDisplacementAttribute_swigregister(ModelData_PMIDisplacementAttribute)

def ModelData_PMIDisplacementAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIDisplacementAttribute_GetTypeId()

class ModelData_PMILengthUnitAttribute(ModelData_PMISemanticAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theUnit: "cadex::Base_LengthUnit"):
        _CadExCore.ModelData_PMILengthUnitAttribute_swiginit(self, _CadExCore.new_ModelData_PMILengthUnitAttribute(theUnit))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMILengthUnitAttribute_GetTypeId()

    def SetUnit(self, theUnit: "cadex::Base_LengthUnit") -> "void":
        return _CadExCore.ModelData_PMILengthUnitAttribute_SetUnit(self, theUnit)

    def Unit(self) -> "cadex::Base_LengthUnit":
        return _CadExCore.ModelData_PMILengthUnitAttribute_Unit(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMILengthUnitAttribute

# Register ModelData_PMILengthUnitAttribute in _CadExCore:
_CadExCore.ModelData_PMILengthUnitAttribute_swigregister(ModelData_PMILengthUnitAttribute)

def ModelData_PMILengthUnitAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMILengthUnitAttribute_GetTypeId()

class ModelData_PMIAngleUnitAttribute(ModelData_PMISemanticAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theUnit: "cadex::Base_AngleUnit"):
        _CadExCore.ModelData_PMIAngleUnitAttribute_swiginit(self, _CadExCore.new_ModelData_PMIAngleUnitAttribute(theUnit))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIAngleUnitAttribute_GetTypeId()

    def SetUnit(self, theUnit: "cadex::Base_AngleUnit") -> "void":
        return _CadExCore.ModelData_PMIAngleUnitAttribute_SetUnit(self, theUnit)

    def Unit(self) -> "cadex::Base_AngleUnit":
        return _CadExCore.ModelData_PMIAngleUnitAttribute_Unit(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIAngleUnitAttribute

# Register ModelData_PMIAngleUnitAttribute in _CadExCore:
_CadExCore.ModelData_PMIAngleUnitAttribute_swigregister(ModelData_PMIAngleUnitAttribute)

def ModelData_PMIAngleUnitAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIAngleUnitAttribute_GetTypeId()

class ModelData_PMIMachiningAllowanceAttribute(ModelData_PMISemanticAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_PMIMachiningAllowanceAttribute_swiginit(self, _CadExCore.new_ModelData_PMIMachiningAllowanceAttribute(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIMachiningAllowanceAttribute_GetTypeId()

    def SetValue(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_PMIMachiningAllowanceAttribute_SetValue(self, theValue)

    def Value(self) -> "double":
        return _CadExCore.ModelData_PMIMachiningAllowanceAttribute_Value(self)

    def SetUpperBound(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_PMIMachiningAllowanceAttribute_SetUpperBound(self, theValue)

    def UpperBound(self) -> "double":
        return _CadExCore.ModelData_PMIMachiningAllowanceAttribute_UpperBound(self)

    def SetLowerBound(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_PMIMachiningAllowanceAttribute_SetLowerBound(self, theValue)

    def LowerBound(self) -> "double":
        return _CadExCore.ModelData_PMIMachiningAllowanceAttribute_LowerBound(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIMachiningAllowanceAttribute

# Register ModelData_PMIMachiningAllowanceAttribute in _CadExCore:
_CadExCore.ModelData_PMIMachiningAllowanceAttribute_swigregister(ModelData_PMIMachiningAllowanceAttribute)

def ModelData_PMIMachiningAllowanceAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIMachiningAllowanceAttribute_GetTypeId()

class ModelData_PMISurfaceTextureRequirementAttribute(ModelData_PMISemanticAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UndefinedLimit = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_UndefinedLimit
    Upper = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Upper
    Lower = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Lower
    UndefinedParameter = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_UndefinedParameter
    Rp = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Rp
    Rv = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Rv
    Rz = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Rz
    Rc = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Rc
    Rt = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Rt
    Ra = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Ra
    Rq = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Rq
    Rsk = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Rsk
    Rku = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Rku
    Wp = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Wp
    Wv = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Wv
    Wz = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Wz
    Wc = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Wc
    Wt = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Wt
    Wa = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Wa
    Wq = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Wq
    Wsk = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Wsk
    Wku = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Wku
    Pp = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Pp
    Pv = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Pv
    Pz = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Pz
    Pc = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Pc
    Pt = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Pt
    Pa = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Pa
    Pq = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Pq
    Psk = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Psk
    Pku = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Pku
    N1 = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_N1
    N2 = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_N2
    N3 = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_N3
    N4 = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_N4
    N5 = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_N5
    N6 = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_N6
    N7 = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_N7
    N8 = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_N8
    N9 = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_N9
    N10 = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_N10
    N11 = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_N11
    N12 = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_N12
    SixteenPercent = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_SixteenPercent
    Max = _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Max

    def __init__(self, *args):
        _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_swiginit(self, _CadExCore.new_ModelData_PMISurfaceTextureRequirementAttribute(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_GetTypeId()

    def SetPrecedence(self, thePrecedence: "size_t") -> "void":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_SetPrecedence(self, thePrecedence)

    def Precedence(self) -> "size_t":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_Precedence(self)

    def SetSpecificationLimit(self, theLimit: "cadex::ModelData_PMISurfaceTextureRequirementAttribute::SpecificationLimitType") -> "void":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_SetSpecificationLimit(self, theLimit)

    def SpecificationLimit(self) -> "cadex::ModelData_PMISurfaceTextureRequirementAttribute::SpecificationLimitType":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_SpecificationLimit(self)

    def SetFilterName(self, theFilterName: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_SetFilterName(self, theFilterName)

    def FilterName(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_FilterName(self)

    def SetShortWaveFilter(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_SetShortWaveFilter(self, theValue)

    def ShortWaveFilter(self) -> "double":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_ShortWaveFilter(self)

    def SetLongWaveFilter(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_SetLongWaveFilter(self, theValue)

    def LongWaveFilter(self) -> "double":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_LongWaveFilter(self)

    def SetSurfaceParameter(self, theParameter: "cadex::ModelData_PMISurfaceTextureRequirementAttribute::SurfaceParameterType") -> "void":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_SetSurfaceParameter(self, theParameter)

    def SurfaceParameter(self) -> "cadex::ModelData_PMISurfaceTextureRequirementAttribute::SurfaceParameterType":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_SurfaceParameter(self)

    def SetEvaluationLength(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_SetEvaluationLength(self, theValue)

    def EvaluationLength(self) -> "double":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_EvaluationLength(self)

    def SetComparisonRule(self, theRule: "cadex::ModelData_PMISurfaceTextureRequirementAttribute::ComparisonRuleType") -> "void":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_SetComparisonRule(self, theRule)

    def ComparisonRule(self) -> "cadex::ModelData_PMISurfaceTextureRequirementAttribute::ComparisonRuleType":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_ComparisonRule(self)

    def SetLimitValue(self, theValue: "double") -> "void":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_SetLimitValue(self, theValue)

    def LimitValue(self) -> "double":
        return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_LimitValue(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMISurfaceTextureRequirementAttribute

# Register ModelData_PMISurfaceTextureRequirementAttribute in _CadExCore:
_CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_swigregister(ModelData_PMISurfaceTextureRequirementAttribute)

def ModelData_PMISurfaceTextureRequirementAttribute_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMISurfaceTextureRequirementAttribute_GetTypeId()

class ModelData_PMISemanticAttributeVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_PMISemanticAttributeVisitor

    @abstractmethod
    def VisitModifierAttribute(self, theAttribute: "ModelData_PMIModifierAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitModifierAttribute(self, theAttribute)

    @abstractmethod
    def VisitModifierWithValueAttribute(self, theAttribute: "ModelData_PMIModifierWithValueAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitModifierWithValueAttribute(self, theAttribute)

    @abstractmethod
    def VisitQualifierAttribute(self, theAttribute: "ModelData_PMIQualifierAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitQualifierAttribute(self, theAttribute)

    @abstractmethod
    def VisitPlusMinusBoundsAttribute(self, theAttribute: "ModelData_PMIPlusMinusBoundsAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitPlusMinusBoundsAttribute(self, theAttribute)

    @abstractmethod
    def VisitRangeAttribute(self, theAttribute: "ModelData_PMIRangeAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitRangeAttribute(self, theAttribute)

    @abstractmethod
    def VisitLimitsAndFitsAttribute(self, theAttribute: "ModelData_PMILimitsAndFitsAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitLimitsAndFitsAttribute(self, theAttribute)

    @abstractmethod
    def VisitDatumTargetAttribute(self, theAttribute: "ModelData_PMIDatumTargetAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitDatumTargetAttribute(self, theAttribute)

    @abstractmethod
    def VisitDatumRefAttribute(self, theAttribute: "ModelData_PMIDatumRefAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitDatumRefAttribute(self, theAttribute)

    @abstractmethod
    def VisitDatumRefCompartmentAttribute(self, theAttribute: "ModelData_PMIDatumRefCompartmentAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitDatumRefCompartmentAttribute(self, theAttribute)

    @abstractmethod
    def VisitMaximumValueAttribute(self, theAttribute: "ModelData_PMIMaximumValueAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitMaximumValueAttribute(self, theAttribute)

    @abstractmethod
    def VisitDisplacementAttribute(self, theAttribute: "ModelData_PMIDisplacementAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitDisplacementAttribute(self, theAttribute)

    @abstractmethod
    def VisitLengthUnitAttribute(self, theAttribute: "ModelData_PMILengthUnitAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitLengthUnitAttribute(self, theAttribute)

    @abstractmethod
    def VisitAngleUnitAttribute(self, theAttribute: "ModelData_PMIAngleUnitAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitAngleUnitAttribute(self, theAttribute)

    @abstractmethod
    def VisitMachiningAllowanceAttribute(self, theAttribute: "ModelData_PMIMachiningAllowanceAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitMachiningAllowanceAttribute(self, theAttribute)

    @abstractmethod
    def VisitSurfaceTextureRequirementAttribute(self, theAttribute: "ModelData_PMISurfaceTextureRequirementAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVisitor_VisitSurfaceTextureRequirementAttribute(self, theAttribute)

    def __init__(self):
        if self.__class__ == ModelData_PMISemanticAttributeVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_PMISemanticAttributeVisitor_swiginit(self, _CadExCore.new_ModelData_PMISemanticAttributeVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_PMISemanticAttributeVisitor(self)
        return weakref.proxy(self)

# Register ModelData_PMISemanticAttributeVisitor in _CadExCore:
_CadExCore.ModelData_PMISemanticAttributeVisitor_swigregister(ModelData_PMISemanticAttributeVisitor)

class ModelData_PMISemanticAttributeVoidVisitor(ModelData_PMISemanticAttributeVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def VisitModifierAttribute(self, theAttribute: "ModelData_PMIModifierAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitModifierAttribute(self, theAttribute)

    def VisitModifierWithValueAttribute(self, theAttribute: "ModelData_PMIModifierWithValueAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitModifierWithValueAttribute(self, theAttribute)

    def VisitQualifierAttribute(self, theAttribute: "ModelData_PMIQualifierAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitQualifierAttribute(self, theAttribute)

    def VisitPlusMinusBoundsAttribute(self, theAttribute: "ModelData_PMIPlusMinusBoundsAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitPlusMinusBoundsAttribute(self, theAttribute)

    def VisitRangeAttribute(self, theAttribute: "ModelData_PMIRangeAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitRangeAttribute(self, theAttribute)

    def VisitLimitsAndFitsAttribute(self, theAttribute: "ModelData_PMILimitsAndFitsAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitLimitsAndFitsAttribute(self, theAttribute)

    def VisitDatumTargetAttribute(self, theAttribute: "ModelData_PMIDatumTargetAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitDatumTargetAttribute(self, theAttribute)

    def VisitDatumRefAttribute(self, theAttribute: "ModelData_PMIDatumRefAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitDatumRefAttribute(self, theAttribute)

    def VisitDatumRefCompartmentAttribute(self, theAttribute: "ModelData_PMIDatumRefCompartmentAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitDatumRefCompartmentAttribute(self, theAttribute)

    def VisitMaximumValueAttribute(self, theAttribute: "ModelData_PMIMaximumValueAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitMaximumValueAttribute(self, theAttribute)

    def VisitDisplacementAttribute(self, theAttribute: "ModelData_PMIDisplacementAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitDisplacementAttribute(self, theAttribute)

    def VisitLengthUnitAttribute(self, theAttribute: "ModelData_PMILengthUnitAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitLengthUnitAttribute(self, theAttribute)

    def VisitAngleUnitAttribute(self, theAttribute: "ModelData_PMIAngleUnitAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitAngleUnitAttribute(self, theAttribute)

    def VisitMachiningAllowanceAttribute(self, theAttribute: "ModelData_PMIMachiningAllowanceAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitMachiningAllowanceAttribute(self, theAttribute)

    def VisitSurfaceTextureRequirementAttribute(self, theAttribute: "ModelData_PMISurfaceTextureRequirementAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_VisitSurfaceTextureRequirementAttribute(self, theAttribute)

    def __init__(self):
        if self.__class__ == ModelData_PMISemanticAttributeVoidVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_PMISemanticAttributeVoidVisitor_swiginit(self, _CadExCore.new_ModelData_PMISemanticAttributeVoidVisitor(_self, ))
    __swig_destroy__ = _CadExCore.delete_ModelData_PMISemanticAttributeVoidVisitor
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_PMISemanticAttributeVoidVisitor(self)
        return weakref.proxy(self)

# Register ModelData_PMISemanticAttributeVoidVisitor in _CadExCore:
_CadExCore.ModelData_PMISemanticAttributeVoidVisitor_swigregister(ModelData_PMISemanticAttributeVoidVisitor)

class ModelData_PMISemanticElement(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "_ModelData_BaseObject_initialized"):
        _CadExCore.ModelData_PMISemanticElement_swiginit(self, _CadExCore.new_ModelData_PMISemanticElement(arg2))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMISemanticElement_GetTypeId()

    def AddComponent(self, theComponent: "ModelData_PMISemanticElementComponent") -> "void":
        return _CadExCore.ModelData_PMISemanticElement_AddComponent(self, theComponent)

    def IsEmpty(self) -> "bool":
        return _CadExCore.ModelData_PMISemanticElement_IsEmpty(self)

    def NumberOfComponents(self) -> "size_t":
        return _CadExCore.ModelData_PMISemanticElement_NumberOfComponents(self)

    def Accept(self, theVisitor: "ModelData_PMISemanticElementComponentVisitor") -> "void":
        return _CadExCore.ModelData_PMISemanticElement_Accept(self, theVisitor)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PMISemanticElement_swiginit(self, _CadExCore.new_ModelData_PMISemanticElement(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def GetComponentIterator(self):
        return ModelData_PMISemanticElement_ComponentIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_PMISemanticElement

# Register ModelData_PMISemanticElement in _CadExCore:
_CadExCore.ModelData_PMISemanticElement_swigregister(ModelData_PMISemanticElement)

def ModelData_PMISemanticElement_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMISemanticElement_GetTypeId()

class ModelData_PMISemanticElement_ComponentIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theElement: "ModelData_PMISemanticElement"):
        _CadExCore.ModelData_PMISemanticElement_ComponentIterator_swiginit(self, _CadExCore.new_ModelData_PMISemanticElement_ComponentIterator(theElement))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_PMISemanticElement_ComponentIterator_HasNext(self)

    def Next(self, *args) -> "cadex::ModelData_PMISemanticElementComponent &":
        return _CadExCore.ModelData_PMISemanticElement_ComponentIterator_Next(self, *args)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_PMISemanticElement_ComponentIterator

# Register ModelData_PMISemanticElement_ComponentIterator in _CadExCore:
_CadExCore.ModelData_PMISemanticElement_ComponentIterator_swigregister(ModelData_PMISemanticElement_ComponentIterator)

class ModelData_PMISemanticElementComponent(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddAttribute(self, theAttribute: "ModelData_PMISemanticAttribute") -> "void":
        return _CadExCore.ModelData_PMISemanticElementComponent_AddAttribute(self, theAttribute)

    def HasAttributes(self) -> "bool":
        return _CadExCore.ModelData_PMISemanticElementComponent_HasAttributes(self)

    def NumberOfAttributes(self) -> "size_t":
        return _CadExCore.ModelData_PMISemanticElementComponent_NumberOfAttributes(self)

    def Accept(self, *args) -> "void":
        return _CadExCore.ModelData_PMISemanticElementComponent_Accept(self, *args)

    def GetAttributeIterator(self):
        return ModelData_PMISemanticElementComponent_AttributeIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_PMISemanticElementComponent

# Register ModelData_PMISemanticElementComponent in _CadExCore:
_CadExCore.ModelData_PMISemanticElementComponent_swigregister(ModelData_PMISemanticElementComponent)

class ModelData_PMISemanticElementComponent_AttributeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theElement: "ModelData_PMISemanticElementComponent"):
        _CadExCore.ModelData_PMISemanticElementComponent_AttributeIterator_swiginit(self, _CadExCore.new_ModelData_PMISemanticElementComponent_AttributeIterator(theElement))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_PMISemanticElementComponent_AttributeIterator_HasNext(self)

    def Next(self, *args) -> "cadex::ModelData_PMISemanticAttribute &":
        return _CadExCore.ModelData_PMISemanticElementComponent_AttributeIterator_Next(self, *args)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_PMISemanticElementComponent_AttributeIterator

# Register ModelData_PMISemanticElementComponent_AttributeIterator in _CadExCore:
_CadExCore.ModelData_PMISemanticElementComponent_AttributeIterator_swigregister(ModelData_PMISemanticElementComponent_AttributeIterator)

class ModelData_PMIDimensionComponent(ModelData_PMISemanticElementComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Undefined = _CadExCore.ModelData_PMIDimensionComponent_Undefined
    CurveLength = _CadExCore.ModelData_PMIDimensionComponent_CurveLength
    Diameter = _CadExCore.ModelData_PMIDimensionComponent_Diameter
    SphericalDiameter = _CadExCore.ModelData_PMIDimensionComponent_SphericalDiameter
    Radius = _CadExCore.ModelData_PMIDimensionComponent_Radius
    SphericalRadius = _CadExCore.ModelData_PMIDimensionComponent_SphericalRadius
    ToroidalMinorDiameter = _CadExCore.ModelData_PMIDimensionComponent_ToroidalMinorDiameter
    ToroidalMajorDiameter = _CadExCore.ModelData_PMIDimensionComponent_ToroidalMajorDiameter
    ToroidalMinorRadius = _CadExCore.ModelData_PMIDimensionComponent_ToroidalMinorRadius
    ToroidalMajorRadius = _CadExCore.ModelData_PMIDimensionComponent_ToroidalMajorRadius
    ToroidalHighMajorDiameter = _CadExCore.ModelData_PMIDimensionComponent_ToroidalHighMajorDiameter
    ToroidalLowMajorDiameter = _CadExCore.ModelData_PMIDimensionComponent_ToroidalLowMajorDiameter
    ToroidalHighMajorRadius = _CadExCore.ModelData_PMIDimensionComponent_ToroidalHighMajorRadius
    ToroidalLowMajorRadius = _CadExCore.ModelData_PMIDimensionComponent_ToroidalLowMajorRadius
    Thickness = _CadExCore.ModelData_PMIDimensionComponent_Thickness
    Angular = _CadExCore.ModelData_PMIDimensionComponent_Angular
    LinearDistance = _CadExCore.ModelData_PMIDimensionComponent_LinearDistance
    CurvedDistance = _CadExCore.ModelData_PMIDimensionComponent_CurvedDistance

    def __init__(self, theNominalValue: "double"):
        _CadExCore.ModelData_PMIDimensionComponent_swiginit(self, _CadExCore.new_ModelData_PMIDimensionComponent(theNominalValue))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIDimensionComponent_GetTypeId()

    def SetNominalValue(self, theNominalValue: "double") -> "void":
        return _CadExCore.ModelData_PMIDimensionComponent_SetNominalValue(self, theNominalValue)

    def NominalValue(self) -> "double":
        return _CadExCore.ModelData_PMIDimensionComponent_NominalValue(self)

    def SetTypeOfDimension(self, theType: "cadex::ModelData_PMIDimensionComponent::DimensionType") -> "void":
        return _CadExCore.ModelData_PMIDimensionComponent_SetTypeOfDimension(self, theType)

    def TypeOfDimension(self) -> "cadex::ModelData_PMIDimensionComponent::DimensionType":
        return _CadExCore.ModelData_PMIDimensionComponent_TypeOfDimension(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIDimensionComponent

# Register ModelData_PMIDimensionComponent in _CadExCore:
_CadExCore.ModelData_PMIDimensionComponent_swigregister(ModelData_PMIDimensionComponent)

def ModelData_PMIDimensionComponent_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIDimensionComponent_GetTypeId()

class ModelData_PMIGeometricToleranceComponent(ModelData_PMISemanticElementComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UndefinedTolerance = _CadExCore.ModelData_PMIGeometricToleranceComponent_UndefinedTolerance
    Angularity = _CadExCore.ModelData_PMIGeometricToleranceComponent_Angularity
    CircularRunout = _CadExCore.ModelData_PMIGeometricToleranceComponent_CircularRunout
    Coaxiality = _CadExCore.ModelData_PMIGeometricToleranceComponent_Coaxiality
    Concentricity = _CadExCore.ModelData_PMIGeometricToleranceComponent_Concentricity
    Cylindricity = _CadExCore.ModelData_PMIGeometricToleranceComponent_Cylindricity
    Flatness = _CadExCore.ModelData_PMIGeometricToleranceComponent_Flatness
    LineProfile = _CadExCore.ModelData_PMIGeometricToleranceComponent_LineProfile
    Parallelism = _CadExCore.ModelData_PMIGeometricToleranceComponent_Parallelism
    Perpendicularity = _CadExCore.ModelData_PMIGeometricToleranceComponent_Perpendicularity
    Position = _CadExCore.ModelData_PMIGeometricToleranceComponent_Position
    Roundness = _CadExCore.ModelData_PMIGeometricToleranceComponent_Roundness
    Straightness = _CadExCore.ModelData_PMIGeometricToleranceComponent_Straightness
    SurfaceProfile = _CadExCore.ModelData_PMIGeometricToleranceComponent_SurfaceProfile
    Symmetry = _CadExCore.ModelData_PMIGeometricToleranceComponent_Symmetry
    TotalRunout = _CadExCore.ModelData_PMIGeometricToleranceComponent_TotalRunout
    Undefined = _CadExCore.ModelData_PMIGeometricToleranceComponent_Undefined
    CylindricalOrCircular = _CadExCore.ModelData_PMIGeometricToleranceComponent_CylindricalOrCircular
    Spherical = _CadExCore.ModelData_PMIGeometricToleranceComponent_Spherical
    WithinACircle = _CadExCore.ModelData_PMIGeometricToleranceComponent_WithinACircle
    BetweenTwoConcentricCircles = _CadExCore.ModelData_PMIGeometricToleranceComponent_BetweenTwoConcentricCircles
    BetweenTwoEquidistantCurves = _CadExCore.ModelData_PMIGeometricToleranceComponent_BetweenTwoEquidistantCurves
    WithinACylinder = _CadExCore.ModelData_PMIGeometricToleranceComponent_WithinACylinder
    BetweenTwoCoaxialCylinders = _CadExCore.ModelData_PMIGeometricToleranceComponent_BetweenTwoCoaxialCylinders
    BetweenTwoEquidistantSurfaces = _CadExCore.ModelData_PMIGeometricToleranceComponent_BetweenTwoEquidistantSurfaces
    NonUniform = _CadExCore.ModelData_PMIGeometricToleranceComponent_NonUniform

    def __init__(self, theMagnitude: "double", theType: "cadex::ModelData_PMIGeometricToleranceComponent::ToleranceType"):
        _CadExCore.ModelData_PMIGeometricToleranceComponent_swiginit(self, _CadExCore.new_ModelData_PMIGeometricToleranceComponent(theMagnitude, theType))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIGeometricToleranceComponent_GetTypeId()

    def SetMagnitude(self, theMagnitude: "double") -> "void":
        return _CadExCore.ModelData_PMIGeometricToleranceComponent_SetMagnitude(self, theMagnitude)

    def Magnitude(self) -> "double":
        return _CadExCore.ModelData_PMIGeometricToleranceComponent_Magnitude(self)

    def SetToleranceZoneForm(self, theType: "cadex::ModelData_PMIGeometricToleranceComponent::ToleranceZoneFormType") -> "void":
        return _CadExCore.ModelData_PMIGeometricToleranceComponent_SetToleranceZoneForm(self, theType)

    def ToleranceZoneForm(self) -> "cadex::ModelData_PMIGeometricToleranceComponent::ToleranceZoneFormType":
        return _CadExCore.ModelData_PMIGeometricToleranceComponent_ToleranceZoneForm(self)

    def SetTypeOfTolerance(self, theType: "cadex::ModelData_PMIGeometricToleranceComponent::ToleranceType") -> "void":
        return _CadExCore.ModelData_PMIGeometricToleranceComponent_SetTypeOfTolerance(self, theType)

    def TypeOfTolerance(self) -> "cadex::ModelData_PMIGeometricToleranceComponent::ToleranceType":
        return _CadExCore.ModelData_PMIGeometricToleranceComponent_TypeOfTolerance(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIGeometricToleranceComponent

# Register ModelData_PMIGeometricToleranceComponent in _CadExCore:
_CadExCore.ModelData_PMIGeometricToleranceComponent_swigregister(ModelData_PMIGeometricToleranceComponent)

def ModelData_PMIGeometricToleranceComponent_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIGeometricToleranceComponent_GetTypeId()

class ModelData_PMIDatumComponent(ModelData_PMISemanticElementComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theLabel: "Base_UTF16String"):
        _CadExCore.ModelData_PMIDatumComponent_swiginit(self, _CadExCore.new_ModelData_PMIDatumComponent(theLabel))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMIDatumComponent_GetTypeId()

    def SetLabel(self, theLabel: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_PMIDatumComponent_SetLabel(self, theLabel)

    def Label(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PMIDatumComponent_Label(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMIDatumComponent

# Register ModelData_PMIDatumComponent in _CadExCore:
_CadExCore.ModelData_PMIDatumComponent_swigregister(ModelData_PMIDatumComponent)

def ModelData_PMIDatumComponent_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMIDatumComponent_GetTypeId()

class ModelData_PMISurfaceFinishComponent(ModelData_PMISemanticElementComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Any = _CadExCore.ModelData_PMISurfaceFinishComponent_Any
    Required = _CadExCore.ModelData_PMISurfaceFinishComponent_Required
    Prohibited = _CadExCore.ModelData_PMISurfaceFinishComponent_Prohibited
    Undefined = _CadExCore.ModelData_PMISurfaceFinishComponent_Undefined
    Parallel = _CadExCore.ModelData_PMISurfaceFinishComponent_Parallel
    Multidirectional = _CadExCore.ModelData_PMISurfaceFinishComponent_Multidirectional
    Perpendicular = _CadExCore.ModelData_PMISurfaceFinishComponent_Perpendicular
    Circular = _CadExCore.ModelData_PMISurfaceFinishComponent_Circular
    Particulate = _CadExCore.ModelData_PMISurfaceFinishComponent_Particulate
    Crossed = _CadExCore.ModelData_PMISurfaceFinishComponent_Crossed
    Radial = _CadExCore.ModelData_PMISurfaceFinishComponent_Radial

    def __init__(self, *args):
        _CadExCore.ModelData_PMISurfaceFinishComponent_swiginit(self, _CadExCore.new_ModelData_PMISurfaceFinishComponent(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMISurfaceFinishComponent_GetTypeId()

    def SetMaterialRemoval(self, theValue: "cadex::ModelData_PMISurfaceFinishComponent::MaterialRemovalType") -> "void":
        return _CadExCore.ModelData_PMISurfaceFinishComponent_SetMaterialRemoval(self, theValue)

    def MaterialRemoval(self) -> "cadex::ModelData_PMISurfaceFinishComponent::MaterialRemovalType":
        return _CadExCore.ModelData_PMISurfaceFinishComponent_MaterialRemoval(self)

    def SetLayDirection(self, theDirection: "cadex::ModelData_PMISurfaceFinishComponent::LayDirectionType") -> "void":
        return _CadExCore.ModelData_PMISurfaceFinishComponent_SetLayDirection(self, theDirection)

    def LayDirection(self) -> "cadex::ModelData_PMISurfaceFinishComponent::LayDirectionType":
        return _CadExCore.ModelData_PMISurfaceFinishComponent_LayDirection(self)

    def SetIsAllAround(self, theAllAroundFlag: "bool") -> "void":
        return _CadExCore.ModelData_PMISurfaceFinishComponent_SetIsAllAround(self, theAllAroundFlag)

    def IsAllAround(self) -> "bool":
        return _CadExCore.ModelData_PMISurfaceFinishComponent_IsAllAround(self)

    def SetManufacturingMethod(self, theMethod: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_PMISurfaceFinishComponent_SetManufacturingMethod(self, theMethod)

    def ManufacturingMethod(self) -> "cadex::Base_UTF16String const &":
        return _CadExCore.ModelData_PMISurfaceFinishComponent_ManufacturingMethod(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PMISurfaceFinishComponent

# Register ModelData_PMISurfaceFinishComponent in _CadExCore:
_CadExCore.ModelData_PMISurfaceFinishComponent_swigregister(ModelData_PMISurfaceFinishComponent)

def ModelData_PMISurfaceFinishComponent_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMISurfaceFinishComponent_GetTypeId()

class ModelData_PMISemanticElementComponentVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_PMISemanticElementComponentVisitor

    @abstractmethod
    def VisitDimensionComponent(self, theComponent: "ModelData_PMIDimensionComponent") -> "void":
        return _CadExCore.ModelData_PMISemanticElementComponentVisitor_VisitDimensionComponent(self, theComponent)

    @abstractmethod
    def VisitGeometricToleranceComponent(self, theComponent: "ModelData_PMIGeometricToleranceComponent") -> "void":
        return _CadExCore.ModelData_PMISemanticElementComponentVisitor_VisitGeometricToleranceComponent(self, theComponent)

    @abstractmethod
    def VisitDatumComponent(self, theComponent: "ModelData_PMIDatumComponent") -> "void":
        return _CadExCore.ModelData_PMISemanticElementComponentVisitor_VisitDatumComponent(self, theComponent)

    @abstractmethod
    def VisitSurfaceFinishComponent(self, theComponent: "ModelData_PMISurfaceFinishComponent") -> "void":
        return _CadExCore.ModelData_PMISemanticElementComponentVisitor_VisitSurfaceFinishComponent(self, theComponent)

    def __init__(self):
        if self.__class__ == ModelData_PMISemanticElementComponentVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_PMISemanticElementComponentVisitor_swiginit(self, _CadExCore.new_ModelData_PMISemanticElementComponentVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_PMISemanticElementComponentVisitor(self)
        return weakref.proxy(self)

# Register ModelData_PMISemanticElementComponentVisitor in _CadExCore:
_CadExCore.ModelData_PMISemanticElementComponentVisitor_swigregister(ModelData_PMISemanticElementComponentVisitor)

class ModelData_PMISemanticElementComponentVoidVisitor(ModelData_PMISemanticElementComponentVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def VisitDimensionComponent(self, theComponent: "ModelData_PMIDimensionComponent") -> "void":
        return _CadExCore.ModelData_PMISemanticElementComponentVoidVisitor_VisitDimensionComponent(self, theComponent)

    def VisitGeometricToleranceComponent(self, theComponent: "ModelData_PMIGeometricToleranceComponent") -> "void":
        return _CadExCore.ModelData_PMISemanticElementComponentVoidVisitor_VisitGeometricToleranceComponent(self, theComponent)

    def VisitDatumComponent(self, theComponent: "ModelData_PMIDatumComponent") -> "void":
        return _CadExCore.ModelData_PMISemanticElementComponentVoidVisitor_VisitDatumComponent(self, theComponent)

    def VisitSurfaceFinishComponent(self, theComponent: "ModelData_PMISurfaceFinishComponent") -> "void":
        return _CadExCore.ModelData_PMISemanticElementComponentVoidVisitor_VisitSurfaceFinishComponent(self, theComponent)

    def __init__(self):
        if self.__class__ == ModelData_PMISemanticElementComponentVoidVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_PMISemanticElementComponentVoidVisitor_swiginit(self, _CadExCore.new_ModelData_PMISemanticElementComponentVoidVisitor(_self, ))
    __swig_destroy__ = _CadExCore.delete_ModelData_PMISemanticElementComponentVoidVisitor
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_PMISemanticElementComponentVoidVisitor(self)
        return weakref.proxy(self)

# Register ModelData_PMISemanticElementComponentVoidVisitor in _CadExCore:
_CadExCore.ModelData_PMISemanticElementComponentVoidVisitor_swigregister(ModelData_PMISemanticElementComponentVoidVisitor)

class ModelData_PMITable(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_PMITable_swiginit(self, _CadExCore.new_ModelData_PMITable(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PMITable_GetTypeId()

    def Add(self, *args) -> "void":
        return _CadExCore.ModelData_PMITable_Add(self, *args)

    def AddView(self, theView: "ModelData_PMISavedView") -> "void":
        return _CadExCore.ModelData_PMITable_AddView(self, theView)

    def AddPlane(self, thePlane: "ModelData_PMIPlane") -> "void":
        return _CadExCore.ModelData_PMITable_AddPlane(self, thePlane)

    def IsEmpty(self) -> "bool":
        return _CadExCore.ModelData_PMITable_IsEmpty(self)

    def NumberOfPMIData(self) -> "size_t":
        return _CadExCore.ModelData_PMITable_NumberOfPMIData(self)

    def NumberOfSavedViews(self) -> "size_t":
        return _CadExCore.ModelData_PMITable_NumberOfSavedViews(self)

    def NumberOfPlanes(self) -> "size_t":
        return _CadExCore.ModelData_PMITable_NumberOfPlanes(self)

    def Clear(self) -> "void":
        return _CadExCore.ModelData_PMITable_Clear(self)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PMITable_swiginit(self, _CadExCore.new_ModelData_PMITable(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def GetPlaneIterator(self):
        return ModelData_PMITable_PlaneIterator(self)


    def GetPMIDataIterator(self):
        return ModelData_PMITable_PMIDataIterator(self)


    def GetSavedViewIterator(self):
        return ModelData_PMITable_SavedViewIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_PMITable

# Register ModelData_PMITable in _CadExCore:
_CadExCore.ModelData_PMITable_swigregister(ModelData_PMITable)

def ModelData_PMITable_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PMITable_GetTypeId()

class ModelData_PMITable_PMIDataIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theTable: "ModelData_PMITable"):
        _CadExCore.ModelData_PMITable_PMIDataIterator_swiginit(self, _CadExCore.new_ModelData_PMITable_PMIDataIterator(theTable))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_PMITable_PMIDataIterator_HasNext(self)

    def Next(self, *args) -> "cadex::ModelData_PMIData &":
        return _CadExCore.ModelData_PMITable_PMIDataIterator_Next(self, *args)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_PMITable_PMIDataIterator

# Register ModelData_PMITable_PMIDataIterator in _CadExCore:
_CadExCore.ModelData_PMITable_PMIDataIterator_swigregister(ModelData_PMITable_PMIDataIterator)

class ModelData_PMITable_SavedViewIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theTable: "ModelData_PMITable"):
        _CadExCore.ModelData_PMITable_SavedViewIterator_swiginit(self, _CadExCore.new_ModelData_PMITable_SavedViewIterator(theTable))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_PMITable_SavedViewIterator_HasNext(self)

    def Next(self, *args) -> "cadex::ModelData_PMISavedView &":
        return _CadExCore.ModelData_PMITable_SavedViewIterator_Next(self, *args)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_PMITable_SavedViewIterator

# Register ModelData_PMITable_SavedViewIterator in _CadExCore:
_CadExCore.ModelData_PMITable_SavedViewIterator_swigregister(ModelData_PMITable_SavedViewIterator)

class ModelData_PMITable_PlaneIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theTable: "ModelData_PMITable"):
        _CadExCore.ModelData_PMITable_PlaneIterator_swiginit(self, _CadExCore.new_ModelData_PMITable_PlaneIterator(theTable))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_PMITable_PlaneIterator_HasNext(self)

    def Next(self, *args) -> "cadex::ModelData_PMIPlane &":
        return _CadExCore.ModelData_PMITable_PlaneIterator_Next(self, *args)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_PMITable_PlaneIterator

# Register ModelData_PMITable_PlaneIterator in _CadExCore:
_CadExCore.ModelData_PMITable_PlaneIterator_swigregister(ModelData_PMITable_PlaneIterator)

class ModelData_PolyShape2d(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_PolyShape2d

# Register ModelData_PolyShape2d in _CadExCore:
_CadExCore.ModelData_PolyShape2d_swigregister(ModelData_PolyShape2d)

class ModelData_PolyVertex2dSet(ModelData_PolyShape2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Coordinate(self, theVertexIndex: "cadex::ModelData_PolyVertex2dSet::IndexType") -> "cadex::ModelData_PolyVertex2dSet::CoordType const &":
        return _CadExCore.ModelData_PolyVertex2dSet_Coordinate(self, theVertexIndex)

    def NumberOfVertices(self) -> "cadex::ModelData_PolyVertex2dSet::IndexType":
        return _CadExCore.ModelData_PolyVertex2dSet_NumberOfVertices(self)

    def IsEmpty(self) -> "bool":
        return _CadExCore.ModelData_PolyVertex2dSet_IsEmpty(self)
    __swig_destroy__ = _CadExCore.delete_ModelData_PolyVertex2dSet

# Register ModelData_PolyVertex2dSet in _CadExCore:
_CadExCore.ModelData_PolyVertex2dSet_swigregister(ModelData_PolyVertex2dSet)

class ModelData_PolyLine2dSet(ModelData_PolyVertex2dSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "_ModelData_BaseObject_initialized"):
        _CadExCore.ModelData_PolyLine2dSet_swiginit(self, _CadExCore.new_ModelData_PolyLine2dSet(arg2))

    def NumberOfVertices(self, *args) -> "cadex::ModelData_PolyVertex2dSet::IndexType":
        return _CadExCore.ModelData_PolyLine2dSet_NumberOfVertices(self, *args)

    def NumberOfPolyLines(self) -> "cadex::ModelData_PolyVertex2dSet::IndexType":
        return _CadExCore.ModelData_PolyLine2dSet_NumberOfPolyLines(self)

    def Coordinate(self, *args) -> "cadex::ModelData_PolyVertex2dSet::CoordType const &":
        return _CadExCore.ModelData_PolyLine2dSet_Coordinate(self, *args)

    def AddPolyLine(self, theVertices: "ModelData_Point2d", theSize: "size_t") -> "void":
        return _CadExCore.ModelData_PolyLine2dSet_AddPolyLine(self, theVertices, theSize)

    def AddPolyLines(self, theSet: "ModelData_PolyLine2dSet") -> "void":
        return _CadExCore.ModelData_PolyLine2dSet_AddPolyLines(self, theSet)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PolyLine2dSet_GetTypeId()

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PolyLine2dSet_swiginit(self, _CadExCore.new_ModelData_PolyLine2dSet(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())

    __swig_destroy__ = _CadExCore.delete_ModelData_PolyLine2dSet

# Register ModelData_PolyLine2dSet in _CadExCore:
_CadExCore.ModelData_PolyLine2dSet_swigregister(ModelData_PolyLine2dSet)

def ModelData_PolyLine2dSet_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PolyLine2dSet_GetTypeId()

ModelData_PF_None = _CadExCore.ModelData_PF_None
ModelData_PF_RGB = _CadExCore.ModelData_PF_RGB
ModelData_PF_RGBA = _CadExCore.ModelData_PF_RGBA
ModelData_PF_Alpha = _CadExCore.ModelData_PF_Alpha
ModelData_PF_Luminance = _CadExCore.ModelData_PF_Luminance
ModelData_PF_LuminanceAlpha = _CadExCore.ModelData_PF_LuminanceAlpha
ModelData_TBM_Decal = _CadExCore.ModelData_TBM_Decal
ModelData_TBM_Modulate = _CadExCore.ModelData_TBM_Modulate
ModelData_TBM_Replace = _CadExCore.ModelData_TBM_Replace
ModelData_TMagF_Nearest = _CadExCore.ModelData_TMagF_Nearest
ModelData_TMagF_Linear = _CadExCore.ModelData_TMagF_Linear
ModelData_TMM_UVMapping = _CadExCore.ModelData_TMM_UVMapping
ModelData_TMM_SphereMapping = _CadExCore.ModelData_TMM_SphereMapping
ModelData_TMinF_Nearest = _CadExCore.ModelData_TMinF_Nearest
ModelData_TMinF_NearestMipMapNearest = _CadExCore.ModelData_TMinF_NearestMipMapNearest
ModelData_TMinF_NearestMipMapLinear = _CadExCore.ModelData_TMinF_NearestMipMapLinear
ModelData_TMinF_Linear = _CadExCore.ModelData_TMinF_Linear
ModelData_TMinF_LinearMipMapNearest = _CadExCore.ModelData_TMinF_LinearMipMapNearest
ModelData_TMinF_LinearMipMapLinear = _CadExCore.ModelData_TMinF_LinearMipMapLinear
ModelData_TT_Unknown = _CadExCore.ModelData_TT_Unknown
ModelData_TT_DiffuseMap = _CadExCore.ModelData_TT_DiffuseMap
ModelData_TT_SpecularMap = _CadExCore.ModelData_TT_SpecularMap
ModelData_TT_EmissiveMap = _CadExCore.ModelData_TT_EmissiveMap
ModelData_TT_BumpMap = _CadExCore.ModelData_TT_BumpMap
ModelData_TT_NormalMap = _CadExCore.ModelData_TT_NormalMap
ModelData_TT_DisplacementMap = _CadExCore.ModelData_TT_DisplacementMap
ModelData_TT_SphereEnvironmentMap = _CadExCore.ModelData_TT_SphereEnvironmentMap
ModelData_TWM_ClampToEdge = _CadExCore.ModelData_TWM_ClampToEdge
ModelData_TWM_Repeat = _CadExCore.ModelData_TWM_Repeat
ModelData_TWM_MirroredRepeat = _CadExCore.ModelData_TWM_MirroredRepeat
class ModelData_Texture(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Type(self) -> "cadex::ModelData_TextureType":
        return _CadExCore.ModelData_Texture_Type(self)

    def SetType(self, theType: "cadex::ModelData_TextureType") -> "void":
        return _CadExCore.ModelData_Texture_SetType(self, theType)

    def Parameters(self) -> "cadex::ModelData_TextureParameters":
        return _CadExCore.ModelData_Texture_Parameters(self)

    def SetParameters(self, theParameters: "ModelData_TextureParameters") -> "void":
        return _CadExCore.ModelData_Texture_SetParameters(self, theParameters)

    def Accept(self, theVisitor: "ModelData_TextureVisitor") -> "void":
        return _CadExCore.ModelData_Texture_Accept(self, theVisitor)

    def IsEqual(self, theT: "ModelData_Texture") -> "bool":
        return _CadExCore.ModelData_Texture_IsEqual(self, theT)
    __swig_destroy__ = _CadExCore.delete_ModelData_Texture

# Register ModelData_Texture in _CadExCore:
_CadExCore.ModelData_Texture_swigregister(ModelData_Texture)

class ModelData_TextureParameters(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "_ModelData_BaseObject_initialized"):
        _CadExCore.ModelData_TextureParameters_swiginit(self, _CadExCore.new_ModelData_TextureParameters(arg2))

    def SetGenerateMipmaps(self, theEnabled: "bool") -> "void":
        return _CadExCore.ModelData_TextureParameters_SetGenerateMipmaps(self, theEnabled)

    def GenerateMipmaps(self) -> "bool":
        return _CadExCore.ModelData_TextureParameters_GenerateMipmaps(self)

    def SetMagnificationFilter(self, theFilter: "cadex::ModelData_TextureMagnificationFilter") -> "void":
        return _CadExCore.ModelData_TextureParameters_SetMagnificationFilter(self, theFilter)

    def MagnificationFilter(self) -> "cadex::ModelData_TextureMagnificationFilter":
        return _CadExCore.ModelData_TextureParameters_MagnificationFilter(self)

    def SetMinificationFilter(self, theFilter: "cadex::ModelData_TextureMinificationFilter") -> "void":
        return _CadExCore.ModelData_TextureParameters_SetMinificationFilter(self, theFilter)

    def MinificationFilter(self) -> "cadex::ModelData_TextureMinificationFilter":
        return _CadExCore.ModelData_TextureParameters_MinificationFilter(self)

    def SetWrapMode(self, theModeU: "cadex::ModelData_TextureWrapMode", theModeV: "cadex::ModelData_TextureWrapMode") -> "void":
        return _CadExCore.ModelData_TextureParameters_SetWrapMode(self, theModeU, theModeV)

    def WrapModeU(self) -> "cadex::ModelData_TextureWrapMode":
        return _CadExCore.ModelData_TextureParameters_WrapModeU(self)

    def WrapModeV(self) -> "cadex::ModelData_TextureWrapMode":
        return _CadExCore.ModelData_TextureParameters_WrapModeV(self)

    def SetBlendMode(self, theMode: "cadex::ModelData_TextureBlendMode") -> "void":
        return _CadExCore.ModelData_TextureParameters_SetBlendMode(self, theMode)

    def BlendMode(self) -> "cadex::ModelData_TextureBlendMode":
        return _CadExCore.ModelData_TextureParameters_BlendMode(self)

    def SetMappingMode(self, theMode: "cadex::ModelData_TextureMappingMode") -> "void":
        return _CadExCore.ModelData_TextureParameters_SetMappingMode(self, theMode)

    def MappingMode(self) -> "cadex::ModelData_TextureMappingMode":
        return _CadExCore.ModelData_TextureParameters_MappingMode(self)

    def SetRotation(self, theAngle: "float") -> "void":
        return _CadExCore.ModelData_TextureParameters_SetRotation(self, theAngle)

    def Rotation(self) -> "float":
        return _CadExCore.ModelData_TextureParameters_Rotation(self)

    def SetScale(self, theScaleU: "double", theScaleV: "double") -> "void":
        return _CadExCore.ModelData_TextureParameters_SetScale(self, theScaleU, theScaleV)

    def ScaleU(self) -> "double":
        return _CadExCore.ModelData_TextureParameters_ScaleU(self)

    def ScaleV(self) -> "double":
        return _CadExCore.ModelData_TextureParameters_ScaleV(self)

    def SetTranslation(self, theTranslationU: "double", theTranslationV: "double") -> "void":
        return _CadExCore.ModelData_TextureParameters_SetTranslation(self, theTranslationU, theTranslationV)

    def TranslationU(self) -> "double":
        return _CadExCore.ModelData_TextureParameters_TranslationU(self)

    def TranslationV(self) -> "double":
        return _CadExCore.ModelData_TextureParameters_TranslationV(self)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_TextureParameters_GetTypeId()

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_TextureParameters_swiginit(self, _CadExCore.new_ModelData_TextureParameters(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())

    __swig_destroy__ = _CadExCore.delete_ModelData_TextureParameters

# Register ModelData_TextureParameters in _CadExCore:
_CadExCore.ModelData_TextureParameters_swigregister(ModelData_TextureParameters)

def ModelData_TextureParameters_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_TextureParameters_GetTypeId()

class ModelData_FileTexture(ModelData_Texture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_FileTexture_swiginit(self, _CadExCore.new_ModelData_FileTexture(*args))

    def FilePath(self) -> "cadex::Base_UTF16String":
        return _CadExCore.ModelData_FileTexture_FilePath(self)

    def SetFilePath(self, theFilePath: "Base_UTF16String") -> "void":
        return _CadExCore.ModelData_FileTexture_SetFilePath(self, theFilePath)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_FileTexture_GetTypeId()

    @staticmethod
    def Cast(theBase: "ModelData_Texture") -> "cadex::ModelData_FileTexture":
        return _CadExCore.ModelData_FileTexture_Cast(theBase)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_FileTexture_swiginit(self, _CadExCore.new_ModelData_FileTexture(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())

    __swig_destroy__ = _CadExCore.delete_ModelData_FileTexture

# Register ModelData_FileTexture in _CadExCore:
_CadExCore.ModelData_FileTexture_swigregister(ModelData_FileTexture)

def ModelData_FileTexture_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_FileTexture_GetTypeId()

def ModelData_FileTexture_Cast(theBase: "ModelData_Texture") -> "cadex::ModelData_FileTexture":
    return _CadExCore.ModelData_FileTexture_Cast(theBase)

class ModelData_FileTextureHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theTexture: "ModelData_FileTexture") -> "size_t":
        return _CadExCore.ModelData_FileTextureHash___call__(self, theTexture)

    def __init__(self):
        _CadExCore.ModelData_FileTextureHash_swiginit(self, _CadExCore.new_ModelData_FileTextureHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_FileTextureHash

# Register ModelData_FileTextureHash in _CadExCore:
_CadExCore.ModelData_FileTextureHash_swigregister(ModelData_FileTextureHash)

class ModelData_PixMap(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "_ModelData_BaseObject_initialized"):
        _CadExCore.ModelData_PixMap_swiginit(self, _CadExCore.new_ModelData_PixMap(arg2))

    def PixelFormat(self) -> "cadex::ModelData_PixelFormat":
        return _CadExCore.ModelData_PixMap_PixelFormat(self)

    def Width(self) -> "size_t":
        return _CadExCore.ModelData_PixMap_Width(self)

    def Height(self) -> "size_t":
        return _CadExCore.ModelData_PixMap_Height(self)

    def PixelDataSize(self) -> "size_t":
        return _CadExCore.ModelData_PixMap_PixelDataSize(self)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PixMap_GetTypeId()

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PixMap_swiginit(self, _CadExCore.new_ModelData_PixMap(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())

    __swig_destroy__ = _CadExCore.delete_ModelData_PixMap

# Register ModelData_PixMap in _CadExCore:
_CadExCore.ModelData_PixMap_swigregister(ModelData_PixMap)

def ModelData_PixMap_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PixMap_GetTypeId()

class ModelData_PixMapTexture(ModelData_Texture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_PixMapTexture_swiginit(self, _CadExCore.new_ModelData_PixMapTexture(*args))

    def PixMap(self) -> "cadex::ModelData_PixMap":
        return _CadExCore.ModelData_PixMapTexture_PixMap(self)

    def SetPixMap(self, thePixMap: "ModelData_PixMap") -> "void":
        return _CadExCore.ModelData_PixMapTexture_SetPixMap(self, thePixMap)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_PixMapTexture_GetTypeId()

    @staticmethod
    def Cast(theBase: "ModelData_Texture") -> "cadex::ModelData_PixMapTexture":
        return _CadExCore.ModelData_PixMapTexture_Cast(theBase)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_PixMapTexture_swiginit(self, _CadExCore.new_ModelData_PixMapTexture(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())

    __swig_destroy__ = _CadExCore.delete_ModelData_PixMapTexture

# Register ModelData_PixMapTexture in _CadExCore:
_CadExCore.ModelData_PixMapTexture_swigregister(ModelData_PixMapTexture)

def ModelData_PixMapTexture_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_PixMapTexture_GetTypeId()

def ModelData_PixMapTexture_Cast(theBase: "ModelData_Texture") -> "cadex::ModelData_PixMapTexture":
    return _CadExCore.ModelData_PixMapTexture_Cast(theBase)

class ModelData_PixMapTextureHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theTexture: "ModelData_PixMapTexture") -> "size_t":
        return _CadExCore.ModelData_PixMapTextureHash___call__(self, theTexture)

    def __init__(self):
        _CadExCore.ModelData_PixMapTextureHash_swiginit(self, _CadExCore.new_ModelData_PixMapTextureHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_PixMapTextureHash

# Register ModelData_PixMapTextureHash in _CadExCore:
_CadExCore.ModelData_PixMapTextureHash_swigregister(ModelData_PixMapTextureHash)

class ModelData_TextureSet(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "_ModelData_BaseObject_initialized"):
        _CadExCore.ModelData_TextureSet_swiginit(self, _CadExCore.new_ModelData_TextureSet(arg2))

    def IsEmpty(self) -> "bool":
        return _CadExCore.ModelData_TextureSet_IsEmpty(self)

    def NumberOfTextures(self) -> "size_t":
        return _CadExCore.ModelData_TextureSet_NumberOfTextures(self)

    def Add(self, theTexture: "ModelData_Texture") -> "bool":
        return _CadExCore.ModelData_TextureSet_Add(self, theTexture)

    def Remove(self, theTexture: "ModelData_Texture") -> "bool":
        return _CadExCore.ModelData_TextureSet_Remove(self, theTexture)

    def Contains(self, theTexture: "ModelData_Texture") -> "bool":
        return _CadExCore.ModelData_TextureSet_Contains(self, theTexture)

    def Accept(self, theVisitor: "ModelData_TextureVisitor") -> "void":
        return _CadExCore.ModelData_TextureSet_Accept(self, theVisitor)

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_TextureSet_GetTypeId()

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelData_TextureSet_swiginit(self, _CadExCore.new_ModelData_TextureSet(*args))
        else:
            self.__init__(_ModelData_BaseObject_initialized())


    def GetTextureIterator(self):
        return ModelData_TextureSet_TextureIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_TextureSet

# Register ModelData_TextureSet in _CadExCore:
_CadExCore.ModelData_TextureSet_swigregister(ModelData_TextureSet)

def ModelData_TextureSet_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_TextureSet_GetTypeId()

class ModelData_TextureSet_TextureIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theSet: "ModelData_TextureSet"):
        _CadExCore.ModelData_TextureSet_TextureIterator_swiginit(self, _CadExCore.new_ModelData_TextureSet_TextureIterator(theSet))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_TextureSet_TextureIterator_HasNext(self)

    def Next(self, *args) -> "cadex::ModelData_Texture &":
        return _CadExCore.ModelData_TextureSet_TextureIterator_Next(self, *args)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_TextureSet_TextureIterator

# Register ModelData_TextureSet_TextureIterator in _CadExCore:
_CadExCore.ModelData_TextureSet_TextureIterator_swigregister(ModelData_TextureSet_TextureIterator)


def IsEqual(*args) -> "bool":
    return _CadExCore.IsEqual(*args)
class ModelData_TextureSetHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theSet: "ModelData_TextureSet") -> "size_t":
        return _CadExCore.ModelData_TextureSetHash___call__(self, theSet)

    def __init__(self):
        _CadExCore.ModelData_TextureSetHash_swiginit(self, _CadExCore.new_ModelData_TextureSetHash())
    __swig_destroy__ = _CadExCore.delete_ModelData_TextureSetHash

# Register ModelData_TextureSetHash in _CadExCore:
_CadExCore.ModelData_TextureSetHash_swigregister(ModelData_TextureSetHash)

class ModelData_TextureVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExCore.delete_ModelData_TextureVisitor

    @abstractmethod
    def VisitFileTexture(self, theTexture: "ModelData_FileTexture") -> "void":
        return _CadExCore.ModelData_TextureVisitor_VisitFileTexture(self, theTexture)

    @abstractmethod
    def VisitPixMapTexture(self, theTexture: "ModelData_PixMapTexture") -> "void":
        return _CadExCore.ModelData_TextureVisitor_VisitPixMapTexture(self, theTexture)

    def __init__(self):
        if self.__class__ == ModelData_TextureVisitor:
            _self = None
        else:
            _self = self
        _CadExCore.ModelData_TextureVisitor_swiginit(self, _CadExCore.new_ModelData_TextureVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExCore.disown_ModelData_TextureVisitor(self)
        return weakref.proxy(self)

# Register ModelData_TextureVisitor in _CadExCore:
_CadExCore.ModelData_TextureVisitor_swigregister(ModelData_TextureVisitor)

class ModelData_Ellipse2d(ModelData_Conic2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePosition: "ModelData_Axis2Placement2d", theMajorRadius: "double", theMinorRadius: "double"):
        _CadExCore.ModelData_Ellipse2d_swiginit(self, _CadExCore.new_ModelData_Ellipse2d(thePosition, theMajorRadius, theMinorRadius))

    def MajorRadius(self) -> "double":
        return _CadExCore.ModelData_Ellipse2d_MajorRadius(self)

    def MinorRadius(self) -> "double":
        return _CadExCore.ModelData_Ellipse2d_MinorRadius(self)

    @staticmethod
    def Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_Ellipse2d":
        return _CadExCore.ModelData_Ellipse2d_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_Ellipse2d

# Register ModelData_Ellipse2d in _CadExCore:
_CadExCore.ModelData_Ellipse2d_swigregister(ModelData_Ellipse2d)

def ModelData_Ellipse2d_Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_Ellipse2d":
    return _CadExCore.ModelData_Ellipse2d_Cast(theBase)

class ModelData_Ellipse(ModelData_Conic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePosition: "ModelData_Axis2Placement", theMajorRadius: "double", theMinorRadius: "double"):
        _CadExCore.ModelData_Ellipse_swiginit(self, _CadExCore.new_ModelData_Ellipse(thePosition, theMajorRadius, theMinorRadius))

    def MajorRadius(self) -> "double":
        return _CadExCore.ModelData_Ellipse_MajorRadius(self)

    def MinorRadius(self) -> "double":
        return _CadExCore.ModelData_Ellipse_MinorRadius(self)

    @staticmethod
    def Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_Ellipse":
        return _CadExCore.ModelData_Ellipse_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_Ellipse

# Register ModelData_Ellipse in _CadExCore:
_CadExCore.ModelData_Ellipse_swigregister(ModelData_Ellipse)

def ModelData_Ellipse_Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_Ellipse":
    return _CadExCore.ModelData_Ellipse_Cast(theBase)

class ModelData_Circle2d(ModelData_Conic2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePosition: "ModelData_Axis2Placement2d", theRadius: "double"):
        _CadExCore.ModelData_Circle2d_swiginit(self, _CadExCore.new_ModelData_Circle2d(thePosition, theRadius))

    def Radius(self) -> "double":
        return _CadExCore.ModelData_Circle2d_Radius(self)

    @staticmethod
    def Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_Circle2d":
        return _CadExCore.ModelData_Circle2d_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_Circle2d

# Register ModelData_Circle2d in _CadExCore:
_CadExCore.ModelData_Circle2d_swigregister(ModelData_Circle2d)

def ModelData_Circle2d_Cast(theBase: "ModelData_Curve2d") -> "cadex::ModelData_Circle2d":
    return _CadExCore.ModelData_Circle2d_Cast(theBase)

class ModelData_Circle(ModelData_Conic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePosition: "ModelData_Axis2Placement", theRadius: "double"):
        _CadExCore.ModelData_Circle_swiginit(self, _CadExCore.new_ModelData_Circle(thePosition, theRadius))

    def Radius(self) -> "double":
        return _CadExCore.ModelData_Circle_Radius(self)

    @staticmethod
    def Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_Circle":
        return _CadExCore.ModelData_Circle_Cast(theBase)
    __swig_destroy__ = _CadExCore.delete_ModelData_Circle

# Register ModelData_Circle in _CadExCore:
_CadExCore.ModelData_Circle_swigregister(ModelData_Circle)

def ModelData_Circle_Cast(theBase: "ModelData_Curve") -> "cadex::ModelData_Circle":
    return _CadExCore.ModelData_Circle_Cast(theBase)

class ModelAlgo_BRepFeatures(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def CreateExtrusion(theShape: "ModelData_Shape", theVec: "ModelData_Vector") -> "cadex::ModelData_Shape":
        return _CadExCore.ModelAlgo_BRepFeatures_CreateExtrusion(theShape, theVec)

    @staticmethod
    def CreateRevolution(*args) -> "cadex::ModelData_Shape":
        return _CadExCore.ModelAlgo_BRepFeatures_CreateRevolution(*args)

    def __init__(self):
        _CadExCore.ModelAlgo_BRepFeatures_swiginit(self, _CadExCore.new_ModelAlgo_BRepFeatures())
    __swig_destroy__ = _CadExCore.delete_ModelAlgo_BRepFeatures

# Register ModelAlgo_BRepFeatures in _CadExCore:
_CadExCore.ModelAlgo_BRepFeatures_swigregister(ModelAlgo_BRepFeatures)

def ModelAlgo_BRepFeatures_CreateExtrusion(theShape: "ModelData_Shape", theVec: "ModelData_Vector") -> "cadex::ModelData_Shape":
    return _CadExCore.ModelAlgo_BRepFeatures_CreateExtrusion(theShape, theVec)

def ModelAlgo_BRepFeatures_CreateRevolution(*args) -> "cadex::ModelData_Shape":
    return _CadExCore.ModelAlgo_BRepFeatures_CreateRevolution(*args)

class ModelData_ModelReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_ModelReader_swiginit(self, _CadExCore.new_ModelData_ModelReader())
    __swig_destroy__ = _CadExCore.delete_ModelData_ModelReader

    def Read(self, theFilePath: "Base_UTF16String", theModel: "ModelData_Model") -> "bool":
        return _CadExCore.ModelData_ModelReader_Read(self, theFilePath, theModel)

    def ReadBIM(self, theFilePath: "Base_UTF16String", theModel: "ModelData_BIMModel") -> "bool":
        return _CadExCore.ModelData_ModelReader_ReadBIM(self, theFilePath, theModel)

    def SetReaderParameters(self, theParameters: "Base_ReaderParameters") -> "void":
        return _CadExCore.ModelData_ModelReader_SetReaderParameters(self, theParameters)

    def SetProgressStatus(self, theProgressStatus: "Base_ProgressStatus") -> "void":
        return _CadExCore.ModelData_ModelReader_SetProgressStatus(self, theProgressStatus)

    def ProgressStatus(self) -> "cadex::Base_ProgressStatus const &":
        return _CadExCore.ModelData_ModelReader_ProgressStatus(self)

# Register ModelData_ModelReader in _CadExCore:
_CadExCore.ModelData_ModelReader_swigregister(ModelData_ModelReader)

class ModelData_ModelWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExCore.ModelData_ModelWriter_swiginit(self, _CadExCore.new_ModelData_ModelWriter())
    __swig_destroy__ = _CadExCore.delete_ModelData_ModelWriter

    def Write(self, *args) -> "bool":
        return _CadExCore.ModelData_ModelWriter_Write(self, *args)

    def SetWriterParameters(self, theParameters: "Base_WriterParameters") -> "void":
        return _CadExCore.ModelData_ModelWriter_SetWriterParameters(self, theParameters)

    def SetProgressStatus(self, theProgressStatus: "Base_ProgressStatus") -> "void":
        return _CadExCore.ModelData_ModelWriter_SetProgressStatus(self, theProgressStatus)

    def ProgressStatus(self) -> "cadex::Base_ProgressStatus const &":
        return _CadExCore.ModelData_ModelWriter_ProgressStatus(self)

# Register ModelData_ModelWriter in _CadExCore:
_CadExCore.ModelData_ModelWriter_swigregister(ModelData_ModelWriter)

class ModelData_ConfigurationManager(ModelData_BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExCore.ModelData_ConfigurationManager_swiginit(self, _CadExCore.new_ModelData_ConfigurationManager(*args))

    @staticmethod
    def GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
        return _CadExCore.ModelData_ConfigurationManager_GetTypeId()

    def SetBaseConfiguration(self, theBaseConfiguration: "ModelData_SceneGraphElement") -> "void":
        return _CadExCore.ModelData_ConfigurationManager_SetBaseConfiguration(self, theBaseConfiguration)

    def AddConfiguration(self, theName: "Base_UTF16String") -> "cadex::ModelData_SceneGraphElement":
        return _CadExCore.ModelData_ConfigurationManager_AddConfiguration(self, theName)

    def Configuration(self, theName: "Base_UTF16String") -> "cadex::ModelData_SceneGraphElement":
        return _CadExCore.ModelData_ConfigurationManager_Configuration(self, theName)

    def IsEmpty(self) -> "bool":
        return _CadExCore.ModelData_ConfigurationManager_IsEmpty(self)

    def NumberOfConfigurations(self) -> "size_t":
        return _CadExCore.ModelData_ConfigurationManager_NumberOfConfigurations(self)

    @staticmethod
    def ConfigurationName(theConfiguration: "ModelData_SceneGraphElement") -> "cadex::Base_UTF16String":
        return _CadExCore.ModelData_ConfigurationManager_ConfigurationName(theConfiguration)

    def GetConfigurationIterator(self):
        return ModelData_ConfigurationManager_ConfigurationIterator(self)

    __swig_destroy__ = _CadExCore.delete_ModelData_ConfigurationManager

# Register ModelData_ConfigurationManager in _CadExCore:
_CadExCore.ModelData_ConfigurationManager_swigregister(ModelData_ConfigurationManager)

def ModelData_ConfigurationManager_GetTypeId() -> "cadex::ModelData_BaseObject::IdType":
    return _CadExCore.ModelData_ConfigurationManager_GetTypeId()

def ModelData_ConfigurationManager_ConfigurationName(theConfiguration: "ModelData_SceneGraphElement") -> "cadex::Base_UTF16String":
    return _CadExCore.ModelData_ConfigurationManager_ConfigurationName(theConfiguration)

class ModelData_ConfigurationManager_ConfigurationIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theManager: "ModelData_ConfigurationManager"):
        _CadExCore.ModelData_ConfigurationManager_ConfigurationIterator_swiginit(self, _CadExCore.new_ModelData_ConfigurationManager_ConfigurationIterator(theManager))

    def HasNext(self) -> "bool":
        return _CadExCore.ModelData_ConfigurationManager_ConfigurationIterator_HasNext(self)

    def Next(self) -> "cadex::ModelData_SceneGraphElement const &":
        return _CadExCore.ModelData_ConfigurationManager_ConfigurationIterator_Next(self)

    def __next__(self):
        if self.HasNext():
            return self.Next()
        else:
            raise StopIteration

    def __iter__(self):
        return self 

    __swig_destroy__ = _CadExCore.delete_ModelData_ConfigurationManager_ConfigurationIterator

# Register ModelData_ConfigurationManager_ConfigurationIterator in _CadExCore:
_CadExCore.ModelData_ConfigurationManager_ConfigurationIterator_swigregister(ModelData_ConfigurationManager_ConfigurationIterator)



