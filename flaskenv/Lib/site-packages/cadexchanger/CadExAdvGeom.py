# This file modified for abstract classes
from abc import ABC, abstractmethod
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CadExAdvGeom
else:
    import _CadExAdvGeom

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _CadExAdvGeom.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExAdvGeom.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _CadExAdvGeom.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExAdvGeom.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExAdvGeom.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _CadExAdvGeom.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _CadExAdvGeom.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _CadExAdvGeom.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _CadExAdvGeom.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _CadExAdvGeom.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _CadExAdvGeom.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _CadExAdvGeom.SwigPyIterator_advance(self, n)

    def IsEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExAdvGeom.SwigPyIterator_IsEqual(self, x)

    def IsNotEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExAdvGeom.SwigPyIterator_IsNotEqual(self, x)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CadExAdvGeom:
_CadExAdvGeom.SwigPyIterator_swigregister(SwigPyIterator)

import cadexchanger.CadExCore
class ModelProjector_ProjectedModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ProjectionPlane(self) -> "cadex::ModelData_Plane const &":
        return _CadExAdvGeom.ModelProjector_ProjectedModel_ProjectionPlane(self)
    __swig_destroy__ = _CadExAdvGeom.delete_ModelProjector_ProjectedModel

# Register ModelProjector_ProjectedModel in _CadExAdvGeom:
_CadExAdvGeom.ModelProjector_ProjectedModel_swigregister(ModelProjector_ProjectedModel)

class CurveIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theContour: "ModelProjector_ProjectedModel"):
        _CadExAdvGeom.CurveIterator_swiginit(self, _CadExAdvGeom.new_CurveIterator(theContour))

    def HasNext(self) -> "bool":
        return _CadExAdvGeom.CurveIterator_HasNext(self)

    def Next(self) -> "cadex::ModelData_Curve2d const &":
        return _CadExAdvGeom.CurveIterator_Next(self)
    __swig_destroy__ = _CadExAdvGeom.delete_CurveIterator

# Register CurveIterator in _CadExAdvGeom:
_CadExAdvGeom.CurveIterator_swigregister(CurveIterator)

class ModelProjector_Projector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExAdvGeom.ModelProjector_Projector_swiginit(self, _CadExAdvGeom.new_ModelProjector_Projector())

    def LoadModel(self, theModel: "cadex::ModelData_Model const &") -> "void":
        return _CadExAdvGeom.ModelProjector_Projector_LoadModel(self, theModel)

    def Perform(self, *args) -> "void":
        return _CadExAdvGeom.ModelProjector_Projector_Perform(self, *args)

    def SetParameters(self, theParameters: "ModelProjector_ProjectorParameters") -> "void":
        return _CadExAdvGeom.ModelProjector_Projector_SetParameters(self, theParameters)

    def Parameters(self) -> "cadex::ModelProjector_ProjectorParameters const &":
        return _CadExAdvGeom.ModelProjector_Projector_Parameters(self)
    __swig_destroy__ = _CadExAdvGeom.delete_ModelProjector_Projector

# Register ModelProjector_Projector in _CadExAdvGeom:
_CadExAdvGeom.ModelProjector_Projector_swigregister(ModelProjector_Projector)

class ModelProjector_ProjectorParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PreferQuality = _CadExAdvGeom.ModelProjector_ProjectorParameters_PreferQuality
    PreferSpeed = _CadExAdvGeom.ModelProjector_ProjectorParameters_PreferSpeed

    def __init__(self):
        _CadExAdvGeom.ModelProjector_ProjectorParameters_swiginit(self, _CadExAdvGeom.new_ModelProjector_ProjectorParameters())

    def SetProcessImplicitIntersections(self, theProcess: "bool") -> "void":
        return _CadExAdvGeom.ModelProjector_ProjectorParameters_SetProcessImplicitIntersections(self, theProcess)

    def ProcessImplicitIntersections(self) -> "bool":
        return _CadExAdvGeom.ModelProjector_ProjectorParameters_ProcessImplicitIntersections(self)

    def SetDiscardSmoothEdges(self, theDiscard: "bool") -> "void":
        return _CadExAdvGeom.ModelProjector_ProjectorParameters_SetDiscardSmoothEdges(self, theDiscard)

    def DiscardSmoothEdges(self) -> "bool":
        return _CadExAdvGeom.ModelProjector_ProjectorParameters_DiscardSmoothEdges(self)

    def SetMode(self, theMode: "cadex::ModelProjector_ProjectorParameters::ModeType") -> "void":
        return _CadExAdvGeom.ModelProjector_ProjectorParameters_SetMode(self, theMode)

    def Mode(self) -> "cadex::ModelProjector_ProjectorParameters::ModeType":
        return _CadExAdvGeom.ModelProjector_ProjectorParameters_Mode(self)

    def SetSmoothEdgeAngle(self, theAngle: "double") -> "void":
        return _CadExAdvGeom.ModelProjector_ProjectorParameters_SetSmoothEdgeAngle(self, theAngle)

    def SmoothEdgeAngle(self) -> "double":
        return _CadExAdvGeom.ModelProjector_ProjectorParameters_SmoothEdgeAngle(self)

    def SetAllowConcurrency(self, theAllow: "bool") -> "void":
        return _CadExAdvGeom.ModelProjector_ProjectorParameters_SetAllowConcurrency(self, theAllow)

    def AllowConcurrency(self) -> "bool":
        return _CadExAdvGeom.ModelProjector_ProjectorParameters_AllowConcurrency(self)

    def SetBodyNameFormer(self, theBodyNameFormer: "std::shared_ptr< cadex::ModelProjector_BodyNameFormer > const &") -> "void":
        return _CadExAdvGeom.ModelProjector_ProjectorParameters_SetBodyNameFormer(self, theBodyNameFormer)

    def BodyNameFormer(self) -> "std::shared_ptr< cadex::ModelProjector_BodyNameFormer > &":
        return _CadExAdvGeom.ModelProjector_ProjectorParameters_BodyNameFormer(self)
    __swig_destroy__ = _CadExAdvGeom.delete_ModelProjector_ProjectorParameters

# Register ModelProjector_ProjectorParameters in _CadExAdvGeom:
_CadExAdvGeom.ModelProjector_ProjectorParameters_swigregister(ModelProjector_ProjectorParameters)

class ModelSimplifier_SimplifierTool(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ModelSimplifier_SimplifierTool:
            _self = None
        else:
            _self = self
        _CadExAdvGeom.ModelSimplifier_SimplifierTool_swiginit(self, _CadExAdvGeom.new_ModelSimplifier_SimplifierTool(_self, ))

    def SetShapePredicate(self, theShapePredicate: "std::shared_ptr< cadex::ModelSimplifier_ShapePredicate > const &") -> "void":
        return _CadExAdvGeom.ModelSimplifier_SimplifierTool_SetShapePredicate(self, theShapePredicate)
    __swig_destroy__ = _CadExAdvGeom.delete_ModelSimplifier_SimplifierTool

    @abstractmethod
    def Perform(self, theSource: "cadex::ModelData_Model const &") -> "cadex::ModelData_Model":
        return _CadExAdvGeom.ModelSimplifier_SimplifierTool_Perform(self, theSource)
    def __disown__(self):
        self.this.disown()
        _CadExAdvGeom.disown_ModelSimplifier_SimplifierTool(self)
        return weakref.proxy(self)

# Register ModelSimplifier_SimplifierTool in _CadExAdvGeom:
_CadExAdvGeom.ModelSimplifier_SimplifierTool_swigregister(ModelSimplifier_SimplifierTool)

class ModelSimplifier_HoleRemoverTool(ModelSimplifier_SimplifierTool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ModelSimplifier_HoleRemoverTool:
            _self = None
        else:
            _self = self
        _CadExAdvGeom.ModelSimplifier_HoleRemoverTool_swiginit(self, _CadExAdvGeom.new_ModelSimplifier_HoleRemoverTool(_self, ))

    def Perform(self, theSource: "cadex::ModelData_Model const &") -> "cadex::ModelData_Model":
        return _CadExAdvGeom.ModelSimplifier_HoleRemoverTool_Perform(self, theSource)

    def ExtentThreshold(self) -> "double":
        return _CadExAdvGeom.ModelSimplifier_HoleRemoverTool_ExtentThreshold(self)

    def SetExtentThreshold(self, theValue: "double") -> "void":
        return _CadExAdvGeom.ModelSimplifier_HoleRemoverTool_SetExtentThreshold(self, theValue)

    def VolumeThreshold(self) -> "double":
        return _CadExAdvGeom.ModelSimplifier_HoleRemoverTool_VolumeThreshold(self)

    def SetVolumeThreshold(self, theValue: "double") -> "void":
        return _CadExAdvGeom.ModelSimplifier_HoleRemoverTool_SetVolumeThreshold(self, theValue)

    def DiagonalThreshold(self) -> "double":
        return _CadExAdvGeom.ModelSimplifier_HoleRemoverTool_DiagonalThreshold(self)

    def SetDiagonalThreshold(self, theValue: "double") -> "void":
        return _CadExAdvGeom.ModelSimplifier_HoleRemoverTool_SetDiagonalThreshold(self, theValue)

    def PerformInterferenceCheck(self) -> "bool":
        return _CadExAdvGeom.ModelSimplifier_HoleRemoverTool_PerformInterferenceCheck(self)

    def SetPerformInterferenceCheck(self, theValue: "bool") -> "void":
        return _CadExAdvGeom.ModelSimplifier_HoleRemoverTool_SetPerformInterferenceCheck(self, theValue)
    __swig_destroy__ = _CadExAdvGeom.delete_ModelSimplifier_HoleRemoverTool
    def __disown__(self):
        self.this.disown()
        _CadExAdvGeom.disown_ModelSimplifier_HoleRemoverTool(self)
        return weakref.proxy(self)

# Register ModelSimplifier_HoleRemoverTool in _CadExAdvGeom:
_CadExAdvGeom.ModelSimplifier_HoleRemoverTool_swigregister(ModelSimplifier_HoleRemoverTool)

class ModelSimplifier_InternalFacesRemoverTool(ModelSimplifier_SimplifierTool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ModelSimplifier_InternalFacesRemoverTool:
            _self = None
        else:
            _self = self
        _CadExAdvGeom.ModelSimplifier_InternalFacesRemoverTool_swiginit(self, _CadExAdvGeom.new_ModelSimplifier_InternalFacesRemoverTool(_self, ))

    def Perform(self, theSource: "cadex::ModelData_Model const &") -> "cadex::ModelData_Model":
        return _CadExAdvGeom.ModelSimplifier_InternalFacesRemoverTool_Perform(self, theSource)

    def AngularTolerance(self) -> "double":
        return _CadExAdvGeom.ModelSimplifier_InternalFacesRemoverTool_AngularTolerance(self)

    def SetAngularTolerance(self, theValue: "double") -> "void":
        return _CadExAdvGeom.ModelSimplifier_InternalFacesRemoverTool_SetAngularTolerance(self, theValue)

    def LinearTolerance(self) -> "double":
        return _CadExAdvGeom.ModelSimplifier_InternalFacesRemoverTool_LinearTolerance(self)

    def SetLinearTolerance(self, theValue: "double") -> "void":
        return _CadExAdvGeom.ModelSimplifier_InternalFacesRemoverTool_SetLinearTolerance(self, theValue)

    def IsLinearToleranceRelative(self) -> "bool":
        return _CadExAdvGeom.ModelSimplifier_InternalFacesRemoverTool_IsLinearToleranceRelative(self)

    def SetIsLinearToleranceRelative(self, theValue: "bool") -> "void":
        return _CadExAdvGeom.ModelSimplifier_InternalFacesRemoverTool_SetIsLinearToleranceRelative(self, theValue)

    def PreserveSharing(self) -> "bool":
        return _CadExAdvGeom.ModelSimplifier_InternalFacesRemoverTool_PreserveSharing(self)

    def SetPreserveSharing(self, theValue: "bool") -> "void":
        return _CadExAdvGeom.ModelSimplifier_InternalFacesRemoverTool_SetPreserveSharing(self, theValue)
    __swig_destroy__ = _CadExAdvGeom.delete_ModelSimplifier_InternalFacesRemoverTool
    def __disown__(self):
        self.this.disown()
        _CadExAdvGeom.disown_ModelSimplifier_InternalFacesRemoverTool(self)
        return weakref.proxy(self)

# Register ModelSimplifier_InternalFacesRemoverTool in _CadExAdvGeom:
_CadExAdvGeom.ModelSimplifier_InternalFacesRemoverTool_swigregister(ModelSimplifier_InternalFacesRemoverTool)

class ModelSimplifier_MeshSimplifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExAdvGeom.ModelSimplifier_MeshSimplifier_swiginit(self, _CadExAdvGeom.new_ModelSimplifier_MeshSimplifier())

    def Perform(self, *args) -> "cadex::ModelData_PolyRepresentation":
        return _CadExAdvGeom.ModelSimplifier_MeshSimplifier_Perform(self, *args)

    def SetParameters(self, theParameters: "ModelSimplifier_MeshSimplifierParameters") -> "void":
        return _CadExAdvGeom.ModelSimplifier_MeshSimplifier_SetParameters(self, theParameters)

    def Parameters(self) -> "cadex::ModelSimplifier_MeshSimplifierParameters const &":
        return _CadExAdvGeom.ModelSimplifier_MeshSimplifier_Parameters(self)
    __swig_destroy__ = _CadExAdvGeom.delete_ModelSimplifier_MeshSimplifier

# Register ModelSimplifier_MeshSimplifier in _CadExAdvGeom:
_CadExAdvGeom.ModelSimplifier_MeshSimplifier_swigregister(ModelSimplifier_MeshSimplifier)

class ModelSimplifier_MeshSimplifierParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Low = _CadExAdvGeom.ModelSimplifier_MeshSimplifierParameters_Low
    Medium = _CadExAdvGeom.ModelSimplifier_MeshSimplifierParameters_Medium
    High = _CadExAdvGeom.ModelSimplifier_MeshSimplifierParameters_High

    def __init__(self):
        _CadExAdvGeom.ModelSimplifier_MeshSimplifierParameters_swiginit(self, _CadExAdvGeom.new_ModelSimplifier_MeshSimplifierParameters())

    def DegreeOfSimplification(self) -> "cadex::ModelSimplifier_MeshSimplifierParameters::DegreeOfSimplificationType":
        return _CadExAdvGeom.ModelSimplifier_MeshSimplifierParameters_DegreeOfSimplification(self)

    def SetDegreeOfSimplification(self, theValue: "cadex::ModelSimplifier_MeshSimplifierParameters::DegreeOfSimplificationType") -> "void":
        return _CadExAdvGeom.ModelSimplifier_MeshSimplifierParameters_SetDegreeOfSimplification(self, theValue)

    def MaxDeviation(self) -> "double":
        return _CadExAdvGeom.ModelSimplifier_MeshSimplifierParameters_MaxDeviation(self)

    def SetMaxDeviation(self, theValue: "double") -> "void":
        return _CadExAdvGeom.ModelSimplifier_MeshSimplifierParameters_SetMaxDeviation(self, theValue)

    def ForceSimplification(self) -> "bool":
        return _CadExAdvGeom.ModelSimplifier_MeshSimplifierParameters_ForceSimplification(self)

    def SetForceSimplification(self, theValue: "bool") -> "void":
        return _CadExAdvGeom.ModelSimplifier_MeshSimplifierParameters_SetForceSimplification(self, theValue)
    __swig_destroy__ = _CadExAdvGeom.delete_ModelSimplifier_MeshSimplifierParameters

# Register ModelSimplifier_MeshSimplifierParameters in _CadExAdvGeom:
_CadExAdvGeom.ModelSimplifier_MeshSimplifierParameters_swigregister(ModelSimplifier_MeshSimplifierParameters)

class ModelSimplifier_MeshSimplifierTool(ModelSimplifier_SimplifierTool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ModelSimplifier_MeshSimplifierTool:
            _self = None
        else:
            _self = self
        _CadExAdvGeom.ModelSimplifier_MeshSimplifierTool_swiginit(self, _CadExAdvGeom.new_ModelSimplifier_MeshSimplifierTool(_self, ))

    def Perform(self, theSource: "cadex::ModelData_Model const &") -> "cadex::ModelData_Model":
        return _CadExAdvGeom.ModelSimplifier_MeshSimplifierTool_Perform(self, theSource)

    def SetParameters(self, theParameters: "ModelSimplifier_MeshSimplifierParameters") -> "void":
        return _CadExAdvGeom.ModelSimplifier_MeshSimplifierTool_SetParameters(self, theParameters)

    def Parameters(self) -> "cadex::ModelSimplifier_MeshSimplifierParameters const &":
        return _CadExAdvGeom.ModelSimplifier_MeshSimplifierTool_Parameters(self)
    __swig_destroy__ = _CadExAdvGeom.delete_ModelSimplifier_MeshSimplifierTool
    def __disown__(self):
        self.this.disown()
        _CadExAdvGeom.disown_ModelSimplifier_MeshSimplifierTool(self)
        return weakref.proxy(self)

# Register ModelSimplifier_MeshSimplifierTool in _CadExAdvGeom:
_CadExAdvGeom.ModelSimplifier_MeshSimplifierTool_swigregister(ModelSimplifier_MeshSimplifierTool)

class ModelSimplifier_ShapePredicate(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @abstractmethod
    def CanSimplifyShape(self, theShape: "ModelData_Shape const &") -> "bool":
        return _CadExAdvGeom.ModelSimplifier_ShapePredicate_CanSimplifyShape(self, theShape)

    @abstractmethod
    def CanSplitShape(self, theShape: "ModelData_Shape const &") -> "bool":
        return _CadExAdvGeom.ModelSimplifier_ShapePredicate_CanSplitShape(self, theShape)
    __swig_destroy__ = _CadExAdvGeom.delete_ModelSimplifier_ShapePredicate

    def __init__(self):
        if self.__class__ == ModelSimplifier_ShapePredicate:
            _self = None
        else:
            _self = self
        _CadExAdvGeom.ModelSimplifier_ShapePredicate_swiginit(self, _CadExAdvGeom.new_ModelSimplifier_ShapePredicate(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExAdvGeom.disown_ModelSimplifier_ShapePredicate(self)
        return weakref.proxy(self)

# Register ModelSimplifier_ShapePredicate in _CadExAdvGeom:
_CadExAdvGeom.ModelSimplifier_ShapePredicate_swigregister(ModelSimplifier_ShapePredicate)

class ModelSimplifier_Simplifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExAdvGeom.ModelSimplifier_Simplifier_swiginit(self, _CadExAdvGeom.new_ModelSimplifier_Simplifier())

    def AddTool(self, theTool: "std::shared_ptr< cadex::ModelSimplifier_SimplifierTool > const &") -> "cadex::ModelSimplifier_Simplifier &":
        return _CadExAdvGeom.ModelSimplifier_Simplifier_AddTool(self, theTool)

    def Perform(self, theSource: "cadex::ModelData_Model const &") -> "cadex::ModelData_Model":
        return _CadExAdvGeom.ModelSimplifier_Simplifier_Perform(self, theSource)
    __swig_destroy__ = _CadExAdvGeom.delete_ModelSimplifier_Simplifier

# Register ModelSimplifier_Simplifier in _CadExAdvGeom:
_CadExAdvGeom.ModelSimplifier_Simplifier_swigregister(ModelSimplifier_Simplifier)

class ModelSimplifier_SimplifierBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Low = _CadExAdvGeom.ModelSimplifier_SimplifierBuilder_Low
    Middle = _CadExAdvGeom.ModelSimplifier_SimplifierBuilder_Middle
    High = _CadExAdvGeom.ModelSimplifier_SimplifierBuilder_High
    Small = _CadExAdvGeom.ModelSimplifier_SimplifierBuilder_Small
    Medium = _CadExAdvGeom.ModelSimplifier_SimplifierBuilder_Medium
    Large = _CadExAdvGeom.ModelSimplifier_SimplifierBuilder_Large

    def __init__(self):
        _CadExAdvGeom.ModelSimplifier_SimplifierBuilder_swiginit(self, _CadExAdvGeom.new_ModelSimplifier_SimplifierBuilder())

    def CreatePipeline(self) -> "cadex::ModelSimplifier_Simplifier":
        return _CadExAdvGeom.ModelSimplifier_SimplifierBuilder_CreatePipeline(self)

    def Level(self) -> "cadex::ModelSimplifier_SimplifierBuilder::SimplificationLevel":
        return _CadExAdvGeom.ModelSimplifier_SimplifierBuilder_Level(self)

    def SetLevel(self, theValue: "cadex::ModelSimplifier_SimplifierBuilder::SimplificationLevel") -> "void":
        return _CadExAdvGeom.ModelSimplifier_SimplifierBuilder_SetLevel(self, theValue)

    def FeatureSize(self) -> "cadex::ModelSimplifier_SimplifierBuilder::SimplifiedFeatureSize":
        return _CadExAdvGeom.ModelSimplifier_SimplifierBuilder_FeatureSize(self)

    def SetFeatureSize(self, theValue: "cadex::ModelSimplifier_SimplifierBuilder::SimplifiedFeatureSize") -> "void":
        return _CadExAdvGeom.ModelSimplifier_SimplifierBuilder_SetFeatureSize(self, theValue)

    def SetShapePredicate(self, theFunction: "std::shared_ptr< cadex::ModelSimplifier_ShapePredicate >") -> "void":
        return _CadExAdvGeom.ModelSimplifier_SimplifierBuilder_SetShapePredicate(self, theFunction)
    __swig_destroy__ = _CadExAdvGeom.delete_ModelSimplifier_SimplifierBuilder

# Register ModelSimplifier_SimplifierBuilder in _CadExAdvGeom:
_CadExAdvGeom.ModelSimplifier_SimplifierBuilder_swigregister(ModelSimplifier_SimplifierBuilder)

class ModelSimplifier_SmallBodiesRemoverTool(ModelSimplifier_SimplifierTool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ModelSimplifier_SmallBodiesRemoverTool:
            _self = None
        else:
            _self = self
        _CadExAdvGeom.ModelSimplifier_SmallBodiesRemoverTool_swiginit(self, _CadExAdvGeom.new_ModelSimplifier_SmallBodiesRemoverTool(_self, ))

    def Perform(self, theSource: "cadex::ModelData_Model const &") -> "cadex::ModelData_Model":
        return _CadExAdvGeom.ModelSimplifier_SmallBodiesRemoverTool_Perform(self, theSource)

    def Threshold(self) -> "double":
        return _CadExAdvGeom.ModelSimplifier_SmallBodiesRemoverTool_Threshold(self)

    def SetThreshold(self, theValue: "double") -> "void":
        return _CadExAdvGeom.ModelSimplifier_SmallBodiesRemoverTool_SetThreshold(self, theValue)

    def RemovalIsVisualQualityAware(self) -> "bool":
        return _CadExAdvGeom.ModelSimplifier_SmallBodiesRemoverTool_RemovalIsVisualQualityAware(self)

    def SetRemovalIsVisualQualityAware(self, theValue: "bool") -> "void":
        return _CadExAdvGeom.ModelSimplifier_SmallBodiesRemoverTool_SetRemovalIsVisualQualityAware(self, theValue)

    def VisualQualityThreshold(self) -> "double":
        return _CadExAdvGeom.ModelSimplifier_SmallBodiesRemoverTool_VisualQualityThreshold(self)

    def SetVisualQualityThreshold(self, theValue: "double") -> "void":
        return _CadExAdvGeom.ModelSimplifier_SmallBodiesRemoverTool_SetVisualQualityThreshold(self, theValue)
    __swig_destroy__ = _CadExAdvGeom.delete_ModelSimplifier_SmallBodiesRemoverTool
    def __disown__(self):
        self.this.disown()
        _CadExAdvGeom.disown_ModelSimplifier_SmallBodiesRemoverTool(self)
        return weakref.proxy(self)

# Register ModelSimplifier_SmallBodiesRemoverTool in _CadExAdvGeom:
_CadExAdvGeom.ModelSimplifier_SmallBodiesRemoverTool_swigregister(ModelSimplifier_SmallBodiesRemoverTool)



