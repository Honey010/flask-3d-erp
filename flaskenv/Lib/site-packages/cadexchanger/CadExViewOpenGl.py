# This file modified for abstract classes
from abc import ABC, abstractmethod
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CadExViewOpenGl
else:
    import _CadExViewOpenGl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _CadExViewOpenGl.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExViewOpenGl.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _CadExViewOpenGl.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExViewOpenGl.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExViewOpenGl.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _CadExViewOpenGl.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _CadExViewOpenGl.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _CadExViewOpenGl.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _CadExViewOpenGl.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _CadExViewOpenGl.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _CadExViewOpenGl.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _CadExViewOpenGl.SwigPyIterator_advance(self, n)

    def IsEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExViewOpenGl.SwigPyIterator_IsEqual(self, x)

    def IsNotEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExViewOpenGl.SwigPyIterator_IsNotEqual(self, x)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CadExViewOpenGl:
_CadExViewOpenGl.SwigPyIterator_swigregister(SwigPyIterator)

import cadexchanger.CadExCore
import cadexchanger.CadExView

import atexit

class ModelPrs_Cursor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExViewOpenGl.ModelPrs_Cursor_swiginit(self, _CadExViewOpenGl.new_ModelPrs_Cursor(*args))

    def Type(self) -> "cadex::ModelPrs_CursorType":
        return _CadExViewOpenGl.ModelPrs_Cursor_Type(self)

    def Resource(self) -> "cadex::Base_UTF16String const &":
        return _CadExViewOpenGl.ModelPrs_Cursor_Resource(self)

    def SetResource(self, theResource: "Base_UTF16String") -> "void":
        return _CadExViewOpenGl.ModelPrs_Cursor_SetResource(self, theResource)
    __swig_destroy__ = _CadExViewOpenGl.delete_ModelPrs_Cursor

# Register ModelPrs_Cursor in _CadExViewOpenGl:
_CadExViewOpenGl.ModelPrs_Cursor_swigregister(ModelPrs_Cursor)

class ModelPrs_HoverEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExViewOpenGl.ModelPrs_HoverEvent_swiginit(self, _CadExViewOpenGl.new_ModelPrs_HoverEvent(*args))

    def Position(self) -> "ModelData_Point2d const &":
        return _CadExViewOpenGl.ModelPrs_HoverEvent_Position(self)

    def Modifiers(self) -> "cadex::internal::ModelPrs_KeyboardModifier":
        return _CadExViewOpenGl.ModelPrs_HoverEvent_Modifiers(self)
    __swig_destroy__ = _CadExViewOpenGl.delete_ModelPrs_HoverEvent

# Register ModelPrs_HoverEvent in _CadExViewOpenGl:
_CadExViewOpenGl.ModelPrs_HoverEvent_swigregister(ModelPrs_HoverEvent)

class ModelPrs_MouseEvent(ModelPrs_HoverEvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExViewOpenGl.ModelPrs_MouseEvent_swiginit(self, _CadExViewOpenGl.new_ModelPrs_MouseEvent(*args))

    def Buttons(self) -> "cadex::internal::ModelPrs_MouseButton":
        return _CadExViewOpenGl.ModelPrs_MouseEvent_Buttons(self)
    __swig_destroy__ = _CadExViewOpenGl.delete_ModelPrs_MouseEvent

# Register ModelPrs_MouseEvent in _CadExViewOpenGl:
_CadExViewOpenGl.ModelPrs_MouseEvent_swigregister(ModelPrs_MouseEvent)

class ModelPrs_TouchEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Pressed = _CadExViewOpenGl.ModelPrs_TouchEvent_Pressed
    Moved = _CadExViewOpenGl.ModelPrs_TouchEvent_Moved
    Stationary = _CadExViewOpenGl.ModelPrs_TouchEvent_Stationary
    Released = _CadExViewOpenGl.ModelPrs_TouchEvent_Released

    def __init__(self, *args):
        _CadExViewOpenGl.ModelPrs_TouchEvent_swiginit(self, _CadExViewOpenGl.new_ModelPrs_TouchEvent(*args))

    def IsEmpty(self) -> "bool":
        return _CadExViewOpenGl.ModelPrs_TouchEvent_IsEmpty(self)

    def Touches(self, *args) -> "cadex::internal::ModelPrs_TouchEvent::TouchesType &":
        return _CadExViewOpenGl.ModelPrs_TouchEvent_Touches(self, *args)
    __swig_destroy__ = _CadExViewOpenGl.delete_ModelPrs_TouchEvent

# Register ModelPrs_TouchEvent in _CadExViewOpenGl:
_CadExViewOpenGl.ModelPrs_TouchEvent_swigregister(ModelPrs_TouchEvent)

class ModelPrs_Touch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePosition: "ModelData_Point2d const &", theState: "cadex::internal::ModelPrs_TouchEvent::Touch::StatesType"):
        _CadExViewOpenGl.ModelPrs_Touch_swiginit(self, _CadExViewOpenGl.new_ModelPrs_Touch(thePosition, theState))

    def State(self, *args) -> "cadex::internal::ModelPrs_TouchEvent::Touch::StatesType &":
        return _CadExViewOpenGl.ModelPrs_Touch_State(self, *args)

    def Position(self, *args) -> "ModelData_Point2d &":
        return _CadExViewOpenGl.ModelPrs_Touch_Position(self, *args)
    __swig_destroy__ = _CadExViewOpenGl.delete_ModelPrs_Touch

# Register ModelPrs_Touch in _CadExViewOpenGl:
_CadExViewOpenGl.ModelPrs_Touch_swigregister(ModelPrs_Touch)

class ModelPrs_ResourceManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def __Instance() -> "cadex::internal::ModelPrs_ResourceManager const &":
        return _CadExViewOpenGl.ModelPrs_ResourceManager___Instance()

    def Path(self, theName: "Base_UTF16String") -> "cadex::Base_UTF16String":
        return _CadExViewOpenGl.ModelPrs_ResourceManager_Path(self, theName)

    __theResourceManager = None

    @classmethod
    def Instance(cls):
        if not cls.__theResourceManager:
            cls.__theResourceManager = cls.__Instance()
            atexit.register(cls.__clear, cls)
        return cls.__theResourceManager


    def __init__(self):
        _CadExViewOpenGl.ModelPrs_ResourceManager_swiginit(self, _CadExViewOpenGl.new_ModelPrs_ResourceManager())
    __swig_destroy__ = _CadExViewOpenGl.delete_ModelPrs_ResourceManager

# Register ModelPrs_ResourceManager in _CadExViewOpenGl:
_CadExViewOpenGl.ModelPrs_ResourceManager_swigregister(ModelPrs_ResourceManager)

def ModelPrs_ResourceManager___Instance() -> "cadex::internal::ModelPrs_ResourceManager const &":
    return _CadExViewOpenGl.ModelPrs_ResourceManager___Instance()

class ModelPrs_ViewPortNotifyer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ModelPrs_ViewPortNotifyer:
            _self = None
        else:
            _self = self
        _CadExViewOpenGl.ModelPrs_ViewPortNotifyer_swiginit(self, _CadExViewOpenGl.new_ModelPrs_ViewPortNotifyer(_self, ))
    __swig_destroy__ = _CadExViewOpenGl.delete_ModelPrs_ViewPortNotifyer

    def Update(self) -> "void":
        return _CadExViewOpenGl.ModelPrs_ViewPortNotifyer_Update(self)

    def SetCursor(self, theCursor: "ModelPrs_Cursor") -> "void":
        return _CadExViewOpenGl.ModelPrs_ViewPortNotifyer_SetCursor(self, theCursor)

    def ShowContextMenu(self, thePoint: "cadex::ModelData_Point2d const &") -> "void":
        return _CadExViewOpenGl.ModelPrs_ViewPortNotifyer_ShowContextMenu(self, thePoint)
    def __disown__(self):
        self.this.disown()
        _CadExViewOpenGl.disown_ModelPrs_ViewPortNotifyer(self)
        return weakref.proxy(self)

# Register ModelPrs_ViewPortNotifyer in _CadExViewOpenGl:
_CadExViewOpenGl.ModelPrs_ViewPortNotifyer_swigregister(ModelPrs_ViewPortNotifyer)

class ModelPrs_WheelEvent(ModelPrs_MouseEvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExViewOpenGl.ModelPrs_WheelEvent_swiginit(self, _CadExViewOpenGl.new_ModelPrs_WheelEvent(*args))

    def Degrees(self) -> "int":
        return _CadExViewOpenGl.ModelPrs_WheelEvent_Degrees(self)

    def Delta(self, *args) -> "int &":
        return _CadExViewOpenGl.ModelPrs_WheelEvent_Delta(self, *args)
    __swig_destroy__ = _CadExViewOpenGl.delete_ModelPrs_WheelEvent

# Register ModelPrs_WheelEvent in _CadExViewOpenGl:
_CadExViewOpenGl.ModelPrs_WheelEvent_swigregister(ModelPrs_WheelEvent)

class ModelPrsOpenGl_ViewPort(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theWindow: "cadex::ModelPrsOpenGl_ViewPort::WindowHandleType", theNotifyer: "ModelPrs_ViewPortNotifyer"):
        _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_swiginit(self, _CadExViewOpenGl.new_ModelPrsOpenGl_ViewPort(theWindow, theNotifyer))

    def AttachToScene(self, theScene: "ModelPrs_Scene") -> "bool":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_AttachToScene(self, theScene)

    def IsAttachedToScene(self) -> "bool":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_IsAttachedToScene(self)

    def Render(self) -> "bool":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_Render(self)

    def Resize(self, theWidth: "unsigned int", theHeight: "unsigned int") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_Resize(self, theWidth, theHeight)

    def FitAll(self, theUseAnimation: "bool") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_FitAll(self, theUseAnimation)

    def FitBox(self, theBox: "cadex::ModelData_Box const &", theUseAnimation: "bool") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_FitBox(self, theBox, theUseAnimation)

    def MouseMode(self) -> "cadex::ModelPrs_MouseMode":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_MouseMode(self)

    def SetMouseMode(self, theMode: "cadex::ModelPrs_MouseMode") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_SetMouseMode(self, theMode)

    def CameraProjectionType(self) -> "cadex::ModelPrs_CameraProjectionType":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_CameraProjectionType(self)

    def SetCameraProjectionType(self, theType: "cadex::ModelPrs_CameraProjectionType") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_SetCameraProjectionType(self, theType)

    def HighlightEnabled(self) -> "bool":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_HighlightEnabled(self)

    def SetHighlightEnabled(self, theEnabled: "bool") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_SetHighlightEnabled(self, theEnabled)

    def SelectionEnabled(self) -> "bool":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_SelectionEnabled(self)

    def SetSelectionEnabled(self, theEnabled: "bool") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_SetSelectionEnabled(self, theEnabled)

    def DevicePixelRatio(self) -> "double":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_DevicePixelRatio(self)

    def SetDevicePixelRatio(self, theRatio: "double") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_SetDevicePixelRatio(self, theRatio)

    def BackgroundStyle(self) -> "cadex::ModelPrs_BackgroundStyle const &":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_BackgroundStyle(self)

    def SetBackgroundStyle(self, theStyle: "ModelPrs_BackgroundStyle") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_SetBackgroundStyle(self, theStyle)

    def ViewCubeStyle(self) -> "cadex::ModelPrs_ViewCubeStyle const &":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_ViewCubeStyle(self)

    def SetViewCubeStyle(self, theStyle: "ModelPrs_ViewCubeStyle") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_SetViewCubeStyle(self, theStyle)

    def ViewCubeGeometry(self) -> "cadex::ModelData_Box2d const &":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_ViewCubeGeometry(self)

    def SetViewCubeGeometry(self, theBox: "cadex::ModelData_Box2d const &") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_SetViewCubeGeometry(self, theBox)

    def ViewCubeEnabled(self) -> "bool":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_ViewCubeEnabled(self)

    def SetViewCubeEnabled(self, theEnabled: "bool") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_SetViewCubeEnabled(self, theEnabled)

    def TrihedronEnabled(self) -> "bool":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_TrihedronEnabled(self)

    def SetTrihedronEnabled(self, theEnabled: "bool") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_SetTrihedronEnabled(self, theEnabled)

    def GridPlaneEnabled(self) -> "bool":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_GridPlaneEnabled(self)

    def SetGridPlaneEnabled(self, theEnabled: "bool") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_SetGridPlaneEnabled(self, theEnabled)

    def Manipulator(self) -> "cadex::ModelPrs_Manipulator const &":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_Manipulator(self)

    def Exploder(self) -> "cadex::ModelPrs_Exploder const &":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_Exploder(self)

    def OnHoverEnter(self, theEvent: "ModelPrs_HoverEvent") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_OnHoverEnter(self, theEvent)

    def OnHoverMove(self, theEvent: "ModelPrs_HoverEvent") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_OnHoverMove(self, theEvent)

    def OnHoverLeave(self, theEvent: "ModelPrs_HoverEvent") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_OnHoverLeave(self, theEvent)

    def OnMouseMove(self, theEvent: "ModelPrs_MouseEvent") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_OnMouseMove(self, theEvent)

    def OnMouseDown(self, theEvent: "ModelPrs_MouseEvent") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_OnMouseDown(self, theEvent)

    def OnMouseUp(self, theEvent: "ModelPrs_MouseEvent") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_OnMouseUp(self, theEvent)

    def OnWheel(self, theEvent: "ModelPrs_WheelEvent") -> "void":
        return _CadExViewOpenGl.ModelPrsOpenGl_ViewPort_OnWheel(self, theEvent)
    __swig_destroy__ = _CadExViewOpenGl.delete_ModelPrsOpenGl_ViewPort

# Register ModelPrsOpenGl_ViewPort in _CadExViewOpenGl:
_CadExViewOpenGl.ModelPrsOpenGl_ViewPort_swigregister(ModelPrsOpenGl_ViewPort)



