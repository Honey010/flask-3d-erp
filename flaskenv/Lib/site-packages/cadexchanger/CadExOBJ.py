# This file modified for abstract classes
from abc import ABC, abstractmethod
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CadExOBJ
else:
    import _CadExOBJ

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _CadExOBJ.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExOBJ.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _CadExOBJ.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExOBJ.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExOBJ.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _CadExOBJ.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _CadExOBJ.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _CadExOBJ.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _CadExOBJ.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _CadExOBJ.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _CadExOBJ.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _CadExOBJ.SwigPyIterator_advance(self, n)

    def IsEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExOBJ.SwigPyIterator_IsEqual(self, x)

    def IsNotEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExOBJ.SwigPyIterator_IsNotEqual(self, x)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CadExOBJ:
_CadExOBJ.SwigPyIterator_swigregister(SwigPyIterator)

import cadexchanger.CadExCore
class OBJ_ReaderParameters(cadexchanger.CadExCore.Base_ReaderParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExOBJ.OBJ_ReaderParameters_swiginit(self, _CadExOBJ.new_OBJ_ReaderParameters())

    def UnitCoef(self) -> "double":
        return _CadExOBJ.OBJ_ReaderParameters_UnitCoef(self)

    def EnforceGrouping(self) -> "bool":
        return _CadExOBJ.OBJ_ReaderParameters_EnforceGrouping(self)

    def SetUnitCoef(self, theUnitCoef: "bool") -> "void":
        return _CadExOBJ.OBJ_ReaderParameters_SetUnitCoef(self, theUnitCoef)

    def SetEnforceGrouping(self, theEnforceGrouping: "bool") -> "void":
        return _CadExOBJ.OBJ_ReaderParameters_SetEnforceGrouping(self, theEnforceGrouping)
    __swig_destroy__ = _CadExOBJ.delete_OBJ_ReaderParameters

# Register OBJ_ReaderParameters in _CadExOBJ:
_CadExOBJ.OBJ_ReaderParameters_swigregister(OBJ_ReaderParameters)

class OBJ_Reader(cadexchanger.CadExCore.Base_Reader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExOBJ.OBJ_Reader_swiginit(self, _CadExOBJ.new_OBJ_Reader())

    def Parameters(self) -> "cadex::OBJ_ReaderParameters const &":
        return _CadExOBJ.OBJ_Reader_Parameters(self)

    def SetParameters(self, theParameters: "OBJ_ReaderParameters") -> "void":
        return _CadExOBJ.OBJ_Reader_SetParameters(self, theParameters)
    __swig_destroy__ = _CadExOBJ.delete_OBJ_Reader

# Register OBJ_Reader in _CadExOBJ:
_CadExOBJ.OBJ_Reader_swigregister(OBJ_Reader)

class OBJ_WriterParameters(cadexchanger.CadExCore.Base_WriterParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExOBJ.OBJ_WriterParameters_swiginit(self, _CadExOBJ.new_OBJ_WriterParameters())

    def ToGenerateMtlFile(self) -> "bool":
        return _CadExOBJ.OBJ_WriterParameters_ToGenerateMtlFile(self)

    def WriteNormals(self) -> "bool":
        return _CadExOBJ.OBJ_WriterParameters_WriteNormals(self)

    def OverrideDuplicateNames(self) -> "bool":
        return _CadExOBJ.OBJ_WriterParameters_OverrideDuplicateNames(self)

    def ReplaceSpacesInNames(self, *args) -> "bool &":
        return _CadExOBJ.OBJ_WriterParameters_ReplaceSpacesInNames(self, *args)

    def SetToGenerateMtlFile(self, theToGenerateMtlFile: "bool") -> "void":
        return _CadExOBJ.OBJ_WriterParameters_SetToGenerateMtlFile(self, theToGenerateMtlFile)

    def SetWriteNormals(self, theWriteNormals: "bool") -> "void":
        return _CadExOBJ.OBJ_WriterParameters_SetWriteNormals(self, theWriteNormals)

    def SetOverrideDuplicateNames(self, theOverrideDuplicateNames: "bool") -> "void":
        return _CadExOBJ.OBJ_WriterParameters_SetOverrideDuplicateNames(self, theOverrideDuplicateNames)
    __swig_destroy__ = _CadExOBJ.delete_OBJ_WriterParameters

# Register OBJ_WriterParameters in _CadExOBJ:
_CadExOBJ.OBJ_WriterParameters_swigregister(OBJ_WriterParameters)

class OBJ_Writer(cadexchanger.CadExCore.Base_Writer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExOBJ.OBJ_Writer_swiginit(self, _CadExOBJ.new_OBJ_Writer())

    def Parameters(self) -> "cadex::OBJ_WriterParameters const &":
        return _CadExOBJ.OBJ_Writer_Parameters(self)

    def SetParameters(self, theParameters: "OBJ_WriterParameters") -> "void":
        return _CadExOBJ.OBJ_Writer_SetParameters(self, theParameters)
    __swig_destroy__ = _CadExOBJ.delete_OBJ_Writer

# Register OBJ_Writer in _CadExOBJ:
_CadExOBJ.OBJ_Writer_swigregister(OBJ_Writer)



