# This file modified for abstract classes
from abc import ABC, abstractmethod
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CadExSTEP
else:
    import _CadExSTEP

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _CadExSTEP.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExSTEP.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _CadExSTEP.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExSTEP.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExSTEP.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _CadExSTEP.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _CadExSTEP.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _CadExSTEP.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _CadExSTEP.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _CadExSTEP.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _CadExSTEP.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _CadExSTEP.SwigPyIterator_advance(self, n)

    def IsEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExSTEP.SwigPyIterator_IsEqual(self, x)

    def IsNotEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExSTEP.SwigPyIterator_IsNotEqual(self, x)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CadExSTEP:
_CadExSTEP.SwigPyIterator_swigregister(SwigPyIterator)

import cadexchanger.CadExCore
class STEP_ReaderParameters(cadexchanger.CadExCore.Base_ReaderParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    V1 = _CadExSTEP.STEP_ReaderParameters_V1
    V2 = _CadExSTEP.STEP_ReaderParameters_V2
    Auto = _CadExSTEP.STEP_ReaderParameters_Auto
    All = _CadExSTEP.STEP_ReaderParameters_All
    AdvancedBRep = _CadExSTEP.STEP_ReaderParameters_AdvancedBRep
    ManifoldSurface = _CadExSTEP.STEP_ReaderParameters_ManifoldSurface
    NonManifoldSurface = _CadExSTEP.STEP_ReaderParameters_NonManifoldSurface
    EdgeBasedWireframe = _CadExSTEP.STEP_ReaderParameters_EdgeBasedWireframe

    def __init__(self):
        _CadExSTEP.STEP_ReaderParameters_swiginit(self, _CadExSTEP.new_STEP_ReaderParameters())

    def PreferredBRepRepresentationType(self) -> "cadex::STEP_ReaderParameters::BRepRepresentationType":
        return _CadExSTEP.STEP_ReaderParameters_PreferredBRepRepresentationType(self)

    def Version(self) -> "cadex::STEP_ReaderParameters::VersionType":
        return _CadExSTEP.STEP_ReaderParameters_Version(self)

    def SetPreferredBRepRepresentationType(self, thePreferredBRepRepresentationType: "cadex::STEP_ReaderParameters::BRepRepresentationType") -> "void":
        return _CadExSTEP.STEP_ReaderParameters_SetPreferredBRepRepresentationType(self, thePreferredBRepRepresentationType)

    def SetVersion(self, theVersion: "cadex::STEP_ReaderParameters::VersionType") -> "void":
        return _CadExSTEP.STEP_ReaderParameters_SetVersion(self, theVersion)
    __swig_destroy__ = _CadExSTEP.delete_STEP_ReaderParameters

# Register STEP_ReaderParameters in _CadExSTEP:
_CadExSTEP.STEP_ReaderParameters_swigregister(STEP_ReaderParameters)

class STEP_Reader(cadexchanger.CadExCore.Base_Reader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExSTEP.STEP_Reader_swiginit(self, _CadExSTEP.new_STEP_Reader())

    def Parameters(self) -> "cadex::STEP_ReaderParameters const &":
        return _CadExSTEP.STEP_Reader_Parameters(self)

    def SetParameters(self, theParameters: "STEP_ReaderParameters") -> "void":
        return _CadExSTEP.STEP_Reader_SetParameters(self, theParameters)
    __swig_destroy__ = _CadExSTEP.delete_STEP_Reader

# Register STEP_Reader in _CadExSTEP:
_CadExSTEP.STEP_Reader_swigregister(STEP_Reader)

class STEP_WriterParameters(cadexchanger.CadExCore.Base_WriterParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    V1 = _CadExSTEP.STEP_WriterParameters_V1
    V2 = _CadExSTEP.STEP_WriterParameters_V2
    Auto = _CadExSTEP.STEP_WriterParameters_Auto
    AdvancedBRep = _CadExSTEP.STEP_WriterParameters_AdvancedBRep
    ManifoldSurface = _CadExSTEP.STEP_WriterParameters_ManifoldSurface
    NonManifoldSurface = _CadExSTEP.STEP_WriterParameters_NonManifoldSurface
    EdgeBasedWireframe = _CadExSTEP.STEP_WriterParameters_EdgeBasedWireframe
    Monolithic = _CadExSTEP.STEP_WriterParameters_Monolithic
    PerPart = _CadExSTEP.STEP_WriterParameters_PerPart
    PerAssembly = _CadExSTEP.STEP_WriterParameters_PerAssembly
    AP214 = _CadExSTEP.STEP_WriterParameters_AP214
    AP242 = _CadExSTEP.STEP_WriterParameters_AP242

    def __init__(self):
        _CadExSTEP.STEP_WriterParameters_swiginit(self, _CadExSTEP.new_STEP_WriterParameters())

    def PreferredBRepRepresentationType(self) -> "cadex::STEP_WriterParameters::BRepRepresentationType":
        return _CadExSTEP.STEP_WriterParameters_PreferredBRepRepresentationType(self)

    def ExternalReferencesMode(self) -> "cadex::STEP_WriterParameters::ExternalReferencesModeType":
        return _CadExSTEP.STEP_WriterParameters_ExternalReferencesMode(self)

    def Version(self) -> "cadex::STEP_WriterParameters::VersionType":
        return _CadExSTEP.STEP_WriterParameters_Version(self)

    def WritePCurves(self) -> "bool":
        return _CadExSTEP.STEP_WriterParameters_WritePCurves(self)

    def SchemaVersion(self, *args) -> "cadex::STEP_WriterParameters::SchemaType &":
        return _CadExSTEP.STEP_WriterParameters_SchemaVersion(self, *args)

    def SetPreferredBRepRepresentationType(self, thePreferredBRepRepresentationType: "cadex::STEP_WriterParameters::BRepRepresentationType") -> "void":
        return _CadExSTEP.STEP_WriterParameters_SetPreferredBRepRepresentationType(self, thePreferredBRepRepresentationType)

    def SetExternalReferencesMode(self, theExternalReferencesMode: "cadex::STEP_WriterParameters::ExternalReferencesModeType") -> "void":
        return _CadExSTEP.STEP_WriterParameters_SetExternalReferencesMode(self, theExternalReferencesMode)

    def SetVersion(self, theVersion: "cadex::STEP_WriterParameters::VersionType") -> "void":
        return _CadExSTEP.STEP_WriterParameters_SetVersion(self, theVersion)

    def SetWritePCurves(self, theWritePCurves: "bool") -> "void":
        return _CadExSTEP.STEP_WriterParameters_SetWritePCurves(self, theWritePCurves)
    __swig_destroy__ = _CadExSTEP.delete_STEP_WriterParameters

# Register STEP_WriterParameters in _CadExSTEP:
_CadExSTEP.STEP_WriterParameters_swigregister(STEP_WriterParameters)

class STEP_Writer(cadexchanger.CadExCore.Base_Writer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExSTEP.STEP_Writer_swiginit(self, _CadExSTEP.new_STEP_Writer())

    def Parameters(self) -> "cadex::STEP_WriterParameters const &":
        return _CadExSTEP.STEP_Writer_Parameters(self)

    def SetParameters(self, theParameters: "STEP_WriterParameters") -> "void":
        return _CadExSTEP.STEP_Writer_SetParameters(self, theParameters)
    __swig_destroy__ = _CadExSTEP.delete_STEP_Writer

# Register STEP_Writer in _CadExSTEP:
_CadExSTEP.STEP_Writer_swigregister(STEP_Writer)



