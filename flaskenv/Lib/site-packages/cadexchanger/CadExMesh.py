# This file modified for abstract classes
from abc import ABC, abstractmethod
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CadExMesh
else:
    import _CadExMesh

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _CadExMesh.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExMesh.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _CadExMesh.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExMesh.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExMesh.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _CadExMesh.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _CadExMesh.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _CadExMesh.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _CadExMesh.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _CadExMesh.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _CadExMesh.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _CadExMesh.SwigPyIterator_advance(self, n)

    def IsEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExMesh.SwigPyIterator_IsEqual(self, x)

    def IsNotEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExMesh.SwigPyIterator_IsNotEqual(self, x)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CadExMesh:
_CadExMesh.SwigPyIterator_swigregister(SwigPyIterator)

import cadexchanger.CadExCore
class Mesh_NetgenBaseWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def WriteFile(self, theNetgenMeshDS: "Mesh_NetgenMeshDS", theFileName: "cadex::Base_String const &") -> "bool":
        return _CadExMesh.Mesh_NetgenBaseWriter_WriteFile(self, theNetgenMeshDS, theFileName)
    __swig_destroy__ = _CadExMesh.delete_Mesh_NetgenBaseWriter

# Register Mesh_NetgenBaseWriter in _CadExMesh:
_CadExMesh.Mesh_NetgenBaseWriter_swigregister(Mesh_NetgenBaseWriter)

class Mesh_NetgenAbaqusWriter(Mesh_NetgenBaseWriter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExMesh.Mesh_NetgenAbaqusWriter_swiginit(self, _CadExMesh.new_Mesh_NetgenAbaqusWriter())
    __swig_destroy__ = _CadExMesh.delete_Mesh_NetgenAbaqusWriter

# Register Mesh_NetgenAbaqusWriter in _CadExMesh:
_CadExMesh.Mesh_NetgenAbaqusWriter_swigregister(Mesh_NetgenAbaqusWriter)

class Mesh_NetgenFluentWriter(Mesh_NetgenBaseWriter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExMesh.Mesh_NetgenFluentWriter_swiginit(self, _CadExMesh.new_Mesh_NetgenFluentWriter())
    __swig_destroy__ = _CadExMesh.delete_Mesh_NetgenFluentWriter

# Register Mesh_NetgenFluentWriter in _CadExMesh:
_CadExMesh.Mesh_NetgenFluentWriter_swigregister(Mesh_NetgenFluentWriter)

class Mesh_NetgenMeshDS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExMesh.Mesh_NetgenMeshDS_swiginit(self, _CadExMesh.new_Mesh_NetgenMeshDS())

    def SetFaceBCIndex(self, theFace: "ModelData_Face", theBCIndex: "int") -> "bool":
        return _CadExMesh.Mesh_NetgenMeshDS_SetFaceBCIndex(self, theFace, theBCIndex)

    def SetNumberOfBCs(self, theNum: "size_t") -> "void":
        return _CadExMesh.Mesh_NetgenMeshDS_SetNumberOfBCs(self, theNum)

    def SetBCName(self, theBCIndex: "int", theName: "cadex::Base_String const &") -> "void":
        return _CadExMesh.Mesh_NetgenMeshDS_SetBCName(self, theBCIndex, theName)

    def NumberOfPoints(self) -> "size_t":
        return _CadExMesh.Mesh_NetgenMeshDS_NumberOfPoints(self)

    def NumberOfBoundaryFaces(self) -> "size_t":
        return _CadExMesh.Mesh_NetgenMeshDS_NumberOfBoundaryFaces(self)

    def NumberOfSurfaceElements(self) -> "size_t":
        return _CadExMesh.Mesh_NetgenMeshDS_NumberOfSurfaceElements(self)

    def NumberOfVolumeElements(self) -> "size_t":
        return _CadExMesh.Mesh_NetgenMeshDS_NumberOfVolumeElements(self)

    def RefineUniform(self) -> "void":
        return _CadExMesh.Mesh_NetgenMeshDS_RefineUniform(self)

    def MakeSecondOrder(self) -> "void":
        return _CadExMesh.Mesh_NetgenMeshDS_MakeSecondOrder(self)
    __swig_destroy__ = _CadExMesh.delete_Mesh_NetgenMeshDS

# Register Mesh_NetgenMeshDS in _CadExMesh:
_CadExMesh.Mesh_NetgenMeshDS_swigregister(Mesh_NetgenMeshDS)

class Mesh_NetgenNeutralWriter(Mesh_NetgenBaseWriter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExMesh.Mesh_NetgenNeutralWriter_swiginit(self, _CadExMesh.new_Mesh_NetgenNeutralWriter())
    __swig_destroy__ = _CadExMesh.delete_Mesh_NetgenNeutralWriter

# Register Mesh_NetgenNeutralWriter in _CadExMesh:
_CadExMesh.Mesh_NetgenNeutralWriter_swigregister(Mesh_NetgenNeutralWriter)

class Mesh_NetgenOpenFOAMBCProvider(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExMesh.delete_Mesh_NetgenOpenFOAMBCProvider

    @abstractmethod
    def BCDescription(self, theBCIndex: "int", theDescriptionList: "cadex::Mesh_NetgenOpenFOAMBCProvider::DescriptionListType &") -> "bool":
        return _CadExMesh.Mesh_NetgenOpenFOAMBCProvider_BCDescription(self, theBCIndex, theDescriptionList)

    def __init__(self):
        if self.__class__ == Mesh_NetgenOpenFOAMBCProvider:
            _self = None
        else:
            _self = self
        _CadExMesh.Mesh_NetgenOpenFOAMBCProvider_swiginit(self, _CadExMesh.new_Mesh_NetgenOpenFOAMBCProvider(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExMesh.disown_Mesh_NetgenOpenFOAMBCProvider(self)
        return weakref.proxy(self)

# Register Mesh_NetgenOpenFOAMBCProvider in _CadExMesh:
_CadExMesh.Mesh_NetgenOpenFOAMBCProvider_swigregister(Mesh_NetgenOpenFOAMBCProvider)

class Mesh_NetgenOpenFOAMWriter(Mesh_NetgenBaseWriter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExMesh.Mesh_NetgenOpenFOAMWriter_swiginit(self, _CadExMesh.new_Mesh_NetgenOpenFOAMWriter())

    def SetBCProvider(self, theBCProvider: "std::shared_ptr< cadex::Mesh_NetgenOpenFOAMBCProvider > const &") -> "void":
        return _CadExMesh.Mesh_NetgenOpenFOAMWriter_SetBCProvider(self, theBCProvider)

    def SetCompression(self, theFlag: "bool") -> "void":
        return _CadExMesh.Mesh_NetgenOpenFOAMWriter_SetCompression(self, theFlag)
    __swig_destroy__ = _CadExMesh.delete_Mesh_NetgenOpenFOAMWriter

# Register Mesh_NetgenOpenFOAMWriter in _CadExMesh:
_CadExMesh.Mesh_NetgenOpenFOAMWriter_swigregister(Mesh_NetgenOpenFOAMWriter)

class Mesh_SMDS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExMesh.Mesh_SMDS_swiginit(self, _CadExMesh.new_Mesh_SMDS())

    def HasNetgenMeshDS(self) -> "bool":
        return _CadExMesh.Mesh_SMDS_HasNetgenMeshDS(self)

    def NetgenMeshDS(self, *args) -> "cadex::Mesh_NetgenMeshDS &":
        return _CadExMesh.Mesh_SMDS_NetgenMeshDS(self, *args)

    def IsNull(self) -> "bool":
        return _CadExMesh.Mesh_SMDS_IsNull(self)
    __swig_destroy__ = _CadExMesh.delete_Mesh_SMDS

# Register Mesh_SMDS in _CadExMesh:
_CadExMesh.Mesh_SMDS_swigregister(Mesh_SMDS)

class MeshAlgo_MefistoFactory(cadexchanger.CadExCore.Base_MeshAlgoFactory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExMesh.MeshAlgo_MefistoFactory_swiginit(self, _CadExMesh.new_MeshAlgo_MefistoFactory())

    def SetParameters(self, theParam: "MefistoFactory_Parameters") -> "void":
        return _CadExMesh.MeshAlgo_MefistoFactory_SetParameters(self, theParam)
    __swig_destroy__ = _CadExMesh.delete_MeshAlgo_MefistoFactory

# Register MeshAlgo_MefistoFactory in _CadExMesh:
_CadExMesh.MeshAlgo_MefistoFactory_swigregister(MeshAlgo_MefistoFactory)

class MefistoFactory_Parameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExMesh.MefistoFactory_Parameters_swiginit(self, _CadExMesh.new_MefistoFactory_Parameters(*args))

    def GlobAbsMaxSize(self) -> "double":
        return _CadExMesh.MefistoFactory_Parameters_GlobAbsMaxSize(self)

    def SetGlobAbsMaxSize(self, theGlobAbsMaxSize: "double") -> "void":
        return _CadExMesh.MefistoFactory_Parameters_SetGlobAbsMaxSize(self, theGlobAbsMaxSize)

    def GlobRelMaxSize(self) -> "double":
        return _CadExMesh.MefistoFactory_Parameters_GlobRelMaxSize(self)

    def SetGlobRelMaxSize(self, theGlobRelMaxSize: "double") -> "void":
        return _CadExMesh.MefistoFactory_Parameters_SetGlobRelMaxSize(self, theGlobRelMaxSize)

    def LocRelMaxSize(self) -> "double":
        return _CadExMesh.MefistoFactory_Parameters_LocRelMaxSize(self)

    def SetLocRelMaxSize(self, theLocRelMaxSize: "double") -> "void":
        return _CadExMesh.MefistoFactory_Parameters_SetLocRelMaxSize(self, theLocRelMaxSize)
    __swig_destroy__ = _CadExMesh.delete_MefistoFactory_Parameters

# Register MefistoFactory_Parameters in _CadExMesh:
_CadExMesh.MefistoFactory_Parameters_swigregister(MefistoFactory_Parameters)

class MeshAlgo_NetgenFactory(cadexchanger.CadExCore.Base_MeshAlgoFactory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExMesh.MeshAlgo_NetgenFactory_swiginit(self, _CadExMesh.new_MeshAlgo_NetgenFactory())

    def SetParameters(self, theParam: "NetgenFactory_Parameters") -> "void":
        return _CadExMesh.MeshAlgo_NetgenFactory_SetParameters(self, theParam)
    __swig_destroy__ = _CadExMesh.delete_MeshAlgo_NetgenFactory

# Register MeshAlgo_NetgenFactory in _CadExMesh:
_CadExMesh.MeshAlgo_NetgenFactory_swigregister(MeshAlgo_NetgenFactory)

class NetgenFactory_Parameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    VeryCoarse = _CadExMesh.NetgenFactory_Parameters_VeryCoarse
    Coarse = _CadExMesh.NetgenFactory_Parameters_Coarse
    Moderate = _CadExMesh.NetgenFactory_Parameters_Moderate
    Fine = _CadExMesh.NetgenFactory_Parameters_Fine
    VeryFine = _CadExMesh.NetgenFactory_Parameters_VeryFine
    Custom = _CadExMesh.NetgenFactory_Parameters_Custom

    def __init__(self):
        _CadExMesh.NetgenFactory_Parameters_swiginit(self, _CadExMesh.new_NetgenFactory_Parameters())

    def SetGranularity(self, theVal: "cadex::MeshAlgo_NetgenFactory::Parameters::Granularity") -> "void":
        return _CadExMesh.NetgenFactory_Parameters_SetGranularity(self, theVal)

    def GlobAbsMaxSize(self) -> "double":
        return _CadExMesh.NetgenFactory_Parameters_GlobAbsMaxSize(self)

    def SetGlobAbsMaxSize(self, theGlobAbsMaxSize: "double") -> "void":
        return _CadExMesh.NetgenFactory_Parameters_SetGlobAbsMaxSize(self, theGlobAbsMaxSize)

    def GlobRelMaxSize(self) -> "double":
        return _CadExMesh.NetgenFactory_Parameters_GlobRelMaxSize(self)

    def SetGlobRelMaxSize(self, theGlobRelMaxSize: "double") -> "void":
        return _CadExMesh.NetgenFactory_Parameters_SetGlobRelMaxSize(self, theGlobRelMaxSize)

    def LocRelMaxSize(self) -> "double":
        return _CadExMesh.NetgenFactory_Parameters_LocRelMaxSize(self)

    def SetLocRelMaxSize(self, theLocRelMaxSize: "double") -> "void":
        return _CadExMesh.NetgenFactory_Parameters_SetLocRelMaxSize(self, theLocRelMaxSize)

    def GlobAbsMinSize(self) -> "double":
        return _CadExMesh.NetgenFactory_Parameters_GlobAbsMinSize(self)

    def SetGlobAbsMinSize(self, theGlobAbsMinSize: "double") -> "void":
        return _CadExMesh.NetgenFactory_Parameters_SetGlobAbsMinSize(self, theGlobAbsMinSize)

    def GlobRelMinSize(self) -> "double":
        return _CadExMesh.NetgenFactory_Parameters_GlobRelMinSize(self)

    def SetGlobRelMinSize(self, theGlobRelMinSize: "double") -> "void":
        return _CadExMesh.NetgenFactory_Parameters_SetGlobRelMinSize(self, theGlobRelMinSize)

    def Grading(self) -> "double":
        return _CadExMesh.NetgenFactory_Parameters_Grading(self)

    def SetGrading(self, theGrading: "double") -> "void":
        return _CadExMesh.NetgenFactory_Parameters_SetGrading(self, theGrading)

    def SegPerEdge(self) -> "unsigned int":
        return _CadExMesh.NetgenFactory_Parameters_SegPerEdge(self)

    def SetSegPerEdge(self, theSegPerEdge: "unsigned int") -> "void":
        return _CadExMesh.NetgenFactory_Parameters_SetSegPerEdge(self, theSegPerEdge)

    def Crv(self) -> "double":
        return _CadExMesh.NetgenFactory_Parameters_Crv(self)

    def SetCrv(self, theCrv: "double") -> "void":
        return _CadExMesh.NetgenFactory_Parameters_SetCrv(self, theCrv)

    def OptSteps(self) -> "unsigned int":
        return _CadExMesh.NetgenFactory_Parameters_OptSteps(self)

    def SetOptSteps(self, theOptSteps: "unsigned int") -> "void":
        return _CadExMesh.NetgenFactory_Parameters_SetOptSteps(self, theOptSteps)

    def IsVolumeMesh(self) -> "bool":
        return _CadExMesh.NetgenFactory_Parameters_IsVolumeMesh(self)

    def SetIsVolumeMesh(self, theIsVolumeMesh: "bool") -> "void":
        return _CadExMesh.NetgenFactory_Parameters_SetIsVolumeMesh(self, theIsVolumeMesh)

    def VolumeOptSteps(self) -> "unsigned int":
        return _CadExMesh.NetgenFactory_Parameters_VolumeOptSteps(self)

    def SetVolumeOptSteps(self, theVolumeOptSteps: "unsigned int") -> "void":
        return _CadExMesh.NetgenFactory_Parameters_SetVolumeOptSteps(self, theVolumeOptSteps)

    def Granularity(self) -> "cadex::MeshAlgo_NetgenFactory::Parameters::Granularity":
        return _CadExMesh.NetgenFactory_Parameters_Granularity(self)
    __swig_destroy__ = _CadExMesh.delete_NetgenFactory_Parameters

# Register NetgenFactory_Parameters in _CadExMesh:
_CadExMesh.NetgenFactory_Parameters_swigregister(NetgenFactory_Parameters)



