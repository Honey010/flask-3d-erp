# This file modified for abstract classes
from abc import ABC, abstractmethod
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CadExView
else:
    import _CadExView

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _CadExView.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExView.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _CadExView.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExView.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExView.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _CadExView.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _CadExView.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _CadExView.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _CadExView.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _CadExView.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _CadExView.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _CadExView.SwigPyIterator_advance(self, n)

    def IsEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExView.SwigPyIterator_IsEqual(self, x)

    def IsNotEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExView.SwigPyIterator_IsNotEqual(self, x)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CadExView:
_CadExView.SwigPyIterator_swigregister(SwigPyIterator)

import cadexchanger.CadExCore
ModelPrs_AT_X = _CadExView.ModelPrs_AT_X
ModelPrs_AT_Y = _CadExView.ModelPrs_AT_Y
ModelPrs_AT_Z = _CadExView.ModelPrs_AT_Z
ModelPrs_CMT_Xpos = _CadExView.ModelPrs_CMT_Xpos
ModelPrs_CMT_Ypos = _CadExView.ModelPrs_CMT_Ypos
ModelPrs_CMT_Zpos = _CadExView.ModelPrs_CMT_Zpos
ModelPrs_CMT_Xneg = _CadExView.ModelPrs_CMT_Xneg
ModelPrs_CMT_Yneg = _CadExView.ModelPrs_CMT_Yneg
ModelPrs_CMT_Zneg = _CadExView.ModelPrs_CMT_Zneg
ModelPrs_CMT_XposYpos = _CadExView.ModelPrs_CMT_XposYpos
ModelPrs_CMT_XposZpos = _CadExView.ModelPrs_CMT_XposZpos
ModelPrs_CMT_YposZpos = _CadExView.ModelPrs_CMT_YposZpos
ModelPrs_CMT_XnegYneg = _CadExView.ModelPrs_CMT_XnegYneg
ModelPrs_CMT_XnegYpos = _CadExView.ModelPrs_CMT_XnegYpos
ModelPrs_CMT_XnegZneg = _CadExView.ModelPrs_CMT_XnegZneg
ModelPrs_CMT_XnegZpos = _CadExView.ModelPrs_CMT_XnegZpos
ModelPrs_CMT_YnegZneg = _CadExView.ModelPrs_CMT_YnegZneg
ModelPrs_CMT_YnegZpos = _CadExView.ModelPrs_CMT_YnegZpos
ModelPrs_CMT_XposYneg = _CadExView.ModelPrs_CMT_XposYneg
ModelPrs_CMT_XposZneg = _CadExView.ModelPrs_CMT_XposZneg
ModelPrs_CMT_YposZneg = _CadExView.ModelPrs_CMT_YposZneg
ModelPrs_CMT_XposYposZpos = _CadExView.ModelPrs_CMT_XposYposZpos
ModelPrs_CMT_XposYnegZpos = _CadExView.ModelPrs_CMT_XposYnegZpos
ModelPrs_CMT_XposYposZneg = _CadExView.ModelPrs_CMT_XposYposZneg
ModelPrs_CMT_XnegYposZpos = _CadExView.ModelPrs_CMT_XnegYposZpos
ModelPrs_CMT_XposYnegZneg = _CadExView.ModelPrs_CMT_XposYnegZneg
ModelPrs_CMT_XnegYposZneg = _CadExView.ModelPrs_CMT_XnegYposZneg
ModelPrs_CMT_XnegYnegZpos = _CadExView.ModelPrs_CMT_XnegYnegZpos
ModelPrs_CMT_XnegYnegZneg = _CadExView.ModelPrs_CMT_XnegYnegZneg
ModelPrs_CMT_Front = _CadExView.ModelPrs_CMT_Front
ModelPrs_CMT_Back = _CadExView.ModelPrs_CMT_Back
ModelPrs_CMT_Top = _CadExView.ModelPrs_CMT_Top
ModelPrs_CMT_Bottom = _CadExView.ModelPrs_CMT_Bottom
ModelPrs_CMT_Left = _CadExView.ModelPrs_CMT_Left
ModelPrs_CMT_Right = _CadExView.ModelPrs_CMT_Right
ModelPrs_CMT_Default = _CadExView.ModelPrs_CMT_Default
ModelPrs_CPT_Isometric = _CadExView.ModelPrs_CPT_Isometric
ModelPrs_CPT_Perspective = _CadExView.ModelPrs_CPT_Perspective
ModelPrs_CT_DefaultCursor = _CadExView.ModelPrs_CT_DefaultCursor
ModelPrs_CT_ZoomCursor = _CadExView.ModelPrs_CT_ZoomCursor
ModelPrs_CT_SelectCursor = _CadExView.ModelPrs_CT_SelectCursor
ModelPrs_CT_PanCursor = _CadExView.ModelPrs_CT_PanCursor
ModelPrs_CT_GlobalPanCursor = _CadExView.ModelPrs_CT_GlobalPanCursor
ModelPrs_CT_RotateCursor = _CadExView.ModelPrs_CT_RotateCursor
ModelPrs_CT_TranslateCursor = _CadExView.ModelPrs_CT_TranslateCursor
ModelPrs_DM_Wireframe = _CadExView.ModelPrs_DM_Wireframe
ModelPrs_DM_Shaded = _CadExView.ModelPrs_DM_Shaded
ModelPrs_DM_ShadedWithBoundaries = _CadExView.ModelPrs_DM_ShadedWithBoundaries
ModelPrs_DM_SurfaceWireframe = _CadExView.ModelPrs_DM_SurfaceWireframe
ModelPrs_DM_ShadedWithSurfaceBoundaries = _CadExView.ModelPrs_DM_ShadedWithSurfaceBoundaries
ModelPrs_DM_Undefined = _CadExView.ModelPrs_DM_Undefined
ModelPrs_KM_NoModifier = _CadExView.ModelPrs_KM_NoModifier
ModelPrs_KM_ShiftModifier = _CadExView.ModelPrs_KM_ShiftModifier
ModelPrs_KM_ControlModifier = _CadExView.ModelPrs_KM_ControlModifier
ModelPrs_KM_AltModifier = _CadExView.ModelPrs_KM_AltModifier
ModelPrs_MM_None = _CadExView.ModelPrs_MM_None
ModelPrs_MM_Translation = _CadExView.ModelPrs_MM_Translation
ModelPrs_MM_Rotation = _CadExView.ModelPrs_MM_Rotation
ModelPrs_MT_Distance = _CadExView.ModelPrs_MT_Distance
ModelPrs_MT_Radius = _CadExView.ModelPrs_MT_Radius
ModelPrs_MT_Diameter = _CadExView.ModelPrs_MT_Diameter
ModelPrs_MT_AngleBetweenPlanes = _CadExView.ModelPrs_MT_AngleBetweenPlanes
ModelPrs_MT_AngleBetweenVertexes = _CadExView.ModelPrs_MT_AngleBetweenVertexes
ModelPrs_MT_Undefined = _CadExView.ModelPrs_MT_Undefined
ModelPrs_MB_NoButton = _CadExView.ModelPrs_MB_NoButton
ModelPrs_MB_LeftButton = _CadExView.ModelPrs_MB_LeftButton
ModelPrs_MB_RightButton = _CadExView.ModelPrs_MB_RightButton
ModelPrs_MB_MiddleButton = _CadExView.ModelPrs_MB_MiddleButton
ModelPrs_MM_Normal = _CadExView.ModelPrs_MM_Normal
ModelPrs_MM_FitArea = _CadExView.ModelPrs_MM_FitArea
ModelPrs_SFT_None = _CadExView.ModelPrs_SFT_None
ModelPrs_SFT_CircleEdgeFilter = _CadExView.ModelPrs_SFT_CircleEdgeFilter
ModelPrs_SFT_PlanarFaceFilter = _CadExView.ModelPrs_SFT_PlanarFaceFilter
ModelPrs_SFT_RevolFaceFilter = _CadExView.ModelPrs_SFT_RevolFaceFilter
class ModelPrs_SelectionManager(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Select(self, theSelection: "ModelPrs_Selection") -> "void":
        return _CadExView.ModelPrs_SelectionManager_Select(self, theSelection)

    def Deselect(self, theSelection: "ModelPrs_Selection") -> "void":
        return _CadExView.ModelPrs_SelectionManager_Deselect(self, theSelection)

    def SetSelection(self, theSelection: "ModelPrs_Selection") -> "void":
        return _CadExView.ModelPrs_SelectionManager_SetSelection(self, theSelection)

    def DeselectAll(self) -> "void":
        return _CadExView.ModelPrs_SelectionManager_DeselectAll(self)

    def SetFilter(self, theFilter: "cadex::ModelPrs_SelectionFilterType") -> "void":
        return _CadExView.ModelPrs_SelectionManager_SetFilter(self, theFilter)

    def Register(self, theObserver: "ModelPrs_SelectionChangesObserver") -> "void":
        return _CadExView.ModelPrs_SelectionManager_Register(self, theObserver)

    def Unregister(self) -> "void":
        return _CadExView.ModelPrs_SelectionManager_Unregister(self)
    __swig_destroy__ = _CadExView.delete_ModelPrs_SelectionManager

# Register ModelPrs_SelectionManager in _CadExView:
_CadExView.ModelPrs_SelectionManager_swigregister(ModelPrs_SelectionManager)

ModelPrs_SM_None = _CadExView.ModelPrs_SM_None
ModelPrs_SM_Node = _CadExView.ModelPrs_SM_Node
ModelPrs_SM_Solid = _CadExView.ModelPrs_SM_Solid
ModelPrs_SM_Shell = _CadExView.ModelPrs_SM_Shell
ModelPrs_SM_Face = _CadExView.ModelPrs_SM_Face
ModelPrs_SM_Wire = _CadExView.ModelPrs_SM_Wire
ModelPrs_SM_Edge = _CadExView.ModelPrs_SM_Edge
ModelPrs_SM_Vertex = _CadExView.ModelPrs_SM_Vertex
ModelPrs_SM_Undefined = _CadExView.ModelPrs_SM_Undefined
ModelPrs_VM_Visible = _CadExView.ModelPrs_VM_Visible
ModelPrs_VM_GhostlyHidden = _CadExView.ModelPrs_VM_GhostlyHidden
ModelPrs_VM_Hidden = _CadExView.ModelPrs_VM_Hidden
ModelPrs_VM_Undefined = _CadExView.ModelPrs_VM_Undefined
class ModelPrs_BackgroundStyle(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExView.ModelPrs_BackgroundStyle_swiginit(self, _CadExView.new_ModelPrs_BackgroundStyle(*args))

    def IsGradient(self) -> "bool":
        return _CadExView.ModelPrs_BackgroundStyle_IsGradient(self)

    def SetColor(self, theColor: "ModelData_Color") -> "void":
        return _CadExView.ModelPrs_BackgroundStyle_SetColor(self, theColor)

    def TopColor(self) -> "cadex::ModelData_Color const &":
        return _CadExView.ModelPrs_BackgroundStyle_TopColor(self)

    def SetTopColor(self, theColor: "ModelData_Color") -> "void":
        return _CadExView.ModelPrs_BackgroundStyle_SetTopColor(self, theColor)

    def BottomColor(self) -> "cadex::ModelData_Color const &":
        return _CadExView.ModelPrs_BackgroundStyle_BottomColor(self)

    def SetBottomColor(self, theColor: "ModelData_Color") -> "void":
        return _CadExView.ModelPrs_BackgroundStyle_SetBottomColor(self, theColor)
    __swig_destroy__ = _CadExView.delete_ModelPrs_BackgroundStyle

# Register ModelPrs_BackgroundStyle in _CadExView:
_CadExView.ModelPrs_BackgroundStyle_swigregister(ModelPrs_BackgroundStyle)

class ModelPrs_Exploder(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExView.ModelPrs_Exploder_swiginit(self, _CadExView.new_ModelPrs_Exploder())

    def SetValue(self, theValue: "double") -> "void":
        return _CadExView.ModelPrs_Exploder_SetValue(self, theValue)

    def Value(self) -> "double":
        return _CadExView.ModelPrs_Exploder_Value(self)
    __swig_destroy__ = _CadExView.delete_ModelPrs_Exploder

# Register ModelPrs_Exploder in _CadExView:
_CadExView.ModelPrs_Exploder_swigregister(ModelPrs_Exploder)

class ModelPrs_Geometry(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExView.delete_ModelPrs_Geometry

    def Accept(self, theVisitor: "ModelPrs_GeometryVisitor") -> "void":
        return _CadExView.ModelPrs_Geometry_Accept(self, theVisitor)

    def Type(self) -> "ModelPrs_GeometryType":
        return _CadExView.ModelPrs_Geometry_Type(self)

    def __init__(self, theImpl: "cadex::ModelPrs_Geometry::ImplType const *"):
        _CadExView.ModelPrs_Geometry_swiginit(self, _CadExView.new_ModelPrs_Geometry(theImpl))

# Register ModelPrs_Geometry in _CadExView:
_CadExView.ModelPrs_Geometry_swigregister(ModelPrs_Geometry)


def IsNotEqual(*args) -> "bool":
    return _CadExView.IsNotEqual(*args)
class ModelPrs_GeometryHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, theGeometry: "ModelPrs_Geometry") -> "size_t":
        return _CadExView.ModelPrs_GeometryHash___call__(self, theGeometry)

    def __init__(self):
        _CadExView.ModelPrs_GeometryHash_swiginit(self, _CadExView.new_ModelPrs_GeometryHash())
    __swig_destroy__ = _CadExView.delete_ModelPrs_GeometryHash

# Register ModelPrs_GeometryHash in _CadExView:
_CadExView.ModelPrs_GeometryHash_swigregister(ModelPrs_GeometryHash)

ModelPrs_GT_Body = _CadExView.ModelPrs_GT_Body
ModelPrs_GT_BRepRepresentation = _CadExView.ModelPrs_GT_BRepRepresentation
ModelPrs_GT_PolyVertexSet = _CadExView.ModelPrs_GT_PolyVertexSet
ModelPrs_GT_PolyRepresentation = _CadExView.ModelPrs_GT_PolyRepresentation
ModelPrs_GT_Measurement = _CadExView.ModelPrs_GT_Measurement
ModelPrs_GT_PMI = _CadExView.ModelPrs_GT_PMI
ModelPrs_GT_Drawing = _CadExView.ModelPrs_GT_Drawing
ModelPrs_GT_Undefined = _CadExView.ModelPrs_GT_Undefined
class ModelPrs_GeometryVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExView.delete_ModelPrs_GeometryVisitor

    @abstractmethod
    def VisitBody(self, theShape: "cadex::ModelData_Body const &", theRep: "cadex::ModelData_BRepRepresentation const &") -> "void":
        return _CadExView.ModelPrs_GeometryVisitor_VisitBody(self, theShape, theRep)

    @abstractmethod
    def VisitBRepRepresentation(self, theRep: "cadex::ModelData_BRepRepresentation const &") -> "void":
        return _CadExView.ModelPrs_GeometryVisitor_VisitBRepRepresentation(self, theRep)

    @abstractmethod
    def VisitPolyVertexSet(self, thePVS: "cadex::ModelData_PolyVertexSet const &") -> "void":
        return _CadExView.ModelPrs_GeometryVisitor_VisitPolyVertexSet(self, thePVS)

    @abstractmethod
    def VisitPolyRepresentation(self, theRep: "cadex::ModelData_PolyRepresentation const &") -> "void":
        return _CadExView.ModelPrs_GeometryVisitor_VisitPolyRepresentation(self, theRep)

    @abstractmethod
    def VisitMeasurement(self, theMeasurement: "ModelPrs_Measurement") -> "void":
        return _CadExView.ModelPrs_GeometryVisitor_VisitMeasurement(self, theMeasurement)

    @abstractmethod
    def VisitPMIGraphicalElement(self, thePMIGraphicalElement: "cadex::ModelData_PMIGraphicalElement const &") -> "void":
        return _CadExView.ModelPrs_GeometryVisitor_VisitPMIGraphicalElement(self, thePMIGraphicalElement)

    @abstractmethod
    def VisitDrawingElement(self, theDrawingElement: "cadex::ModelData_DrawingElement const &") -> "void":
        return _CadExView.ModelPrs_GeometryVisitor_VisitDrawingElement(self, theDrawingElement)

    def __init__(self):
        if self.__class__ == ModelPrs_GeometryVisitor:
            _self = None
        else:
            _self = self
        _CadExView.ModelPrs_GeometryVisitor_swiginit(self, _CadExView.new_ModelPrs_GeometryVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExView.disown_ModelPrs_GeometryVisitor(self)
        return weakref.proxy(self)

# Register ModelPrs_GeometryVisitor in _CadExView:
_CadExView.ModelPrs_GeometryVisitor_swigregister(ModelPrs_GeometryVisitor)

class ModelPrs_GeometryVoidVisitor(ModelPrs_GeometryVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def VisitBody(self, theShape: "cadex::ModelData_Body const &", theRep: "cadex::ModelData_BRepRepresentation const &") -> "void":
        return _CadExView.ModelPrs_GeometryVoidVisitor_VisitBody(self, theShape, theRep)

    def VisitBRepRepresentation(self, theRep: "cadex::ModelData_BRepRepresentation const &") -> "void":
        return _CadExView.ModelPrs_GeometryVoidVisitor_VisitBRepRepresentation(self, theRep)

    def VisitPolyVertexSet(self, thePVS: "cadex::ModelData_PolyVertexSet const &") -> "void":
        return _CadExView.ModelPrs_GeometryVoidVisitor_VisitPolyVertexSet(self, thePVS)

    def VisitPolyRepresentation(self, theRep: "cadex::ModelData_PolyRepresentation const &") -> "void":
        return _CadExView.ModelPrs_GeometryVoidVisitor_VisitPolyRepresentation(self, theRep)

    def VisitMeasurement(self, theMeasurement: "ModelPrs_Measurement") -> "void":
        return _CadExView.ModelPrs_GeometryVoidVisitor_VisitMeasurement(self, theMeasurement)

    def VisitPMIGraphicalElement(self, thePMIGraphicalElement: "cadex::ModelData_PMIGraphicalElement const &") -> "void":
        return _CadExView.ModelPrs_GeometryVoidVisitor_VisitPMIGraphicalElement(self, thePMIGraphicalElement)

    def VisitDrawingElement(self, theDrawingElement: "cadex::ModelData_DrawingElement const &") -> "void":
        return _CadExView.ModelPrs_GeometryVoidVisitor_VisitDrawingElement(self, theDrawingElement)

    def __init__(self):
        if self.__class__ == ModelPrs_GeometryVoidVisitor:
            _self = None
        else:
            _self = self
        _CadExView.ModelPrs_GeometryVoidVisitor_swiginit(self, _CadExView.new_ModelPrs_GeometryVoidVisitor(_self, ))
    __swig_destroy__ = _CadExView.delete_ModelPrs_GeometryVoidVisitor
    def __disown__(self):
        self.this.disown()
        _CadExView.disown_ModelPrs_GeometryVoidVisitor(self)
        return weakref.proxy(self)

# Register ModelPrs_GeometryVoidVisitor in _CadExView:
_CadExView.ModelPrs_GeometryVoidVisitor_swigregister(ModelPrs_GeometryVoidVisitor)

class ModelPrs_Manipulator(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AttachedTo(self) -> "cadex::ModelPrs_SceneNode":
        return _CadExView.ModelPrs_Manipulator_AttachedTo(self)

    def AttachTo(self, theSceneNode: "ModelPrs_SceneNode") -> "void":
        return _CadExView.ModelPrs_Manipulator_AttachTo(self, theSceneNode)

    def Detach(self) -> "void":
        return _CadExView.ModelPrs_Manipulator_Detach(self)

    def Mode(self) -> "cadex::ModelPrs_ManipulatorMode":
        return _CadExView.ModelPrs_Manipulator_Mode(self)

    def SetMode(self, theMode: "cadex::ModelPrs_ManipulatorMode const &") -> "void":
        return _CadExView.ModelPrs_Manipulator_SetMode(self, theMode)

    def ResetTransformation(self) -> "void":
        return _CadExView.ModelPrs_Manipulator_ResetTransformation(self)

    def Register(self, theObserver: "ModelPrs_ManipulatorObserver") -> "void":
        return _CadExView.ModelPrs_Manipulator_Register(self, theObserver)

    def Unregister(self) -> "void":
        return _CadExView.ModelPrs_Manipulator_Unregister(self)
    __swig_destroy__ = _CadExView.delete_ModelPrs_Manipulator

# Register ModelPrs_Manipulator in _CadExView:
_CadExView.ModelPrs_Manipulator_swigregister(ModelPrs_Manipulator)

class ModelPrs_ManipulatorObserver(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ModelPrs_ManipulatorObserver:
            _self = None
        else:
            _self = self
        _CadExView.ModelPrs_ManipulatorObserver_swiginit(self, _CadExView.new_ModelPrs_ManipulatorObserver(_self, ))
    __swig_destroy__ = _CadExView.delete_ModelPrs_ManipulatorObserver

    @abstractmethod
    def ModeChanged(self, theMode: "cadex::ModelPrs_ManipulatorMode", theDirection: "cadex::ModelData_Direction const &") -> "void":
        return _CadExView.ModelPrs_ManipulatorObserver_ModeChanged(self, theMode, theDirection)

    @abstractmethod
    def StartTransformation(self) -> "void":
        return _CadExView.ModelPrs_ManipulatorObserver_StartTransformation(self)

    @abstractmethod
    def Transformed(self, theLocalTrsf: "cadex::ModelData_Transformation const &", theGlobalTrsf: "cadex::ModelData_Transformation const &", theValue: "double") -> "void":
        return _CadExView.ModelPrs_ManipulatorObserver_Transformed(self, theLocalTrsf, theGlobalTrsf, theValue)

    @abstractmethod
    def StopTransformation(self) -> "void":
        return _CadExView.ModelPrs_ManipulatorObserver_StopTransformation(self)
    def __disown__(self):
        self.this.disown()
        _CadExView.disown_ModelPrs_ManipulatorObserver(self)
        return weakref.proxy(self)

# Register ModelPrs_ManipulatorObserver in _CadExView:
_CadExView.ModelPrs_ManipulatorObserver_swigregister(ModelPrs_ManipulatorObserver)

class ModelPrs_Measurement(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExView.ModelPrs_Measurement_swiginit(self, _CadExView.new_ModelPrs_Measurement())

    def Type(self) -> "cadex::ModelPrs_MeasurementType":
        return _CadExView.ModelPrs_Measurement_Type(self)

    def Value(self) -> "double":
        return _CadExView.ModelPrs_Measurement_Value(self)

    def LengthUnit(self) -> "cadex::Base_LengthUnit":
        return _CadExView.ModelPrs_Measurement_LengthUnit(self)

    def SetLengthUnit(self, theLengthUnit: "cadex::Base_LengthUnit") -> "void":
        return _CadExView.ModelPrs_Measurement_SetLengthUnit(self, theLengthUnit)

    def AngleUnit(self) -> "Base_AngleUnit":
        return _CadExView.ModelPrs_Measurement_AngleUnit(self)

    def SetAngleUnit(self, theAngleUnit: "Base_AngleUnit") -> "void":
        return _CadExView.ModelPrs_Measurement_SetAngleUnit(self, theAngleUnit)

    def Size(self) -> "double":
        return _CadExView.ModelPrs_Measurement_Size(self)

    def SetSize(self, theSize: "double") -> "void":
        return _CadExView.ModelPrs_Measurement_SetSize(self, theSize)

    def SizeOfFlyOut(self) -> "double":
        return _CadExView.ModelPrs_Measurement_SizeOfFlyOut(self)

    def SetSizeOfFlyOut(self, theSizeOfFlyOut: "double") -> "void":
        return _CadExView.ModelPrs_Measurement_SetSizeOfFlyOut(self, theSizeOfFlyOut)
    __swig_destroy__ = _CadExView.delete_ModelPrs_Measurement

# Register ModelPrs_Measurement in _CadExView:
_CadExView.ModelPrs_Measurement_swigregister(ModelPrs_Measurement)


def IsEqual(*args) -> "bool":
    return _CadExView.IsEqual(*args)
class ModelPrs_MeasurementFactory(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExView.ModelPrs_MeasurementFactory_swiginit(self, _CadExView.new_ModelPrs_MeasurementFactory())

    def CreateDistance(self, theFirstShape: "cadex::ModelData_Shape const &", theSecondShape: "cadex::ModelData_Shape const &") -> "cadex::ModelPrs_Measurement":
        return _CadExView.ModelPrs_MeasurementFactory_CreateDistance(self, theFirstShape, theSecondShape)

    def CreateMinorRadius(self, theShape: "cadex::ModelData_Shape const &") -> "cadex::ModelPrs_Measurement":
        return _CadExView.ModelPrs_MeasurementFactory_CreateMinorRadius(self, theShape)

    def CreateMajorRadius(self, theShape: "cadex::ModelData_Shape const &") -> "cadex::ModelPrs_Measurement":
        return _CadExView.ModelPrs_MeasurementFactory_CreateMajorRadius(self, theShape)

    def CreateMinorDiameter(self, theShape: "cadex::ModelData_Shape const &") -> "cadex::ModelPrs_Measurement":
        return _CadExView.ModelPrs_MeasurementFactory_CreateMinorDiameter(self, theShape)

    def CreateMajorDiameter(self, theShape: "cadex::ModelData_Shape const &") -> "cadex::ModelPrs_Measurement":
        return _CadExView.ModelPrs_MeasurementFactory_CreateMajorDiameter(self, theShape)

    def CreateAngle(self, *args) -> "cadex::ModelPrs_Measurement":
        return _CadExView.ModelPrs_MeasurementFactory_CreateAngle(self, *args)
    __swig_destroy__ = _CadExView.delete_ModelPrs_MeasurementFactory

# Register ModelPrs_MeasurementFactory in _CadExView:
_CadExView.ModelPrs_MeasurementFactory_swigregister(ModelPrs_MeasurementFactory)

class ModelPrs_OffscreenViewPort(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExView.ModelPrs_OffscreenViewPort_swiginit(self, _CadExView.new_ModelPrs_OffscreenViewPort())

    def AttachToScene(self, theScene: "ModelPrs_Scene") -> "bool":
        return _CadExView.ModelPrs_OffscreenViewPort_AttachToScene(self, theScene)

    def Resize(self, theWidth: "unsigned int", theHeight: "unsigned int") -> "void":
        return _CadExView.ModelPrs_OffscreenViewPort_Resize(self, theWidth, theHeight)

    def GrabToImage(self, thePath: "Base_UTF16String") -> "bool":
        return _CadExView.ModelPrs_OffscreenViewPort_GrabToImage(self, thePath)

    def FitAll(self) -> "void":
        return _CadExView.ModelPrs_OffscreenViewPort_FitAll(self)

    def FitBox(self, theBox: "cadex::ModelData_Box const &") -> "void":
        return _CadExView.ModelPrs_OffscreenViewPort_FitBox(self, theBox)

    def RotateToAngle(self, theType: "cadex::ModelPrs_AxisType", theAngle: "double") -> "void":
        return _CadExView.ModelPrs_OffscreenViewPort_RotateToAngle(self, theType, theAngle)

    def BackgroundStyle(self) -> "cadex::ModelPrs_BackgroundStyle const &":
        return _CadExView.ModelPrs_OffscreenViewPort_BackgroundStyle(self)

    def SetBackgroundStyle(self, theStyle: "ModelPrs_BackgroundStyle") -> "void":
        return _CadExView.ModelPrs_OffscreenViewPort_SetBackgroundStyle(self, theStyle)

    def ViewCubeStyle(self) -> "cadex::ModelPrs_ViewCubeStyle const &":
        return _CadExView.ModelPrs_OffscreenViewPort_ViewCubeStyle(self)

    def SetViewCubeStyle(self, theStyle: "ModelPrs_ViewCubeStyle") -> "void":
        return _CadExView.ModelPrs_OffscreenViewPort_SetViewCubeStyle(self, theStyle)

    def ViewCubeGeometry(self) -> "cadex::ModelData_Box2d const &":
        return _CadExView.ModelPrs_OffscreenViewPort_ViewCubeGeometry(self)

    def SetViewCubeGeometry(self, theBox: "cadex::ModelData_Box2d const &") -> "void":
        return _CadExView.ModelPrs_OffscreenViewPort_SetViewCubeGeometry(self, theBox)

    def ViewCubeEnabled(self) -> "bool":
        return _CadExView.ModelPrs_OffscreenViewPort_ViewCubeEnabled(self)

    def SetViewCubeEnabled(self, theEnabled: "bool") -> "void":
        return _CadExView.ModelPrs_OffscreenViewPort_SetViewCubeEnabled(self, theEnabled)

    def CameraProjectionType(self) -> "cadex::ModelPrs_CameraProjectionType":
        return _CadExView.ModelPrs_OffscreenViewPort_CameraProjectionType(self)

    def SetCameraProjectionType(self, theType: "cadex::ModelPrs_CameraProjectionType") -> "void":
        return _CadExView.ModelPrs_OffscreenViewPort_SetCameraProjectionType(self, theType)

    def SetCameraPositionType(self, theOrientation: "cadex::ModelPrs_CameraPositionType") -> "void":
        return _CadExView.ModelPrs_OffscreenViewPort_SetCameraPositionType(self, theOrientation)

    def SetCameraView(self, thePosition: "cadex::ModelData_Point const &", theTarget: "cadex::ModelData_Point const &", theUp: "cadex::ModelData_Direction const &") -> "void":
        return _CadExView.ModelPrs_OffscreenViewPort_SetCameraView(self, thePosition, theTarget, theUp)

    def Exploder(self) -> "cadex::ModelPrs_Exploder":
        return _CadExView.ModelPrs_OffscreenViewPort_Exploder(self)
    __swig_destroy__ = _CadExView.delete_ModelPrs_OffscreenViewPort

# Register ModelPrs_OffscreenViewPort in _CadExView:
_CadExView.ModelPrs_OffscreenViewPort_swigregister(ModelPrs_OffscreenViewPort)

class ModelPrs_Scene(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExView.ModelPrs_Scene_swiginit(self, _CadExView.new_ModelPrs_Scene())

    def AddRoot(self, theNode: "ModelPrs_SceneNode") -> "void":
        return _CadExView.ModelPrs_Scene_AddRoot(self, theNode)

    def RemoveRoot(self, theNode: "ModelPrs_SceneNode") -> "void":
        return _CadExView.ModelPrs_Scene_RemoveRoot(self, theNode)

    def Clear(self) -> "void":
        return _CadExView.ModelPrs_Scene_Clear(self)

    def Update(self, *args) -> "void":
        return _CadExView.ModelPrs_Scene_Update(self, *args)

    def Wait(self) -> "void":
        return _CadExView.ModelPrs_Scene_Wait(self)

    def Accept(self, theVisitor: "ModelPrs_SceneNodeVisitor") -> "void":
        return _CadExView.ModelPrs_Scene_Accept(self, theVisitor)

    def SelectionManager(self) -> "cadex::ModelPrs_SelectionManager &":
        return _CadExView.ModelPrs_Scene_SelectionManager(self)
    __swig_destroy__ = _CadExView.delete_ModelPrs_Scene

# Register ModelPrs_Scene in _CadExView:
_CadExView.ModelPrs_Scene_swigregister(ModelPrs_Scene)

class ModelPrs_SceneNode(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "initialized"):
        _CadExView.ModelPrs_SceneNode_swiginit(self, _CadExView.new_ModelPrs_SceneNode(arg2))

    def Parent(self) -> "cadex::ModelPrs_SceneNode":
        return _CadExView.ModelPrs_SceneNode_Parent(self)

    def Detach(self) -> "bool":
        return _CadExView.ModelPrs_SceneNode_Detach(self)

    def AddChildNode(self, theNode: "ModelPrs_SceneNode") -> "bool":
        return _CadExView.ModelPrs_SceneNode_AddChildNode(self, theNode)

    def RemoveChildNode(self, theNode: "ModelPrs_SceneNode") -> "bool":
        return _CadExView.ModelPrs_SceneNode_RemoveChildNode(self, theNode)

    def RemoveChildrenNodes(self) -> "void":
        return _CadExView.ModelPrs_SceneNode_RemoveChildrenNodes(self)

    def Geometry(self) -> "cadex::ModelPrs_Geometry":
        return _CadExView.ModelPrs_SceneNode_Geometry(self)

    def SetGeometry(self, theGeometry: "ModelPrs_Geometry") -> "void":
        return _CadExView.ModelPrs_SceneNode_SetGeometry(self, theGeometry)

    def Appearance(self) -> "cadex::ModelData_Appearance":
        return _CadExView.ModelPrs_SceneNode_Appearance(self)

    def SetAppearance(self, theAppearance: "cadex::ModelData_Appearance const &") -> "void":
        return _CadExView.ModelPrs_SceneNode_SetAppearance(self, theAppearance)

    def Transformation(self) -> "cadex::ModelData_Transformation":
        return _CadExView.ModelPrs_SceneNode_Transformation(self)

    def SetTransformation(self, theTransformation: "cadex::ModelData_Transformation const &") -> "void":
        return _CadExView.ModelPrs_SceneNode_SetTransformation(self, theTransformation)

    def DisplayMode(self) -> "cadex::ModelPrs_DisplayMode":
        return _CadExView.ModelPrs_SceneNode_DisplayMode(self)

    def SetDisplayMode(self, theMode: "cadex::ModelPrs_DisplayMode") -> "void":
        return _CadExView.ModelPrs_SceneNode_SetDisplayMode(self, theMode)

    def SelectionMode(self) -> "cadex::ModelPrs_SelectionMode":
        return _CadExView.ModelPrs_SceneNode_SelectionMode(self)

    def SetSelectionMode(self, theMode: "cadex::ModelPrs_SelectionMode") -> "void":
        return _CadExView.ModelPrs_SceneNode_SetSelectionMode(self, theMode)

    def VisibilityMode(self) -> "cadex::ModelPrs_VisibilityMode":
        return _CadExView.ModelPrs_SceneNode_VisibilityMode(self)

    def SetVisibilityMode(self, theMode: "cadex::ModelPrs_VisibilityMode") -> "void":
        return _CadExView.ModelPrs_SceneNode_SetVisibilityMode(self, theMode)

    def Accept(self, theVisitor: "ModelPrs_SceneNodeVisitor") -> "void":
        return _CadExView.ModelPrs_SceneNode_Accept(self, theVisitor)

    def Invalidate(self) -> "void":
        return _CadExView.ModelPrs_SceneNode_Invalidate(self)

    def __init__(self, *args):
        if len(args):
            _CadExCore.ModelPrs_SceneNode_swiginit(self, _CadExCore.new_ModelPrs_SceneNode(*args))
        else:
            self.__init__(_Base_PublicObject_initialized())

    __swig_destroy__ = _CadExView.delete_ModelPrs_SceneNode

# Register ModelPrs_SceneNode in _CadExView:
_CadExView.ModelPrs_SceneNode_swigregister(ModelPrs_SceneNode)

class ModelPrs_SceneNodeFactory(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExView.ModelPrs_SceneNodeFactory_swiginit(self, _CadExView.new_ModelPrs_SceneNodeFactory(*args))

    def Parameters(self, *args) -> "cadex::ModelPrs_SceneNodeFactoryParameters const &":
        return _CadExView.ModelPrs_SceneNodeFactory_Parameters(self, *args)

    def CreateGraph(self, *args) -> "cadex::ModelPrs_SceneNode":
        return _CadExView.ModelPrs_SceneNodeFactory_CreateGraph(self, *args)

    def CreateNode(self, *args) -> "cadex::ModelPrs_SceneNode":
        return _CadExView.ModelPrs_SceneNodeFactory_CreateNode(self, *args)
    __swig_destroy__ = _CadExView.delete_ModelPrs_SceneNodeFactory

# Register ModelPrs_SceneNodeFactory in _CadExView:
_CadExView.ModelPrs_SceneNodeFactory_swigregister(ModelPrs_SceneNodeFactory)

class ModelPrs_SceneNodeFactoryParameters(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CadExView.ModelPrs_SceneNodeFactoryParameters_swiginit(self, _CadExView.new_ModelPrs_SceneNodeFactoryParameters(*args))

    def SetMesherParameters(self, theParameters: "ModelAlgo_BRepMesherParameters const &") -> "void":
        return _CadExView.ModelPrs_SceneNodeFactoryParameters_SetMesherParameters(self, theParameters)

    def MesherParameters(self) -> "ModelAlgo_BRepMesherParameters const &":
        return _CadExView.ModelPrs_SceneNodeFactoryParameters_MesherParameters(self)
    __swig_destroy__ = _CadExView.delete_ModelPrs_SceneNodeFactoryParameters

# Register ModelPrs_SceneNodeFactoryParameters in _CadExView:
_CadExView.ModelPrs_SceneNodeFactoryParameters_swigregister(ModelPrs_SceneNodeFactoryParameters)

class ModelPrs_SceneNodeVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExView.delete_ModelPrs_SceneNodeVisitor

    @abstractmethod
    def VisitEnter(self, theNode: "ModelPrs_SceneNode") -> "bool":
        return _CadExView.ModelPrs_SceneNodeVisitor_VisitEnter(self, theNode)

    @abstractmethod
    def VisitLeave(self, theNode: "ModelPrs_SceneNode") -> "void":
        return _CadExView.ModelPrs_SceneNodeVisitor_VisitLeave(self, theNode)

    def __init__(self):
        if self.__class__ == ModelPrs_SceneNodeVisitor:
            _self = None
        else:
            _self = self
        _CadExView.ModelPrs_SceneNodeVisitor_swiginit(self, _CadExView.new_ModelPrs_SceneNodeVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExView.disown_ModelPrs_SceneNodeVisitor(self)
        return weakref.proxy(self)

# Register ModelPrs_SceneNodeVisitor in _CadExView:
_CadExView.ModelPrs_SceneNodeVisitor_swigregister(ModelPrs_SceneNodeVisitor)

class ModelPrs_SelectionChangesObserver(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ModelPrs_SelectionChangesObserver:
            _self = None
        else:
            _self = self
        _CadExView.ModelPrs_SelectionChangesObserver_swiginit(self, _CadExView.new_ModelPrs_SelectionChangesObserver(_self, ))
    __swig_destroy__ = _CadExView.delete_ModelPrs_SelectionChangesObserver

    @abstractmethod
    def SelectionChangedByScene(self, theCurrent: "ModelPrs_Selection", theSelected: "ModelPrs_Selection", theDeselected: "ModelPrs_Selection") -> "void":
        return _CadExView.ModelPrs_SelectionChangesObserver_SelectionChangedByScene(self, theCurrent, theSelected, theDeselected)

    @abstractmethod
    def SelectionChangedByManager(self, theCurrent: "ModelPrs_Selection", theSelected: "ModelPrs_Selection", theDeselected: "ModelPrs_Selection") -> "void":
        return _CadExView.ModelPrs_SelectionChangesObserver_SelectionChangedByManager(self, theCurrent, theSelected, theDeselected)
    def __disown__(self):
        self.this.disown()
        _CadExView.disown_ModelPrs_SelectionChangesObserver(self)
        return weakref.proxy(self)

# Register ModelPrs_SelectionChangesObserver in _CadExView:
_CadExView.ModelPrs_SelectionChangesObserver_swigregister(ModelPrs_SelectionChangesObserver)

class ModelPrs_Selection(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "initialized"):
        _CadExView.ModelPrs_Selection_swiginit(self, _CadExView.new_ModelPrs_Selection(arg2))

    def Accept(self, theVisitor: "ModelPrs_SelectionVisitor") -> "void":
        return _CadExView.ModelPrs_Selection_Accept(self, theVisitor)

    def Append(self, *args) -> "void":
        return _CadExView.ModelPrs_Selection_Append(self, *args)

    def Merge(self, theSelection: "ModelPrs_Selection") -> "void":
        return _CadExView.ModelPrs_Selection_Merge(self, theSelection)
    __swig_destroy__ = _CadExView.delete_ModelPrs_Selection

# Register ModelPrs_Selection in _CadExView:
_CadExView.ModelPrs_Selection_swigregister(ModelPrs_Selection)

class ModelPrs_SelectionVisitor(ABC, object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExView.delete_ModelPrs_SelectionVisitor

    @abstractmethod
    def VisitSceneNode(self, theNode: "ModelPrs_SceneNode") -> "void":
        return _CadExView.ModelPrs_SelectionVisitor_VisitSceneNode(self, theNode)

    @abstractmethod
    def VisitSceneNodeShapes(self, theNode: "ModelPrs_SceneNode", theShapes: "std::vector< cadex::ModelData_Shape,std::allocator< cadex::ModelData_Shape > > const &") -> "void":
        return _CadExView.ModelPrs_SelectionVisitor_VisitSceneNodeShapes(self, theNode, theShapes)

    def __init__(self):
        if self.__class__ == ModelPrs_SelectionVisitor:
            _self = None
        else:
            _self = self
        _CadExView.ModelPrs_SelectionVisitor_swiginit(self, _CadExView.new_ModelPrs_SelectionVisitor(_self, ))
    def __disown__(self):
        self.this.disown()
        _CadExView.disown_ModelPrs_SelectionVisitor(self)
        return weakref.proxy(self)

# Register ModelPrs_SelectionVisitor in _CadExView:
_CadExView.ModelPrs_SelectionVisitor_swigregister(ModelPrs_SelectionVisitor)

class ModelPrs_ViewCubeStyle(cadexchanger.CadExCore.Base_PublicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExView.ModelPrs_ViewCubeStyle_swiginit(self, _CadExView.new_ModelPrs_ViewCubeStyle())

    def NormalColor(self) -> "cadex::ModelData_Color const &":
        return _CadExView.ModelPrs_ViewCubeStyle_NormalColor(self)

    def SetNormalColor(self, theColor: "ModelData_Color") -> "void":
        return _CadExView.ModelPrs_ViewCubeStyle_SetNormalColor(self, theColor)

    def HoveredColor(self) -> "cadex::ModelData_Color const &":
        return _CadExView.ModelPrs_ViewCubeStyle_HoveredColor(self)

    def SetHoveredColor(self, theColor: "ModelData_Color") -> "void":
        return _CadExView.ModelPrs_ViewCubeStyle_SetHoveredColor(self, theColor)

    def PressedColor(self) -> "cadex::ModelData_Color const &":
        return _CadExView.ModelPrs_ViewCubeStyle_PressedColor(self)

    def SetPressedColor(self, theColor: "ModelData_Color") -> "void":
        return _CadExView.ModelPrs_ViewCubeStyle_SetPressedColor(self, theColor)

    def TextColor(self) -> "cadex::ModelData_Color const &":
        return _CadExView.ModelPrs_ViewCubeStyle_TextColor(self)

    def SetTextColor(self, theColor: "ModelData_Color") -> "void":
        return _CadExView.ModelPrs_ViewCubeStyle_SetTextColor(self, theColor)

    def TrihedronTextColor(self) -> "cadex::ModelData_Color const &":
        return _CadExView.ModelPrs_ViewCubeStyle_TrihedronTextColor(self)

    def SetTrihedronTextColor(self, theColor: "ModelData_Color") -> "void":
        return _CadExView.ModelPrs_ViewCubeStyle_SetTrihedronTextColor(self, theColor)
    __swig_destroy__ = _CadExView.delete_ModelPrs_ViewCubeStyle

# Register ModelPrs_ViewCubeStyle in _CadExView:
_CadExView.ModelPrs_ViewCubeStyle_swigregister(ModelPrs_ViewCubeStyle)



