# This file modified for abstract classes
from abc import ABC, abstractmethod
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CadExIGES
else:
    import _CadExIGES

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _CadExIGES.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CadExIGES.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _CadExIGES.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExIGES.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CadExIGES.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _CadExIGES.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _CadExIGES.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _CadExIGES.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _CadExIGES.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _CadExIGES.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _CadExIGES.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _CadExIGES.SwigPyIterator_advance(self, n)

    def IsEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExIGES.SwigPyIterator_IsEqual(self, x)

    def IsNotEqual(self, x: "SwigPyIterator") -> "bool":
        return _CadExIGES.SwigPyIterator_IsNotEqual(self, x)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CadExIGES:
_CadExIGES.SwigPyIterator_swigregister(SwigPyIterator)

import cadexchanger.CadExCore
class IGES_ReaderParameters(cadexchanger.CadExCore.Base_ReaderParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    V2 = _CadExIGES.IGES_ReaderParameters_V2
    Auto = _CadExIGES.IGES_ReaderParameters_Auto
    Use2d = _CadExIGES.IGES_ReaderParameters_Use2d
    Use3d = _CadExIGES.IGES_ReaderParameters_Use3d

    def __init__(self):
        _CadExIGES.IGES_ReaderParameters_swiginit(self, _CadExIGES.new_IGES_ReaderParameters())

    def SkipBlank(self) -> "bool":
        return _CadExIGES.IGES_ReaderParameters_SkipBlank(self)

    def Version(self) -> "cadex::IGES_ReaderParameters::VersionType":
        return _CadExIGES.IGES_ReaderParameters_Version(self)

    def SurfaceCurveMode(self) -> "cadex::IGES_ReaderParameters::SurfaceCurveModeType":
        return _CadExIGES.IGES_ReaderParameters_SurfaceCurveMode(self)

    def SetSkipBlank(self, theSkipBlank: "bool") -> "void":
        return _CadExIGES.IGES_ReaderParameters_SetSkipBlank(self, theSkipBlank)

    def SetVersion(self, theVersion: "cadex::IGES_ReaderParameters::VersionType") -> "void":
        return _CadExIGES.IGES_ReaderParameters_SetVersion(self, theVersion)

    def SetSurfaceCurveMode(self, theSurfaceCurveMode: "cadex::IGES_ReaderParameters::SurfaceCurveModeType") -> "void":
        return _CadExIGES.IGES_ReaderParameters_SetSurfaceCurveMode(self, theSurfaceCurveMode)
    __swig_destroy__ = _CadExIGES.delete_IGES_ReaderParameters

# Register IGES_ReaderParameters in _CadExIGES:
_CadExIGES.IGES_ReaderParameters_swigregister(IGES_ReaderParameters)

class IGES_Reader(cadexchanger.CadExCore.Base_Reader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExIGES.IGES_Reader_swiginit(self, _CadExIGES.new_IGES_Reader())

    def Parameters(self) -> "cadex::IGES_ReaderParameters const &":
        return _CadExIGES.IGES_Reader_Parameters(self)

    def SetParameters(self, theParameters: "IGES_ReaderParameters") -> "void":
        return _CadExIGES.IGES_Reader_SetParameters(self, theParameters)
    __swig_destroy__ = _CadExIGES.delete_IGES_Reader

# Register IGES_Reader in _CadExIGES:
_CadExIGES.IGES_Reader_swigregister(IGES_Reader)

class IGES_WriterParameters(cadexchanger.CadExCore.Base_WriterParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    V2 = _CadExIGES.IGES_WriterParameters_V2
    BoundedSurfaces = _CadExIGES.IGES_WriterParameters_BoundedSurfaces
    MSBO = _CadExIGES.IGES_WriterParameters_MSBO

    def __init__(self):
        _CadExIGES.IGES_WriterParameters_swiginit(self, _CadExIGES.new_IGES_WriterParameters())

    def Version(self) -> "cadex::IGES_WriterParameters::VersionType":
        return _CadExIGES.IGES_WriterParameters_Version(self)

    def WriteMode(self) -> "cadex::IGES_WriterParameters::WriteModeType":
        return _CadExIGES.IGES_WriterParameters_WriteMode(self)

    def SetVersion(self, theVersion: "cadex::IGES_WriterParameters::VersionType") -> "void":
        return _CadExIGES.IGES_WriterParameters_SetVersion(self, theVersion)

    def SetWriteMode(self, theWriteMode: "cadex::IGES_WriterParameters::WriteModeType") -> "void":
        return _CadExIGES.IGES_WriterParameters_SetWriteMode(self, theWriteMode)
    __swig_destroy__ = _CadExIGES.delete_IGES_WriterParameters

# Register IGES_WriterParameters in _CadExIGES:
_CadExIGES.IGES_WriterParameters_swigregister(IGES_WriterParameters)

class IGES_Writer(cadexchanger.CadExCore.Base_Writer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CadExIGES.IGES_Writer_swiginit(self, _CadExIGES.new_IGES_Writer())

    def Parameters(self) -> "cadex::IGES_WriterParameters const &":
        return _CadExIGES.IGES_Writer_Parameters(self)

    def SetParameters(self, theParameters: "IGES_WriterParameters") -> "void":
        return _CadExIGES.IGES_Writer_SetParameters(self, theParameters)
    __swig_destroy__ = _CadExIGES.delete_IGES_Writer

# Register IGES_Writer in _CadExIGES:
_CadExIGES.IGES_Writer_swigregister(IGES_Writer)



